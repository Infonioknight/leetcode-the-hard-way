"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[52343],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),m=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=m(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,u=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=m(n),d=a,k=p["".concat(i,".").concat(d)]||p[d]||c[d]||u;return n?r.createElement(k,o(o({ref:t},l),{},{components:n})):r.createElement(k,o({ref:t},l))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var u=n.length,o=new Array(u);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var m=2;m<u;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},35293:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>y,frontMatter:()=>u,metadata:()=>s,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const u={description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/subarray-sum-equals-k/"},o="0560 - Subarray Sum Equals K (Medium)",s={unversionedId:"0500-0599/subarray-sum-equals-k-medium",id:"0500-0599/subarray-sum-equals-k-medium",title:"0560 - Subarray Sum Equals K (Medium)",description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/subarray-sum-equals-k/",source:"@site/solutions/0500-0599/0560-subarray-sum-equals-k-medium.md",sourceDirName:"0500-0599",slug:"/0500-0599/subarray-sum-equals-k-medium",permalink:"/solutions/0500-0599/subarray-sum-equals-k-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0500-0599/0560-subarray-sum-equals-k-medium.md",tags:[],version:"current",sidebarPosition:560,frontMatter:{description:"Author: @wingkwong, @ganajayant | https://leetcode.com/problems/subarray-sum-equals-k/"},sidebar:"tutorialSidebar",previous:{title:"0559 - Maximum Depth of N-ary Tree (Easy)",permalink:"/solutions/0500-0599/maximum-depth-of-n-ary-tree-easy"},next:{title:"0567 - Permutation in String (Medium)",permalink:"/solutions/0500-0599/permutation-in-string-medium"}},i={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Hash Map",id:"approach-1-hash-map",level:2}],l=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},p=l("Tabs"),c=l("TabItem"),d=l("SolutionAuthor"),k={toc:m},b="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(b,(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0560---subarray-sum-equals-k-medium"},"0560 - Subarray Sum Equals K (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/subarray-sum-equals-k/"},"https://leetcode.com/problems/subarray-sum-equals-k/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an array of integers ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,a.kt)("em",{parentName:"p"},"the total number of continuous subarrays whose sum equals to ",(0,a.kt)("inlineCode",{parentName:"em"},"k")),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,1,1], k = 2\nOutput: 2\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3], k = 3\nOutput: 2\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 2 * 10^4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-1000 <= nums[i] <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-10^7 <= k <= 10^7"))),(0,a.kt)("h2",{id:"approach-1-hash-map"},"Approach 1: Hash Map"),(0,a.kt)("p",null,"We use hash map to store the cumulative sum $$sum","[i]","$$ up to index $$i$$. If $$sum","[i]"," - sum","[j]"," = k$$, then it means the sum between indices $$i$$ and $$j$$ is $$k$$. Therefore, we store the cumulative sum, search for $$sum - k$$ in the hash map and add the occurrences if it is found to the answer."),(0,a.kt)(p,{mdxType:"Tabs"},(0,a.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n        unordered_map<int, int> m;\n        m[0]++;\n        int sum = 0, ans = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n            ans += m[sum - k];\n            m[sum]++;\n        }\n        return ans;\n    }\n};\n"))),(0,a.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(d,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int sum = 0, result = 0;\n        HashMap<Integer, Integer> preSum = new HashMap<>();\n        preSum.put(0, 1);\n        for (int i = 0; i < nums.length; i++) {\n            sum += nums[i];\n            if (preSum.containsKey(sum - k)) {\n                result += preSum.get(sum - k);\n            }\n            preSum.put(sum, preSum.getOrDefault(sum, 0) + 1);\n        }\n        return result;\n    }\n}\n")))))}y.isMDXComponent=!0}}]);