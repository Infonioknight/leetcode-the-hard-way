"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[93855],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),f=o,h=c["".concat(l,".").concat(f)]||c[f]||u[f]||i;return n?r.createElement(h,a(a({ref:t},m),{},{components:n})):r.createElement(h,a({ref:t},m))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},12114:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/sum-of-scores-of-built-strings/"},a="2223 - Sum of Scores of Built Strings (Hard)",s={unversionedId:"2200-2299/sum-of-scores-of-built-strings-hard",id:"2200-2299/sum-of-scores-of-built-strings-hard",title:"2223 - Sum of Scores of Built Strings (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/sum-of-scores-of-built-strings/",source:"@site/solutions/2200-2299/2223-sum-of-scores-of-built-strings-hard.md",sourceDirName:"2200-2299",slug:"/2200-2299/sum-of-scores-of-built-strings-hard",permalink:"/solutions/2200-2299/sum-of-scores-of-built-strings-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2223-sum-of-scores-of-built-strings-hard.md",tags:[],version:"current",sidebarPosition:2223,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/sum-of-scores-of-built-strings/"},sidebar:"tutorialSidebar",previous:{title:"2218 - Maximum Value of K Coins From Piles (Hard)",permalink:"/solutions/2200-2299/maximum-value-of-k-coins-from-piles-hard"},next:{title:"2224 - Minimum Number of Operations to Convert Time (Easy)",permalink:"/solutions/2200-2299/minimum-number-of-operations-to-convert-time-easy"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Z Algorithm",id:"approach-1-z-algorithm",level:2}],m=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const u={toc:p},f="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(f,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"2223---sum-of-scores-of-built-strings-hard"},"2223 - Sum of Scores of Built Strings (Hard)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sum-of-scores-of-built-strings/"},"https://leetcode.com/problems/sum-of-scores-of-built-strings/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are ",(0,o.kt)("strong",{parentName:"p"},"building")," a string ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," of length ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," ",(0,o.kt)("strong",{parentName:"p"},"one")," character at a time, ",(0,o.kt)("strong",{parentName:"p"},"prepending")," each new character to the ",(0,o.kt)("strong",{parentName:"p"},"front")," of the string. The strings are labeled from ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"n"),", where the string with length ",(0,o.kt)("inlineCode",{parentName:"p"},"i")," is labeled ",(0,o.kt)("inlineCode",{parentName:"p"},"si"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For example, for ",(0,o.kt)("inlineCode",{parentName:"li"},'s = "abaca"'),", ",(0,o.kt)("inlineCode",{parentName:"li"},'s1 == "a"'),", ",(0,o.kt)("inlineCode",{parentName:"li"},'s2 == "ca"'),", ",(0,o.kt)("inlineCode",{parentName:"li"},'s3 == "aca"'),", etc.")),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"score")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"si")," is the length of the ",(0,o.kt)("strong",{parentName:"p"},"longest common prefix")," between ",(0,o.kt)("inlineCode",{parentName:"p"},"si")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"sn")," (Note that ",(0,o.kt)("inlineCode",{parentName:"p"},"s == sn"),")."),(0,o.kt)("p",null,"Given the final string ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),", return ",(0,o.kt)("em",{parentName:"p"},"the ",(0,o.kt)("strong",{parentName:"em"},"sum")," of the ",(0,o.kt)("strong",{parentName:"em"},"score")," of every")," ",(0,o.kt)("inlineCode",{parentName:"p"},"si"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: s = "babab"\nOutput: 9\nExplanation:\nFor s1 == "b", the longest common prefix is "b" which has a score of 1.\nFor s2 == "ab", there is no common prefix so the score is 0.\nFor s3 == "bab", the longest common prefix is "bab" which has a score of 3.\nFor s4 == "abab", there is no common prefix so the score is 0.\nFor s5 == "babab", the longest common prefix is "babab" which has a score of 5.\nThe sum of the scores is 1 + 0 + 3 + 0 + 5 = 9, so we return 9.\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: s = "azbazbzaz"\nOutput: 14\nExplanation: \nFor s2 == "az", the longest common prefix is "az" which has a score of 2.\nFor s6 == "azbzaz", the longest common prefix is "azb" which has a score of 3.\nFor s9 == "azbazbzaz", the longest common prefix is "azbazbzaz" which has a score of 9.\nFor all other si, the score is 0.\nThe sum of the scores is 2 + 3 + 9 = 14, so we return 14.\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= s.length <= 10^5")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"s")," consists of lowercase English letters.")),(0,o.kt)("h2",{id:"approach-1-z-algorithm"},"Approach 1: Z Algorithm"),(0,o.kt)("p",null,"The sum of the score of every $$s_i$$ would be the sum of the values in $$Z$$ array."),(0,o.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    template <typename T>\n    vector<int> z_function(int n, const T &s) {\n      vector<int> z(n, n);\n      int l = 0, r = 0;\n      for (int i = 1; i < n; i++) {\n        z[i] = (i > r ? 0 : min(r - i + 1, z[i - l]));\n        while (i + z[i] < n && s[z[i]] == s[i + z[i]]) {\n          z[i]++;\n        }\n        if (i + z[i] - 1 > r) {\n          l = i;\n          r = i + z[i] - 1;\n        }\n      }\n      return z;\n    }\n\n    template <typename T>\n    vector<int> z_function(const T &s) {\n      return z_function((int)s.size(), s);\n    }\n\n    long long sumScores(string s) {\n        long long ans = 0;\n        vector<int> z = z_function(s);\n        for (auto x : z) ans += x;\n        return ans; \n    }\n};\n")))}h.isMDXComponent=!0}}]);