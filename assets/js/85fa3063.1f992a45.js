"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[29712],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>k});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,k=u["".concat(s,".").concat(d)]||u[d]||c[d]||o;return t?i.createElement(k,a(a({ref:n},m),{},{components:t})):i.createElement(k,a({ref:n},m))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<o;p++)a[p]=t[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1955:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>k,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=t(87462),r=(t(67294),t(3905));const o={description:"Author: @wingkwong| https://leetcode.com/problems/max-consecutive-ones-iii/"},a="1004 - Max Consecutive Ones III (Medium)",l={unversionedId:"1000-1099/max-consecutive-ones-iii-medium",id:"1000-1099/max-consecutive-ones-iii-medium",title:"1004 - Max Consecutive Ones III (Medium)",description:"Author: @wingkwong| https://leetcode.com/problems/max-consecutive-ones-iii/",source:"@site/solutions/1000-1099/1004-max-consecutive-ones-iii-medium.md",sourceDirName:"1000-1099",slug:"/1000-1099/max-consecutive-ones-iii-medium",permalink:"/solutions/1000-1099/max-consecutive-ones-iii-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1000-1099/1004-max-consecutive-ones-iii-medium.md",tags:[],version:"current",sidebarPosition:1004,frontMatter:{description:"Author: @wingkwong| https://leetcode.com/problems/max-consecutive-ones-iii/"},sidebar:"tutorialSidebar",previous:{title:"1000 - Minimum Cost to Merge Stones (Hard)",permalink:"/solutions/1000-1099/minimum-cost-to-merge-stones-hard"},next:{title:"1011 - Capacity to Ship Packages within d days (Medium)",permalink:"/solutions/1000-1099/capacity-to-ship-packages-within-d-days-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window",id:"approach-1-sliding-window",level:2}],m=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const c={toc:p},d="wrapper";function k(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1004---max-consecutive-ones-iii-medium"},"1004 - Max Consecutive Ones III (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/max-consecutive-ones-iii/"},"https://leetcode.com/problems/max-consecutive-ones-iii/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given a binary array ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,r.kt)("em",{parentName:"p"},"the maximum number of consecutive")," ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),(0,r.kt)("em",{parentName:"p"},"'s in the array if you can flip at most")," ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"'s."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2\nOutput: 6\nExplanation: [1,1,1,0,0,1,1,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3\nOutput: 10\nExplanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 10^5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nums[i]")," is either ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= k <= nums.length"))),(0,r.kt)("h2",{id:"approach-1-sliding-window"},"Approach 1: Sliding Window"),(0,r.kt)("p",null,"We are looking for the longest subarray with $$k$$ zeros. We can use standard sliding windows to solve it."),(0,r.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int longestOnes(vector<int>& nums, int k) {\n        // pointer i = window starting point\n        // pointer j = window ending point\n        int n = nums.size(), ans = 0, i = 0, j = 0;\n        while (j < n) {\n            // if it is 0, then decrease k by 1\n            if (nums[j] == 0) k -= 1;\n            // k < 0 means the window includes k zeros\n            if (k < 0) {\n                // if the starting point of the window is 0,\n                // then add 1 to k to reduce the window size by 1 \n                if (nums[i] == 0) k++;\n                // move pointer i\n                i++;\n            }\n            // move pointer j\n            j++;\n        }\n        return j - i;\n    }\n};c\n")))}k.isMDXComponent=!0}}]);