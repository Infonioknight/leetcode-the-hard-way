"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[90573],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),m=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=m(n),b=a,d=p["".concat(u,".").concat(b)]||p[b]||c[b]||o;return n?r.createElement(d,i(i({ref:t},s),{},{components:n})):r.createElement(d,i({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},54892:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/make-array-zero-by-subtracting-equal-amounts"},i="2357 - Make Array Zero by Subtracting Equal Amounts (Easy)",l={unversionedId:"2300-2399/make-array-zero-by-subtracting-equal-amounts-easy",id:"2300-2399/make-array-zero-by-subtracting-equal-amounts-easy",title:"2357 - Make Array Zero by Subtracting Equal Amounts (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/make-array-zero-by-subtracting-equal-amounts",source:"@site/solutions/2300-2399/2357-make-array-zero-by-subtracting-equal-amounts-easy.md",sourceDirName:"2300-2399",slug:"/2300-2399/make-array-zero-by-subtracting-equal-amounts-easy",permalink:"/solutions/2300-2399/make-array-zero-by-subtracting-equal-amounts-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2300-2399/2357-make-array-zero-by-subtracting-equal-amounts-easy.md",tags:[],version:"current",sidebarPosition:2357,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/make-array-zero-by-subtracting-equal-amounts"},sidebar:"tutorialSidebar",previous:{title:"2354 - Number of Excellent Pairs (Hard)",permalink:"/solutions/2300-2399/number-of-excellent-pairs-hard"},next:{title:"2358 - Maximum Number of Groups Entering a Competition (Medium)",permalink:"/solutions/2300-2399/maximum-number-of-groups-entering-a-competition-medium"}},u={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach: Counting",id:"approach-counting",level:2}],s=(p="SolutionAuthor",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var p;const c={toc:m},b="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(b,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2357---make-array-zero-by-subtracting-equal-amounts-easy"},"2357 - Make Array Zero by Subtracting Equal Amounts (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/make-array-zero-by-subtracting-equal-amounts"},"https://leetcode.com/problems/make-array-zero-by-subtracting-equal-amounts")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a non-negative integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums"),". In one operation, you must:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Choose a positive integer ",(0,a.kt)("inlineCode",{parentName:"li"},"x")," such that ",(0,a.kt)("inlineCode",{parentName:"li"},"x")," is less than or equal to the ",(0,a.kt)("strong",{parentName:"li"},"smallest non-zero")," element in ",(0,a.kt)("inlineCode",{parentName:"li"},"nums"),"."),(0,a.kt)("li",{parentName:"ul"},"Subtract ",(0,a.kt)("inlineCode",{parentName:"li"},"x")," from every ",(0,a.kt)("strong",{parentName:"li"},"positive")," element in ",(0,a.kt)("inlineCode",{parentName:"li"},"nums"),".")),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"minimum")," number of operations to make every element in")," ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," ",(0,a.kt)("em",{parentName:"p"},"equal to")," ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,5,0,3,5]\nOutput: 3\nExplanation:\nIn the first operation, choose x = 1. Now, nums = [0,4,0,2,4].\nIn the second operation, choose x = 2. Now, nums = [0,2,0,0,2].\nIn the third operation, choose x = 2. Now, nums = [0,0,0,0,0].\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [0]\nOutput: 0\nExplanation: Each element in nums is already 0 so no operations are needed.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 100")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= nums[i] <= 100"))),(0,a.kt)("h2",{id:"approach-counting"},"Approach: Counting"),(0,a.kt)("p",null,"Observations:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We can remove all numbers ",(0,a.kt)("inlineCode",{parentName:"li"},"x")," in one go"),(0,a.kt)("li",{parentName:"ul"},"We need $n$ moves to remove $n$ distinct numbers "),(0,a.kt)("li",{parentName:"ul"},"Hence, the problem is to find out the number of different positive numbers")),(0,a.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func minimumOperations(nums []int) int {\n    s := make(map[int]bool)\n    for _, v := range nums {\n        if v > 0 { \n            s[v] = true\n        }\n    }\n    return len(s)\n}\n")))}d.isMDXComponent=!0}}]);