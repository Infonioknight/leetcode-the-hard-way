"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[85109],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(t),c=i,f=m["".concat(s,".").concat(c)]||m[c]||d[c]||a;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},26502:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=t(87462),i=(t(67294),t(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/find-unique-binary-string/"},o="1980 - Find Unique Binary String (Medium)",l={unversionedId:"1900-1999/find-unique-binary-string-medium",id:"1900-1999/find-unique-binary-string-medium",title:"1980 - Find Unique Binary String (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/find-unique-binary-string/",source:"@site/solutions/1900-1999/1980-find-unique-binary-string-medium.md",sourceDirName:"1900-1999",slug:"/1900-1999/find-unique-binary-string-medium",permalink:"/solutions/1900-1999/find-unique-binary-string-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1900-1999/1980-find-unique-binary-string-medium.md",tags:[],version:"current",sidebarPosition:1980,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-unique-binary-string/"},sidebar:"tutorialSidebar",previous:{title:"1929 - Concatenation of Array (Easy)",permalink:"/solutions/1900-1999/concatenation-of-array-easy"},next:{title:"1992 - Find All Groups of Farmland (Medium)",permalink:"/solutions/1900-1999/find-all-groups-of-farmland-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Hash Map",id:"approach-1-hash-map",level:2}],u=(m="SolutionAuthor",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var m;const d={toc:p},c="wrapper";function f(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"1980---find-unique-binary-string-medium"},"1980 - Find Unique Binary String (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-unique-binary-string/"},"https://leetcode.com/problems/find-unique-binary-string/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given an array of strings ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," containing ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," ",(0,i.kt)("strong",{parentName:"p"},"unique")," binary strings each of length ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", return ",(0,i.kt)("em",{parentName:"p"},"a binary string of length")," ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," ",(0,i.kt)("em",{parentName:"p"},"that ",(0,i.kt)("strong",{parentName:"em"},"does not appear")," in")," ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),(0,i.kt)("em",{parentName:"p"},". If there are multiple answers, you may return ",(0,i.kt)("strong",{parentName:"em"},"any")," of them"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: nums = ["01","10"]\nOutput: "11"\nExplanation: "11" does not appear in nums. "00" would also be correct.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: nums = ["00","01"]\nOutput: "11"\nExplanation: "11" does not appear in nums. "10" would also be correct.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: nums = ["111","011","001"]\nOutput: "101"\nExplanation: "101" does not appear in nums. "000", "010", "100", and "110" would also be correct.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n == nums.length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= n <= 16")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nums[i].length == n")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nums[i]")," is either ",(0,i.kt)("inlineCode",{parentName:"li"},"'0'")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"'1'"),"."),(0,i.kt)("li",{parentName:"ul"},"All the strings of ",(0,i.kt)("inlineCode",{parentName:"li"},"nums")," are ",(0,i.kt)("strong",{parentName:"li"},"unique"),".")),(0,i.kt)("h2",{id:"approach-1-hash-map"},"Approach 1: Hash Map"),(0,i.kt)("p",null,"First we store the existing binary string into a hash map. Then we try to build all binary strings one by one and check if it exists in the hash map or not. If so, we return the answer."),(0,i.kt)("p",null,"As $$n$$ is at most $$16$$, there would be at most $$2 ^ {16} = 65536$$ possibilities. To find all of them, we can do the following."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"// try all 2 ^ n possibilities\nfor (int i = 0; i < 1 << n; i ++) {\n    string s;\n    // if the bit is set, mark it as one\n    if (i & (1 << j)) s += '1';\n    // else mark it as zero\n    else s += '0'\n    // TODO: do something with s\n    // s here would be one of the binary string\n}\n")),(0,i.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string findDifferentBinaryString(vector<string>& nums) {\n        string ans;\n        // put existing binary strings into a hash map\n        unordered_map<string, int> m;\n        for (auto x : nums) m[x]++;\n        int n = nums.size();\n        // build all binary strings\n        for (int i = 0; i < 1 << n; i++) {\n            string s;\n            for (int j = 0; j < n; j++) {\n                s += (i & (1 << j)) ? '1' : '0';\n            }\n            // not found in hash map -> found the answer\n            if (!m.count(s)) {\n                ans = s;\n                break;\n            }\n        }\n        return ans;\n    }\n};\n")))}f.isMDXComponent=!0}}]);