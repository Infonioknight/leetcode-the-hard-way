"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[16325],{3905:(e,i,n)=>{n.d(i,{Zo:()=>c,kt:()=>h});var t=n(67294);function r(e,i,n){return i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n,e}function s(e,i){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);i&&(t=t.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var i=1;i<arguments.length;i++){var n=null!=arguments[i]?arguments[i]:{};i%2?s(Object(n),!0).forEach((function(i){r(e,i,n[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(n,i))}))}return e}function a(e,i){if(null==e)return{};var n,t,r=function(e,i){if(null==e)return{};var n,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],i.indexOf(n)>=0||(r[n]=e[n]);return r}(e,i);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],i.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=t.createContext({}),l=function(e){var i=t.useContext(m),n=i;return e&&(n="function"==typeof e?e(i):o(o({},i),e)),n},c=function(e){var i=l(e.components);return t.createElement(m.Provider,{value:i},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var i=e.children;return t.createElement(t.Fragment,{},i)}},p=t.forwardRef((function(e,i){var n=e.components,r=e.mdxType,s=e.originalType,m=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=l(n),p=r,h=d["".concat(m,".").concat(p)]||d[p]||u[p]||s;return n?t.createElement(h,o(o({ref:i},c),{},{components:n})):t.createElement(h,o({ref:i},c))}));function h(e,i){var n=arguments,r=i&&i.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=p;var a={};for(var m in i)hasOwnProperty.call(i,m)&&(a[m]=i[m]);a.originalType=e,a[d]="string"==typeof e?e:r,o[1]=a;for(var l=2;l<s;l++)o[l]=n[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1062:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>m,contentTitle:()=>o,default:()=>v,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=n(87462),r=(n(67294),n(3905));const s={description:"Author: @wingkwong | https://leetcode.com/problems/find-the-maximum-divisibility-score/"},o="2644 - Find the Maximum Divisibility Score (Easy)",a={unversionedId:"2600-2699/find-the-maximum-divisibility-score-easy",id:"2600-2699/find-the-maximum-divisibility-score-easy",title:"2644 - Find the Maximum Divisibility Score (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/find-the-maximum-divisibility-score/",source:"@site/solutions/2600-2699/2644-find-the-maximum-divisibility-score-easy.md",sourceDirName:"2600-2699",slug:"/2600-2699/find-the-maximum-divisibility-score-easy",permalink:"/solutions/2600-2699/find-the-maximum-divisibility-score-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2600-2699/2644-find-the-maximum-divisibility-score-easy.md",tags:[],version:"current",sidebarPosition:2644,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-the-maximum-divisibility-score/"},sidebar:"tutorialSidebar",previous:{title:"2639 - Find the Width of Columns of a Grid (Easy)",permalink:"/solutions/2600-2699/find-the-width-of-columns-of-a-grid-easy"}},m={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2}],c=e=>function(i){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",i)},d=c("Tabs"),u=c("TabItem"),p=c("SolutionAuthor"),h={toc:l},b="wrapper";function v(e){let{components:i,...n}=e;return(0,r.kt)(b,(0,t.Z)({},h,n,{components:i,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2644---find-the-maximum-divisibility-score-easy"},"2644 - Find the Maximum Divisibility Score (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-the-maximum-divisibility-score/"},"https://leetcode.com/problems/find-the-maximum-divisibility-score/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given two ",(0,r.kt)("strong",{parentName:"p"},"0-indexed")," integer arrays ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"divisors"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"divisibility score")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"divisors[i]")," is the number of indices ",(0,r.kt)("inlineCode",{parentName:"p"},"j")," such that ",(0,r.kt)("inlineCode",{parentName:"p"},"nums[j]")," is divisible by ",(0,r.kt)("inlineCode",{parentName:"p"},"divisors[i]"),"."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the integer")," ",(0,r.kt)("inlineCode",{parentName:"p"},"divisors[i]")," ",(0,r.kt)("em",{parentName:"p"},"with the maximum divisibility score"),". If there is more than one integer with the maximum score, return the minimum of them."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [4,7,9,3,9], divisors = [5,2,3]\nOutput: 3\nExplanation: The divisibility score for every element in divisors is:\nThe divisibility score of divisors[0] is 0 since no number in nums is divisible by 5.\nThe divisibility score of divisors[1] is 1 since nums[0] is divisible by 2.\nThe divisibility score of divisors[2] is 3 since nums[2], nums[3], and nums[4] are divisible by 3.\nSince divisors[2] has the maximum divisibility score, we return it.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [20,14,21,10], divisors = [5,7,5]\nOutput: 5\nExplanation: The divisibility score for every element in divisors is:\nThe divisibility score of divisors[0] is 2 since nums[0] and nums[3] are divisible by 5.\nThe divisibility score of divisors[1] is 2 since nums[1] and nums[2] are divisible by 7.\nThe divisibility score of divisors[2] is 2 since nums[0] and nums[3] are divisible by 5.\nSince divisors[0], divisors[1], and divisors[2] all have the maximum divisibility score, we return the minimum of them (i.e., divisors[2]).\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [12], divisors = [10,16]\nOutput: 10\nExplanation: The divisibility score for every element in divisors is:\nThe divisibility score of divisors[0] is 0 since no number in nums is divisible by 10.\nThe divisibility score of divisors[1] is 0 since no number in nums is divisible by 16.\nSince divisors[0] and divisors[1] both have the maximum divisibility score, we return the minimum of them (i.e., divisors[0]).\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= nums.length, divisors.length <= 1000")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= nums[i], divisors[i] <= 10^9"))),(0,r.kt)("h2",{id:"approach-1-brute-force"},"Approach 1: Brute Force"),(0,r.kt)(d,{mdxType:"Tabs"},(0,r.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(p,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxDivScore(vector<int>& nums, vector<int>& divisors) {\n        int ans = -1, mx_cnt = -1;\n        // for each divisor\n        for (auto d : divisors) {\n            int cnt = 0;\n            // we check each number `x`\n            for (auto x : nums) {\n                // to see if `x` can be divisible by `d`\n                if (x % d == 0) {\n                    // if so, increase the counter by 1\n                    cnt += 1;\n                }\n            }\n            // if the counter is greater than the current max\n            if (cnt > mx_cnt) {\n                // then update hte current max\n                mx_cnt = cnt;\n                // `d` will be the possible answer\n                ans = d;\n            } else if (cnt == mx_cnt) {\n                // however, if the counter is same as the current max\n                // then we need to take the min one\n                ans = min(ans, d);\n            }\n        }\n        return ans;\n    }\n};\n"))),(0,r.kt)(u,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)(p,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def maxDivScore(self, nums: List[int], divisors: List[int]) -> int:\n        res = -1\n        mx_cnt = -1\n        # for each divisor\n        for d in divisors:\n            cnt = 0\n            # we check each number `x`\n            for x in nums:\n                # to see if `x` can be divisible by `d`\n                if x % d == 0:\n                    # if so, increase the counter by 1\n                    cnt += 1\n            # if the counter is greater than the current max\n            if cnt > mx_cnt:\n                # then update hte current max\n                mx_cnt = cnt\n                # `d` will be the possible answer\n                res = d\n            elif cnt == mx_cnt:\n                # however, if the counter is same as the current max\n                # then we need to take the min one\n                res = min(res, d)\n        return res\n")))))}v.isMDXComponent=!0}}]);