"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[94241],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||l;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},98329:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const l={title:"Binary Search",description:"Binary search is the searching strategy that reduces the search space by half every iteration until you have found the target.",hide_table_of_contents:!1,keywords:["leetcode","template","binary search"]},i=void 0,o={unversionedId:"binary-search",id:"binary-search",title:"Binary Search",description:"Binary search is the searching strategy that reduces the search space by half every iteration until you have found the target.",source:"@site/templates/binary-search.md",sourceDirName:".",slug:"/binary-search",permalink:"/templates/binary-search",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/templates/binary-search.md",tags:[],version:"current",frontMatter:{title:"Binary Search",description:"Binary search is the searching strategy that reduces the search space by half every iteration until you have found the target.",hide_table_of_contents:!1,keywords:["leetcode","template","binary search"]},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/templates/"},next:{title:"Bit Manipulation",permalink:"/templates/bit-manipulation"}},s={},c=[],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},m=u("Tabs"),p=u("TabItem"),d={toc:c},h="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Please refer the ",(0,a.kt)("a",{parentName:"p",href:"../tutorials/basic-topics/binary-search"},"tutorial")," guide for more details. "),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(p,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int search(vector<int>& nums, int target) {\n    // init possible boundary\n    int n = nums.size(), l = 0, r = n - 1;\n    while (l < r) {\n        // get the middle one\n        // for even number of elements, take the upper one\n        int m = l + (r - l + 1) / 2;\n        // exclude m (condition not fulfilled)\n        if (target < nums[m]) r = m - 1;\n        // include m\n        else l = m;\n    }\n    return nums[l] == target ? l : -1;\n}\n"))),(0,a.kt)(p,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"int search(int[] nums, int target) {\n    // init possible boundary\n    int n = nums.length, l = 0, r = n - 1;\n    while (l < r) {\n        // get the middle one\n        // for even number of elements, take the upper one\n        int m = l + (r - l + 1) / 2;\n        // exclude m (condition not fulfilled)\n        if (target < nums[m]) r = m - 1;\n        // include m\n        else l = m;\n    }\n    return nums[l] == target ? l : -1;\n}\n")))),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(p,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int search(vector<int>& nums, int target) {\n    // init possible boundary\n    int n = nums.size(), l = 0, r = n - 1;\n    while (l < r) {\n        // get the middle one\n        // for even number of elements, take the lower one\n        int m = l + (r - l) / 2;\n        // exclude m (condition not fulfilled)\n        if (target > nums[m]) l = m + 1;\n        // include m\n        else r = m;\n    }\n    return nums[l] == target ? l : -1;\n}\n"))),(0,a.kt)(p,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"int search(int[] nums, int target) {\n    // init possible boundary\n    int n = nums.length, l = 0, r = n - 1;\n    while (l < r) {\n        // get the middle one\n        // for even number of elements, take the lower one\n        int m = l + (r - l) / 2;\n        // exclude m (condition not fulfilled)\n        if (target > nums[m]) l = m + 1;\n        // include m\n        else r = m;\n    }\n    return nums[l] == target ? l : -1;\n}\n")))))}f.isMDXComponent=!0}}]);