"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[5215],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,h=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(h,i(i({ref:t},s),{},{components:n})):r.createElement(h,i({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},65811:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/make-number-of-distinct-characters-equal/"},i="2531 - Make Number of Distinct Characters Equal (Medium)",l={unversionedId:"2500-2599/make-number-of-distinct-characters-equal-medium",id:"2500-2599/make-number-of-distinct-characters-equal-medium",title:"2531 - Make Number of Distinct Characters Equal (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/make-number-of-distinct-characters-equal/",source:"@site/solutions/2500-2599/2531-make-number-of-distinct-characters-equal-medium.md",sourceDirName:"2500-2599",slug:"/2500-2599/make-number-of-distinct-characters-equal-medium",permalink:"/solutions/2500-2599/make-number-of-distinct-characters-equal-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2500-2599/2531-make-number-of-distinct-characters-equal-medium.md",tags:[],version:"current",sidebarPosition:2531,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/make-number-of-distinct-characters-equal/"},sidebar:"tutorialSidebar",previous:{title:"2530 - Maximal Score After Applying K Operations (Medium)",permalink:"/solutions/2500-2599/maximal-score-after-applying-k-operations-medium"},next:{title:"2535 - Difference Between Element Sum and Digit Sum of an Array (Easy)",permalink:"/solutions/2500-2599/difference-between-element-sum-and-digit-sum-of-an-array-easy"}},c={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Hashmap",id:"approach-1-hashmap",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},m=s("Tabs"),u=s("TabItem"),d=s("SolutionAuthor"),h={toc:p},f="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2531---make-number-of-distinct-characters-equal-medium"},"2531 - Make Number of Distinct Characters Equal (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/make-number-of-distinct-characters-equal/"},"https://leetcode.com/problems/make-number-of-distinct-characters-equal/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given two ",(0,a.kt)("strong",{parentName:"p"},"0-indexed")," strings ",(0,a.kt)("inlineCode",{parentName:"p"},"word1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"word2"),"."),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"move")," consists of choosing two indices ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"j")," such that ",(0,a.kt)("inlineCode",{parentName:"p"},"0 <= i < word1.length")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"0 <= j < word2.length")," and swapping ",(0,a.kt)("inlineCode",{parentName:"p"},"word1[i]")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"word2[j]"),"."),(0,a.kt)("p",null,"Return ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," ",(0,a.kt)("em",{parentName:"p"},"if it is possible to get the number of distinct characters in")," ",(0,a.kt)("inlineCode",{parentName:"p"},"word1")," ",(0,a.kt)("em",{parentName:"p"},"and")," ",(0,a.kt)("inlineCode",{parentName:"p"},"word2")," ",(0,a.kt)("em",{parentName:"p"},"to be equal with ",(0,a.kt)("strong",{parentName:"em"},"exactly one")," move."),"Return ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," ",(0,a.kt)("em",{parentName:"p"},"otherwise"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: word1 = "ac", word2 = "b"\nOutput: false\nExplanation: Any pair of swaps would yield two distinct characters in the first string, and one in the second string.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: word1 = "abcc", word2 = "aab"\nOutput: true\nExplanation: We swap index 2 of the first string with index 0 of the second string. The resulting strings are word1 = "abac" and word2 = "cab", which both have 3 distinct characters.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: word1 = "abcde", word2 = "fghij"\nOutput: true\nExplanation: Both resulting strings will have 5 distinct characters, regardless of which indices we swap.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= word1.length, word2.length <= 105")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"word1")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"word2")," consist of only lowercase English letters.")),(0,a.kt)("h2",{id:"approach-1-hashmap"},"Approach 1: Hashmap"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isItPossible(string word1, string word2) {\n        unordered_map<char, int> m1, m2;\n        // count the frequency of each character in word1\n        for (char c : word1) m1[c]++;\n        // count the frequency of each character in word2\n        for (char c : word2) m2[c]++;\n        // simulate the swap\n        for (int i = 0; i < 26; i++) {\n            for (int j = 0; j < 26; j++) {\n                char x = i + 'a';\n                char y = j + 'a';\n                // if we need to swap x and y, \n                // we need to make sure x is in word1 and y is in word2\n                if (m1[x] > 0 && m2[y] > 0) {\n                    // swap x in word1 and y in word2\n                    m1[x]--; m2[x]++;\n                    m1[y]++; m2[y]--;\n                    // check if the number of distinct characters are equal\n                    int cnt1 = 0, cnt2 = 0;\n                    for (int k = 0; k < 26; k++) {\n                        cnt1 += m1[k + 'a'] > 0;\n                        cnt2 += m2[k + 'a'] > 0;\n                    }\n                    // if so, then return true\n                    if (cnt1 == cnt2) return true;\n                    // undo the swap so that we can perform a new swap\n                    m1[x]++; m2[x]--;\n                    m1[y]--; m2[y]++;   \n                }\n            }\n        }\n        return false;\n    }\n};\n")))))}k.isMDXComponent=!0}}]);