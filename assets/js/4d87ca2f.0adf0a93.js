"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[62425],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},32020:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/shortest-palindrome/"},a="0214 - Shortest Palindrome (Hard)",l={unversionedId:"0200-0299/shortest-palindrome-hard",id:"0200-0299/shortest-palindrome-hard",title:"0214 - Shortest Palindrome (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/shortest-palindrome/",source:"@site/solutions/0200-0299/0214-shortest-palindrome-hard.md",sourceDirName:"0200-0299",slug:"/0200-0299/shortest-palindrome-hard",permalink:"/solutions/0200-0299/shortest-palindrome-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0214-shortest-palindrome-hard.md",tags:[],version:"current",sidebarPosition:214,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/shortest-palindrome/"},sidebar:"tutorialSidebar",previous:{title:"0213 - House Robber II (Medium)",permalink:"/solutions/0200-0299/house-robber-ii-medium"},next:{title:"0215 - Kth Largest Element in an Array (Medium)",permalink:"/solutions/0200-0299/kth-largest-element-in-an-array-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Z Algorithm",id:"approach-1-z-algorithm",level:2}],c=(m="SolutionAuthor",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var m;const u={toc:p},d="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0214---shortest-palindrome-hard"},"0214 - Shortest Palindrome (Hard)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/shortest-palindrome/"},"https://leetcode.com/problems/shortest-palindrome/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given a string ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),". You can convert ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," to a palindrome by adding characters in front of it."),(0,o.kt)("p",null,"Return ",(0,o.kt)("em",{parentName:"p"},"the shortest palindrome you can find by performing this transformation"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: s = "aacecaaa"\nOutput: "aaacecaaa"\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: s = "abcd"\nOutput: "dcbabcd"\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= s.length <= 5 * 10^4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"s")," consists of lowercase English letters only.")),(0,o.kt)("h2",{id:"approach-1-z-algorithm"},"Approach 1: Z Algorithm"),(0,o.kt)("p",null,"We first concatenate the search pattern and given string with a character that is not in either strings, says $$ $ $$. Hence, we have $$k = s + $ + t$$. Then We built $$Z$$ and iterate $$k$$. If there is a $$i$$ that can satisfy $$Z","[i]"," == n - i$$, then the answer would be $$t'$$+ $$s$$ where $$t'$$ is the first $$n - i$$ characters of $$s$$."),(0,o.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    vector<int> z_function(string s) {\n        int n = (int) s.length();\n        vector<int> z(n);\n        for (int i = 1, l = 0, r = 0; i < n; ++i) {\n            if (i <= r)\n                z[i] = min (r - i + 1, z[i - l]);\n            while (i + z[i] < n && s[z[i]] == s[i + z[i]])\n                ++z[i];\n            if (i + z[i] - 1 > r)\n                l = i, r = i + z[i] - 1;\n        }\n        return z;\n    }\n    \n    string shortestPalindrome(string s) {\n        string r(s);\n        reverse(r.begin(), r.end());\n        string k = s + "$" + r;\n        vector<int> z = z_function(k);\n        int n = k.size();\n        for(int i = 0; i < n; i++) {\n            if(z[i] == n - i) {\n                string s2 = s.substr(n - i);\n                reverse(s2.begin(), s2.end());\n                return s2 + s;\n            }\n        }\n        return "";\n    }\n};\n')))}h.isMDXComponent=!0}}]);