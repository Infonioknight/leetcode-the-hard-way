"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[70709],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),s=l(n),d=o,k=s["".concat(u,".").concat(d)]||s[d]||c[d]||a;return n?r.createElement(k,i(i({ref:t},m),{},{components:n})):r.createElement(k,i({ref:t},m))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p[s]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85725:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>k,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/top-k-frequent-elements/"},i="0347 - Top K Frequent Elements (Medium)",p={unversionedId:"0300-0399/top-k-frequent-elements-medium",id:"0300-0399/top-k-frequent-elements-medium",title:"0347 - Top K Frequent Elements (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/top-k-frequent-elements/",source:"@site/solutions/0300-0399/0347-top-k-frequent-elements-medium.md",sourceDirName:"0300-0399",slug:"/0300-0399/top-k-frequent-elements-medium",permalink:"/solutions/0300-0399/top-k-frequent-elements-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0300-0399/0347-top-k-frequent-elements-medium.md",tags:[],version:"current",sidebarPosition:347,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/top-k-frequent-elements/"},sidebar:"tutorialSidebar",previous:{title:"0346 - Moving Average from Data Stream (Easy)",permalink:"/solutions/0300-0399/moving-average-from-data-stream-easy"},next:{title:"0349 - Intersection of Two Arrays (Easy)",permalink:"/solutions/0300-0399/intersection-of-two-arrays-easy"}},u={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Priority Queue",id:"approach-1-priority-queue",level:2}],m=(s="SolutionAuthor",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var s;const c={toc:l},d="wrapper";function k(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0347---top-k-frequent-elements-medium"},"0347 - Top K Frequent Elements (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/top-k-frequent-elements/"},"https://leetcode.com/problems/top-k-frequent-elements/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given an integer array ",(0,o.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,o.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,o.kt)("em",{parentName:"p"},"the")," ",(0,o.kt)("inlineCode",{parentName:"p"},"k")," ",(0,o.kt)("em",{parentName:"p"},"most frequent elements"),". You may return the answer in ",(0,o.kt)("strong",{parentName:"p"},"any order"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1], k = 1\nOutput: [1]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 10^5")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"k")," is in the range ",(0,o.kt)("inlineCode",{parentName:"li"},"[1, the number of unique elements in the array]"),"."),(0,o.kt)("li",{parentName:"ul"},"It is ",(0,o.kt)("strong",{parentName:"li"},"guaranteed")," that the answer is ",(0,o.kt)("strong",{parentName:"li"},"unique"),".")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Follow up:")," Your algorithm's time complexity must be better than ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n log n)"),", where n is the array's size."),(0,o.kt)("h2",{id:"approach-1-priority-queue"},"Approach 1: Priority Queue"),(0,o.kt)("p",null,'When you need to solve something started with "Top K ...", priority queue may possibly be the solution.'),(0,o.kt)("p",null,"We use priority queue to sort the input by their frequency and pop the top element when the queue size is greater than $$k$$. What's left in the queue would be the top $$k$$ frequent elements and we just list them out in a reverse order."),(0,o.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        int n = nums.size();\n        if(n == k) return nums;\n        map<int, int> m;\n        // store the frequency of each number\n        for(auto x : nums) m[x]++;\n        // define a custom comparator\n        auto cmp = [&](int x, int y) {\n            return m[x] > m[y];\n        };\n        // init priority queue with a custom comparator\n        priority_queue<int, vector<int>, decltype(cmp)> pq(cmp);\n        // iterate each number\n        for(auto x : m) {\n            // add this number\n            pq.push(x.first);\n            // out of queue size, pop the one with min frequency out\n            if(pq.size() > k) {\n                pq.pop();\n            }\n        }\n        // construct ans\n        vector<int> ans(k);\n        for(int i = k - 1; i >= 0; i--) {\n            ans[i] = pq.top(); \n            pq.pop();\n        }\n        return ans;\n    }\n};\n")))}k.isMDXComponent=!0}}]);