"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[67869],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=o.createContext({}),u=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return o.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),m=u(n),c=i,y=m["".concat(p,".").concat(c)]||m[c]||d[c]||r;return n?o.createElement(y,l(l({ref:t},s),{},{components:n})):o.createElement(y,l({ref:t},s))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[m]="string"==typeof e?e:i,l[1]=a;for(var u=2;u<r;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},64294:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>y,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var o=n(87462),i=(n(67294),n(3905));const r={description:"Author: @wingkwong | https://leetcode.com/problems/keep-multiplying-found-values-by-two/"},l="2154 - Keep Multiplying Found Values by Two (Easy)",a={unversionedId:"2100-2199/keep-multiplying-found-values-by-two-easy",id:"2100-2199/keep-multiplying-found-values-by-two-easy",title:"2154 - Keep Multiplying Found Values by Two (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/keep-multiplying-found-values-by-two/",source:"@site/solutions/2100-2199/2154-keep-multiplying-found-values-by-two-easy.md",sourceDirName:"2100-2199",slug:"/2100-2199/keep-multiplying-found-values-by-two-easy",permalink:"/solutions/2100-2199/keep-multiplying-found-values-by-two-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2154-keep-multiplying-found-values-by-two-easy.md",tags:[],version:"current",sidebarPosition:2154,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/keep-multiplying-found-values-by-two/"},sidebar:"tutorialSidebar",previous:{title:"2151 - Maximum Good People Based on Statements (Hard)",permalink:"/solutions/2100-2199/maximum-good-people-based-on-statements-hard"},next:{title:"2155 - All Divisions With the Highest Score of a Binary Array (Medium)",permalink:"/solutions/2100-2199/all-divisions-with-the-highest-score-of-a-binary-array-medium"}},p={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Simulation with Set",id:"approach-1-simulation-with-set",level:2}],s=(m="SolutionAuthor",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var m;const d={toc:u},c="wrapper";function y(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2154---keep-multiplying-found-values-by-two-easy"},"2154 - Keep Multiplying Found Values by Two (Easy)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/keep-multiplying-found-values-by-two/"},"https://leetcode.com/problems/keep-multiplying-found-values-by-two/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given an array of integers ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),". You are also given an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"original")," which is the first number that needs to be searched for in ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,i.kt)("p",null,"You then do the following steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"original")," is found in ",(0,i.kt)("inlineCode",{parentName:"li"},"nums"),", ",(0,i.kt)("strong",{parentName:"li"},"multiply")," it by two (i.e., set ",(0,i.kt)("inlineCode",{parentName:"li"},"original = 2 * original"),")."),(0,i.kt)("li",{parentName:"ol"},"Otherwise, ",(0,i.kt)("strong",{parentName:"li"},"stop")," the process."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Repeat")," this process with the new number as long as you keep finding the number.")),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the ",(0,i.kt)("strong",{parentName:"em"},"final")," value of")," ",(0,i.kt)("inlineCode",{parentName:"p"},"original"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [5,3,6,1,12], original = 3\nOutput: 24\nExplanation: \n- 3 is found in nums. 3 is multiplied by 2 to obtain 6.\n- 6 is found in nums. 6 is multiplied by 2 to obtain 12.\n- 12 is found in nums. 12 is multiplied by 2 to obtain 24.\n- 24 is not found in nums. Thus, 24 is returned.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [2,7,9], original = 4\nOutput: 4\nExplanation:\n- 4 is not found in nums. Thus, 4 is returned.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 1000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums[i], original <= 1000"))),(0,i.kt)("h2",{id:"approach-1-simulation-with-set"},"Approach 1: Simulation with Set"),(0,i.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findFinalValue(vector<int>& nums, int original) {\n        set<int> s(nums.begin(), nums.end());\n        while (s.count(original)) original *= 2;\n        return original;\n    }\n};\n")))}y.isMDXComponent=!0}}]);