"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[48791],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=m(t),c=a,f=u["".concat(s,".").concat(c)]||u[c]||p[c]||i;return t?r.createElement(f,o(o({ref:n},d),{},{components:t})):r.createElement(f,o({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var m=2;m<i;m++)o[m]=t[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},54783:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var r=t(87462),a=(t(67294),t(3905));const i={description:"Author: @wingkwong, @ganajayant, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/"},o="0034 - Find First and Last Position of Element in Sorted Array (Medium)",l={unversionedId:"0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium",id:"0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium",title:"0034 - Find First and Last Position of Element in Sorted Array (Medium)",description:"Author: @wingkwong, @ganajayant, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/",source:"@site/solutions/0000-0099/0034-find-first-and-last-position-of-element-in-sorted-array-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium",permalink:"/solutions/0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0034-find-first-and-last-position-of-element-in-sorted-array-medium.md",tags:[],version:"current",sidebarPosition:34,frontMatter:{description:"Author: @wingkwong, @ganajayant, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/"},sidebar:"tutorialSidebar",previous:{title:"0033 - Search in Rotated Sorted Array (Medium)",permalink:"/solutions/0000-0099/search-in-rotated-sorted-array-medium"},next:{title:"0035 - Search Insert Position (Easy)",permalink:"/solutions/0000-0099/search-insert-position-easy"}},s={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2},{value:"Approach 2: Binary Search Optimal",id:"approach-2-binary-search-optimal",level:2}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},u=d("Tabs"),p=d("TabItem"),c=d("SolutionAuthor"),f={toc:m},g="wrapper";function h(e){let{components:n,...t}=e;return(0,a.kt)(g,(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0034---find-first-and-last-position-of-element-in-sorted-array-medium"},"0034 - Find First and Last Position of Element in Sorted Array (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/"},"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an array of integers ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," sorted in non-decreasing order, find the starting and ending position of a given ",(0,a.kt)("inlineCode",{parentName:"p"},"target")," value."),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"target")," is not found in the array, return ",(0,a.kt)("inlineCode",{parentName:"p"},"[-1, -1]"),"."),(0,a.kt)("p",null,"You must write an algorithm with ",(0,a.kt)("inlineCode",{parentName:"p"},"O(log n)")," runtime complexity."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [], target = 0\nOutput: [-1,-1]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= nums.length <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-10^9 <= nums[i] <= 10^9")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nums")," is a non-decreasing array."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-10^9 <= target <= 10^9"))),(0,a.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,a.kt)("admonition",{title:"Prerequisite",type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../../tutorials/basic-topics/binary-search"},"Binary Search")))),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(p,{value:"c++",label:"C++",mdxType:"TabItem"},(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int getFirstPosition(vector<int>& nums, int target) {\n        int n = nums.size(), l = 0, r = n - 1;\n        while (l < r) {\n            int m = l + (r - l) / 2;\n            if (target > nums[m]) l = m + 1;\n            else r = m;\n        }\n        return nums[l] == target ? l : -1;\n    }\n\n    int getLastPosition(vector<int>& nums, int target) {\n        int n = nums.size(), l = 0, r = n - 1;\n        while (l < r) {\n            int m = l + (r - l + 1) / 2;\n            if (target < nums[m]) r = m - 1;\n            else l = m;\n        }\n        return nums[l] == target ? l : -1;\n    }\n\n    vector<int> searchRange(vector<int>& nums, int target) {\n        int n = nums.size();\n        // handle edge case\n        vector<int> ans = {-1, -1};\n        if (n == 0) return ans;\n        // return the lower bound and upper bound - 1\n        return vector<int> {\n            // if the first position is -1, we can return ans directly\n            getFirstPosition(nums, target),\n            getLastPosition(nums, target)\n        };\n    }\n};\n"))),(0,a.kt)(p,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(c,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int start = 0, end = nums.length - 1, firstelement = -1;\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n            if (nums[mid] == target) {\n                firstelement = mid;\n                end = mid - 1;\n            } else if (nums[mid] > target) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        start = 0;\n        end = nums.length - 1;\n        int endelement = -1;\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n            if (nums[mid] == target) {\n                endelement = mid;\n                start = mid + 1;\n            } else if (nums[mid] > target) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return new int[] { firstelement, endelement };\n    }\n}\n"))),(0,a.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)(c,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar searchRange = function (nums, target) {\n  let l = 0;\n  let r = nums.length - 1;\n  while (l <= r) {\n    let mid = Math.floor((l + r) / 2);\n    if (nums[l] == target && nums[r] == target) {\n      return [l, r];\n    }\n    if (nums[mid] > target) {\n      r = mid - 1;\n    } else if (nums[mid] < target) {\n      l = mid + 1;\n    } else {\n      if (nums[l] != target) l++;\n      if (nums[r] != target) r--;\n    }\n  }\n  return [-1, -1];\n};\n"))),(0,a.kt)(p,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(c,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[l] == nums[r] == target:\n                return [l, r]\n            if nums[mid] > target:\n                r = mid - 1\n            elif nums[mid] < target:\n                l = mid + 1\n            else:\n                if nums[l] != target: l += 1\n                if nums[r] != target: r -= 1\n        return [-1, -1]\n\n")))),(0,a.kt)("h2",{id:"approach-2-binary-search-optimal"},"Approach 2: Binary Search Optimal"),(0,a.kt)("p",null,"To find the start and end indices, try to find the start index first, if it doesn't exist then the array not having the given element. So added a condition to check if the first index is not found then skip the end index block."),(0,a.kt)("p",null,"Instead of having two loops for both cases, have a flag that differentiates between the start and end index search space."),(0,a.kt)("p",null,"Time complexity: $O(log n)$"),(0,a.kt)("p",null,"Space complexity: $O(1)$"),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(p,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(c,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int[] result = {-1, -1};\n        result[0] = searchIndex(nums, target, true);\n        if (result[0] != -1) {\n            result[1] = searchIndex(nums, target, false);\n        }\n        return result;\n    }\n\n    private int searchIndex(int[] nums, int target, boolean startIndex) {\n        int low = 0, high = nums.length - 1;\n        int index = -1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (target < nums[mid]) {\n                high = mid - 1;\n            } else if (target > nums[mid]) {\n                low = mid + 1;\n            } else {\n                index = mid;\n                if (startIndex) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return index;\n    }\n}\n")))))}h.isMDXComponent=!0}}]);