"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[64755],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=r.createContext({}),s=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(m.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=a,h=u["".concat(m,".").concat(d)]||u[d]||c[d]||i;return t?r.createElement(h,o(o({ref:n},p),{},{components:t})):r.createElement(h,o({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},41293:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const i={description:"Author: @jessicaribeiroalves, @radojicic23 | https://leetcode.com/problems/integer-to-roman/"},o="0012 - Integer to Roman (Medium)",l={unversionedId:"0000-0099/integer-to-roman-medium",id:"0000-0099/integer-to-roman-medium",title:"0012 - Integer to Roman (Medium)",description:"Author: @jessicaribeiroalves, @radojicic23 | https://leetcode.com/problems/integer-to-roman/",source:"@site/solutions/0000-0099/0012-integer-to-roman-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/integer-to-roman-medium",permalink:"/solutions/0000-0099/integer-to-roman-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0012-integer-to-roman-medium.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{description:"Author: @jessicaribeiroalves, @radojicic23 | https://leetcode.com/problems/integer-to-roman/"},sidebar:"tutorialSidebar",previous:{title:"0011 - Container With Most Water (Medium)",permalink:"/solutions/0000-0099/container-with-most-water-medium"},next:{title:"0013 - Roman to Integer (Easy)",permalink:"/solutions/0000-0099/roman-to-integer-easy"}},m={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Iterating over a list",id:"approach-1-iterating-over-a-list",level:2}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},u=p("Tabs"),c=p("TabItem"),d=p("SolutionAuthor"),h={toc:s},g="wrapper";function k(e){let{components:n,...t}=e;return(0,a.kt)(g,(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0012---integer-to-roman-medium"},"0012 - Integer to Roman (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/integer-to-roman/"},"https://leetcode.com/problems/integer-to-roman/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Roman numerals are represented by seven different symbols: ",(0,a.kt)("inlineCode",{parentName:"p"},"I"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"V"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"X"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"L"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"C"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"D")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"M"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},"Symbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n")),(0,a.kt)("p",null,"For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"2")," is written as ",(0,a.kt)("inlineCode",{parentName:"p"},"II")," in Roman numeral, just two ones added together. ",(0,a.kt)("inlineCode",{parentName:"p"},"12")," is written as ",(0,a.kt)("inlineCode",{parentName:"p"},"XII"),", which is simply ",(0,a.kt)("inlineCode",{parentName:"p"},"X + II"),". The number ",(0,a.kt)("inlineCode",{parentName:"p"},"27")," is written as ",(0,a.kt)("inlineCode",{parentName:"p"},"XXVII"),", which is ",(0,a.kt)("inlineCode",{parentName:"p"},"XX + V + II"),"."),(0,a.kt)("p",null,"Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not ",(0,a.kt)("inlineCode",{parentName:"p"},"IIII"),". Instead, the number four is written as ",(0,a.kt)("inlineCode",{parentName:"p"},"IV"),". Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as ",(0,a.kt)("inlineCode",{parentName:"p"},"IX"),". There are six instances where subtraction is used:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"I")," can be placed before ",(0,a.kt)("inlineCode",{parentName:"li"},"V")," (5) and ",(0,a.kt)("inlineCode",{parentName:"li"},"X")," (10) to make 4 and 9."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"X")," can be placed before ",(0,a.kt)("inlineCode",{parentName:"li"},"L")," (50) and ",(0,a.kt)("inlineCode",{parentName:"li"},"C")," (100) to make 40 and 90."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"C")," can be placed before ",(0,a.kt)("inlineCode",{parentName:"li"},"D")," (500) and ",(0,a.kt)("inlineCode",{parentName:"li"},"M")," (1000) to make 400 and 900.")),(0,a.kt)("p",null,"Given an integer, convert it to a roman numeral."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},'Input: num = 3\nOutput: "III"\nExplanation: 3 is represented as 3 ones.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},'Input: num = 58\nOutput: "LVIII"\nExplanation: L = 50, V = 5, III = 3.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},'Input: num = 1994\nOutput: "MCMXCIV"\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= num <= 3999"))),(0,a.kt)("h2",{id:"approach-1-iterating-over-a-list"},"Approach 1: Iterating over a list"),(0,a.kt)("p",null,"The solution used was iterating over a tuples list created to map the integers and their respective Roman numerals. So when iterating over the list, while the $remaining$ value is greater than or equal to the first tuple element (which is the integer value), append the corresponding character(s) (the second tuple element) to $result$ and subtract the value from $remaining$."),(0,a.kt)("p",null,"For example, if we consider the given integer $num = 17$, after starting the iteration over the list, the algorithm checks if the integer $17$ is greater than or equal to the first integer value from the first list element, which is $1000$. Since it's not, the code in the while loop is not executed and the next iteration starts checking if $17$ is greater than or equal to $900$ and so on until the iteration checks if $17$ is greater than or equal to $10$. In this iteration the code in the while loop is executed so that the $result$ variable is concatenated with the respective Roman numeral which is $'X'$ and $remaining$ becomes $7$. For the next iteration, $7$ is not greater than or equal to $9$ but on the next one, when it's greater than $5$, $result$ becomes $'XV'$ and $remaining$ becomes $2$. So keeping that logic, after the final iteration $result$ will be $'XVII'$."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Time Complexity: $O(1)$")),(0,a.kt)("p",null,"The time complexity for this solution is $O(1)$ as the algorithm execution time is independent of the size of the input."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Space Complexity: $O(1)$")),(0,a.kt)("p",null,"The space complexity for this solution is also $O(1)$."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(d,{name:"@jessicaribeiroalves",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"numbersDict = [\n    (1000, 'M'),\n    (900, 'CM'),\n    (500, 'D'),\n    (400, 'CD'),\n    (100, 'C'),\n    (90, 'XC'),\n    (50, 'L'),\n    (40, 'XL'),\n    (10, 'X'),\n    (9, 'IX'),\n    (5, 'V'),\n    (4, 'IV'),\n    (1, 'I')\n]\n\nclass Solution(object):\n    def intToRoman(self, num):\n        remaining = num\n        result = ''\n        for integerValue, romanNumeral in numbersDict:\n            while remaining >= integerValue:\n                result += romanNumeral\n                remaining -= integerValue\n        return result\n"))),(0,a.kt)(c,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)(d,{name:"@jessicaribeiroalves",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const numbersDict = [\n    [1000, 'M'],\n    [900, 'CM'],\n    [500, 'D'],\n    [400, 'CD'],\n    [100, 'C'],\n    [90, 'XC'],\n    [50, 'L'],\n    [40, 'XL'],\n    [10, 'X'],\n    [9, 'IX'],\n    [5, 'V'],\n    [4, 'IV'],\n    [1, 'I']\n];\n\nconst intToRoman = (num) => {\n    let remaining = num;\n    let result = '';\n\n    for (let [integerValue, romanNumeral] of numbersDict) {\n        while (remaining >= integerValue) {\n            result += romanNumeral;\n            remaining -= integerValue;\n        }\n    }\n    return result;\n};\n"))),(0,a.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    string intToRoman(int num) {\n        vector<pair<int, string>> numbers = {\n            {1000, "M"}, \n            {900, "CM"}, \n            {500, "D"},\n            {400, "CD"}, \n            {100, "C"}, \n            {90, "XC"}, \n            {50, "L"}, \n            {40, "XL"}, \n            {10, "X"}, \n            {9, "IX"}, \n            {5, "V"}, \n            {4, "IV"}, \n            {1, "I"} \n        };\n        string ans = "";\n        while (num > 0) {\n            for (auto [integer, roman] : numbers) {\n                if (num >= integer) {\n                    ans += roman;\n                    num -= integer;\n                    break;\n                }\n            }\n        }\n        return ans;\n    }\n};\n')))))}k.isMDXComponent=!0}}]);