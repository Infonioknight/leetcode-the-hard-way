"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[82515],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=a,g=c["".concat(l,".").concat(d)]||c[d]||p[d]||o;return n?r.createElement(g,i(i({ref:t},m),{},{components:n})):r.createElement(g,i({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},74947:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return l},default:function(){return k},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/largest-sum-of-averages/",tags:["Array","Dynamic Programming","Prefix Sum"]},l="0813 - Largest Sum of Averages (Medium)",u={unversionedId:"0800-0899/largest-sum-of-averages-medium",id:"0800-0899/largest-sum-of-averages-medium",title:"0813 - Largest Sum of Averages (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/largest-sum-of-averages/",source:"@site/solutions/0800-0899/0813-largest-sum-of-averages-medium.md",sourceDirName:"0800-0899",slug:"/0800-0899/largest-sum-of-averages-medium",permalink:"/leetcode-the-hard-way/solutions/0800-0899/largest-sum-of-averages-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0800-0899/0813-largest-sum-of-averages-medium.md",tags:[{label:"Array",permalink:"/leetcode-the-hard-way/solutions/tags/array"},{label:"Dynamic Programming",permalink:"/leetcode-the-hard-way/solutions/tags/dynamic-programming"},{label:"Prefix Sum",permalink:"/leetcode-the-hard-way/solutions/tags/prefix-sum"}],version:"current",sidebarPosition:813,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/largest-sum-of-averages/",tags:["Array","Dynamic Programming","Prefix Sum"]},sidebar:"tutorialSidebar",previous:{title:"0800 - 0899",permalink:"/leetcode-the-hard-way/solutions/category/0800---0899"},next:{title:"0814 - Binary Tree Pruning (Medium)",permalink:"/leetcode-the-hard-way/solutions/0800-0899/binary-tree-pruning-medium"}},m={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},d=c("Tabs"),g=c("TabItem"),f=c("SolutionAuthor"),h={toc:p};function k(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0813---largest-sum-of-averages-medium"},"0813 - Largest Sum of Averages (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/largest-sum-of-averages/"},"https://leetcode.com/problems/largest-sum-of-averages/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given an integer array ",(0,o.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,o.kt)("inlineCode",{parentName:"p"},"k"),". You can partition the array into ",(0,o.kt)("strong",{parentName:"p"},"at most")," ",(0,o.kt)("inlineCode",{parentName:"p"},"k")," non-empty adjacent subarrays. The ",(0,o.kt)("strong",{parentName:"p"},"score")," of a partition is the sum of the averages of each subarray."),(0,o.kt)("p",null,"Note that the partition must use every integer in ",(0,o.kt)("inlineCode",{parentName:"p"},"nums"),", and that the score is not necessarily an integer."),(0,o.kt)("p",null,"Return ",(0,o.kt)("em",{parentName:"p"},"the maximum ",(0,o.kt)("strong",{parentName:"em"},"score")," you can achieve of all the possible partitions"),". Answers within ",(0,o.kt)("inlineCode",{parentName:"p"},"10-6")," of the actual answer will be accepted."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [9,1,2,3,9], k = 3\nOutput: 20.00000\nExplanation: \nThe best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3,4,5,6,7], k = 4\nOutput: 20.50000\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 100")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 10^4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= k <= nums.length"))),(0,o.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(g,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    double dfs(vector<vector<double>>& dp, vector<int>& nums, int k, int i) {\n        // reached all elements\n        if (i >= nums.size()) return 0;\n        // cannot further partition\n        if (k == 0) return INT_MIN;\n        // the result has been calculated before\n        if (dp[i][k] != -1) return dp[i][k];\n        double mx = INT_MIN, sum = 0;\n        for (int j = i; j < nums.size(); j++) {\n            // sum from nums[i .. j]\n            sum += nums[j];\n            // current partition + the best result starting from the next index\n            mx = max(mx, sum / (j - i + 1) + dfs(dp, nums, k - 1, j + 1));\n        }\n        // memorise the result\n        return dp[i][k] = mx;\n    }\n    double largestSumOfAverages(vector<int>& nums, int k) {\n        int n = nums.size();\n        // The best score partitioning A[i:] into at most K parts\n        vector<vector<double>> dp(n, vector<double>(k + 1, -1));\n        // starting from index 0\n        return dfs(dp, nums, k, 0);\n    }\n};\n")))))}k.isMDXComponent=!0}}]);