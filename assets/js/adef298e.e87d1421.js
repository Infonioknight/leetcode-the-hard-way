"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[83479],{3905:(e,t,a)=>{a.d(t,{Zo:()=>i,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},i=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),c=m(a),k=r,h=c["".concat(p,".").concat(k)]||c[k]||d[k]||l;return a?n.createElement(h,o(o({ref:t},i),{},{components:a})):n.createElement(h,o({ref:t},i))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=k;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var m=2;m<l;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},58372:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>N,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const l={description:"Author: @vigneshshiv | https://leetcode.com/problems/can-place-flowers/"},o="0605 - Can Place Flowers (Easy)",s={unversionedId:"0600-0699/can-place-flowers-easy",id:"0600-0699/can-place-flowers-easy",title:"0605 - Can Place Flowers (Easy)",description:"Author: @vigneshshiv | https://leetcode.com/problems/can-place-flowers/",source:"@site/solutions/0600-0699/0605-can-place-flowers-easy.md",sourceDirName:"0600-0699",slug:"/0600-0699/can-place-flowers-easy",permalink:"/solutions/0600-0699/can-place-flowers-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0600-0699/0605-can-place-flowers-easy.md",tags:[],version:"current",sidebarPosition:605,frontMatter:{description:"Author: @vigneshshiv | https://leetcode.com/problems/can-place-flowers/"},sidebar:"tutorialSidebar",previous:{title:"0600 - 0699",permalink:"/solutions/category/0600---0699"},next:{title:"0606 - Construct String from Binary Tree (Easy)",permalink:"/solutions/0600-0699/construct-string-from-binary-tree-easy"}},p={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: STL",id:"approach-1-stl",level:2}],i=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=i("Tabs"),d=i("TabItem"),k=i("SolutionAuthor"),h={toc:m},u="wrapper";function N(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0605---can-place-flowers-easy"},"0605 - Can Place Flowers (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/can-place-flowers/"},"https://leetcode.com/problems/can-place-flowers/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in ",(0,r.kt)("strong",{parentName:"p"},"adjacent")," plots."),(0,r.kt)("p",null,"Given an integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"flowerbed")," containing ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"'s and ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),"'s, where ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," means empty and ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," means not empty, and an integer ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),", return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," ",(0,r.kt)("em",{parentName:"p"},"if ",(0,r.kt)("inlineCode",{parentName:"em"},"n")," new flowers can be planted in the ",(0,r.kt)("inlineCode",{parentName:"em"},"flowerbed")," without violating the no-adjacent-flowers rule and ",(0,r.kt)("inlineCode",{parentName:"em"},"false")," otherwise"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: flowerbed = [1,0,0,0,1], n = 1\nOutput: true\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: flowerbed = [1,0,0,0,1], n = 2\nOutput: false\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= flowerbed.length <= 2 * 10^4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flowerbed[i]")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,r.kt)("li",{parentName:"ul"},"There are no two adjacent flowers in ",(0,r.kt)("inlineCode",{parentName:"li"},"flowerbed"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= n <= flowerbed.length"))),(0,r.kt)("h2",{id:"approach-1-stl"},"Approach 1: STL"),(0,r.kt)("p",null,"Simplest approach to check is to iterate over the elements and check the prev","[i - 1]"," and next","[i + 1]"," elements to statisfy the constraint. "),(0,r.kt)("p",null,"If given ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," is 0 return ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", or if ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," is higher than the no. of plots available to plant in an array adjacently then return ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". "),(0,r.kt)("p",null,"Time Complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"))))),", where ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"n")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," - # of elements in the array"),(0,r.kt)("p",null,"Space Complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(1)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)(c,{mdxType:"Tabs"},(0,r.kt)(d,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(k,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean canPlaceFlowers(int[] flowerbed, int n) {\n        // Case 1. No flowers to plant, so return true\n        if (n == 0) return true;\n        // Case 2. If No. of flowers to plant adajacently is higher than the half flowerbed array \n        int range = (flowerbed.length / 2) + ((flowerbed.length & 1) == 0 ? 0 : 1);\n        if (n > range) return false;\n        // Case 3. Iterate to check prev[i - 1] and next[i + 1] elements to satisfy the constraint\n        for (int i = 0; i < flowerbed.length; i++) {\n            if (flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == flowerbed.length - 1 || flowerbed[i + 1] == 0)) {\n                flowerbed[i] = 1;\n                n -= 1;\n                if (n == 0) return true;\n            }\n        }\n        return false;\n    }\n}\n")))))}N.isMDXComponent=!0}}]);