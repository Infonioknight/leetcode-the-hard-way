"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[5191],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=i,g=u["".concat(p,".").concat(d)]||u[d]||c[d]||a;return t?r.createElement(g,o(o({ref:n},m),{},{components:t})):r.createElement(g,o({ref:n},m))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},89403:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(87462),i=(t(67294),t(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/prime-in-diagonal/"},o="2614 - Prime In Diagonal (Easy)",l={unversionedId:"2600-2699/prime-in-diagonal-easy",id:"2600-2699/prime-in-diagonal-easy",title:"2614 - Prime In Diagonal (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/prime-in-diagonal/",source:"@site/solutions/2600-2699/2614-prime-in-diagonal-easy.md",sourceDirName:"2600-2699",slug:"/2600-2699/prime-in-diagonal-easy",permalink:"/solutions/2600-2699/prime-in-diagonal-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2600-2699/2614-prime-in-diagonal-easy.md",tags:[],version:"current",sidebarPosition:2614,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/prime-in-diagonal/"},sidebar:"tutorialSidebar",previous:{title:"2600 - 2699",permalink:"/solutions/category/2600---2699"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Check Prime",id:"approach-1-check-prime",level:2}],m=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},u=m("Tabs"),c=m("TabItem"),d=m("SolutionAuthor"),g={toc:s},k="wrapper";function h(e){let{components:n,...t}=e;return(0,i.kt)(k,(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2614---prime-in-diagonal-easy"},"2614 - Prime In Diagonal (Easy)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/prime-in-diagonal/"},"https://leetcode.com/problems/prime-in-diagonal/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given a 0-indexed two-dimensional integer array ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the largest ",(0,i.kt)("strong",{parentName:"em"},"prime")," number that lies on at least one of the ",(0,i.kt)("strong",{parentName:"em"},"diagonals")," of"),(0,i.kt)("inlineCode",{parentName:"p"},"nums"),". In case, no prime is present on any of the diagonals, ",(0,i.kt)("em",{parentName:"p"},"return 0.")),(0,i.kt)("p",null,"Note that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An integer is ",(0,i.kt)("strong",{parentName:"li"},"prime")," if it is greater than ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," and has no positive integer divisors other than ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," and itself."),(0,i.kt)("li",{parentName:"ul"},"An integer ",(0,i.kt)("inlineCode",{parentName:"li"},"val")," is on one of the",(0,i.kt)("strong",{parentName:"li"},"diagonals")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"nums")," if there exists an integer ",(0,i.kt)("inlineCode",{parentName:"li"},"i")," for which ",(0,i.kt)("inlineCode",{parentName:"li"},"nums[i][i] = val")," or an ",(0,i.kt)("inlineCode",{parentName:"li"},"i")," for which ",(0,i.kt)("inlineCode",{parentName:"li"},"nums[i][nums.length - i - 1]= val"),".")),(0,i.kt)("p",null,"In the above diagram, one diagonal is ",(0,i.kt)("strong",{parentName:"p"},"[1,5,9]")," and another diagonal is",(0,i.kt)("strong",{parentName:"p"},"[3,5,7]"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [[1,2,3],[5,6,7],[9,10,11]]\nOutput: 11\nExplanation: The numbers 1, 3, 6, 9, and 11 are the only numbers present on at least one of the diagonals. Since 11 is the largest prime, we return 11.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [[1,2,3],[5,17,7],[9,11,10]]\nOutput: 17\nExplanation: The numbers 1, 3, 9, 10, and 17 are all present on at least one of the diagonals. 17 is the largest prime, so we return 17.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 300")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nums.length == numsi.length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums[i][j]\xa0<= 4*106"))),(0,i.kt)("h2",{id:"approach-1-check-prime"},"Approach 1: Check Prime"),(0,i.kt)(u,{mdxType:"Tabs"},(0,i.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int isPrime(int n) {\n        if (n <= 1) return 0;\n        if (n <= 3) return 1;\n        if (n % 2 == 0 || n % 3 == 0) return 0;\n        for (int i = 5; i * i <= n; i = i + 6) {\n          if (n % i == 0 || n % (i + 2) == 0) {\n            return 0;\n          }\n        } \n        return 1;\n    }\n    \n    int diagonalPrime(vector<vector<int>>& nums) {\n        int ans = 0, n = nums.size();\n        for (int i = 0; i < n; i++) {\n            // check if the number on main diagonal is prime\n            if (isPrime(nums[i][i])) ans = max(ans, nums[i][i]);\n            // check if the number on anti diagonal is prime\n            if (isPrime(nums[i][n - i - 1])) ans = max(ans, nums[i][n - i - 1]);\n        }\n        return ans;\n    }\n};\n")))))}h.isMDXComponent=!0}}]);