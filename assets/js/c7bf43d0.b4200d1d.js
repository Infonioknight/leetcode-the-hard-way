"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[26816],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),u=l(n),c=r,g=u["".concat(p,".").concat(c)]||u[c]||d[c]||o;return n?i.createElement(g,a(a({ref:t},s),{},{components:n})):i.createElement(g,a({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=c;var m={};for(var p in t)hasOwnProperty.call(t,p)&&(m[p]=t[p]);m.originalType=e,m[u]="string"==typeof e?e:r,a[1]=m;for(var l=2;l<o;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},47931:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>m,toc:()=>l});var i=n(87462),r=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/"},a="2160 - Minimum Sum of Four Digit Number After Splitting Digits (Easy)",m={unversionedId:"2100-2199/minimum-sum-of-four-digit-number-after-splitting-digits-easy",id:"2100-2199/minimum-sum-of-four-digit-number-after-splitting-digits-easy",title:"2160 - Minimum Sum of Four Digit Number After Splitting Digits (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/",source:"@site/solutions/2100-2199/2160-minimum-sum-of-four-digit-number-after-splitting-digits-easy.md",sourceDirName:"2100-2199",slug:"/2100-2199/minimum-sum-of-four-digit-number-after-splitting-digits-easy",permalink:"/solutions/2100-2199/minimum-sum-of-four-digit-number-after-splitting-digits-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2160-minimum-sum-of-four-digit-number-after-splitting-digits-easy.md",tags:[],version:"current",sidebarPosition:2160,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/"},sidebar:"tutorialSidebar",previous:{title:"2156 - Find Substring With Given Hash Value (Medium)",permalink:"/solutions/2100-2199/find-substring-with-given-hash-value-medium"},next:{title:"2161 - Partition Array According to Given Pivot (Medium)",permalink:"/solutions/2100-2199/partition-array-according-to-given-pivot-medium"}},p={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sorting &amp; Greedy",id:"approach-1-sorting--greedy",level:2}],s=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const d={toc:l},c="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2160---minimum-sum-of-four-digit-number-after-splitting-digits-easy"},"2160 - Minimum Sum of Four Digit Number After Splitting Digits (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/"},"https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given a ",(0,r.kt)("strong",{parentName:"p"},"positive")," integer ",(0,r.kt)("inlineCode",{parentName:"p"},"num")," consisting of exactly four digits. Split ",(0,r.kt)("inlineCode",{parentName:"p"},"num")," into two new integers ",(0,r.kt)("inlineCode",{parentName:"p"},"new1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"new2")," by using the ",(0,r.kt)("strong",{parentName:"p"},"digits")," found in ",(0,r.kt)("inlineCode",{parentName:"p"},"num"),". ",(0,r.kt)("strong",{parentName:"p"},"Leading zeros")," are allowed in ",(0,r.kt)("inlineCode",{parentName:"p"},"new1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"new2"),", and ",(0,r.kt)("strong",{parentName:"p"},"all")," the digits found in ",(0,r.kt)("inlineCode",{parentName:"p"},"num")," must be used."),(0,r.kt)("p",null,"For example, given ",(0,r.kt)("inlineCode",{parentName:"p"},"num = 2932"),", you have the following digits: two ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),"'s, one ",(0,r.kt)("inlineCode",{parentName:"p"},"9")," and one ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),". Some of the possible pairs ",(0,r.kt)("inlineCode",{parentName:"p"},"[new1, new2]")," are ",(0,r.kt)("inlineCode",{parentName:"p"},"[22, 93]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"[23, 92]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"[223, 9]")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"[2, 329]"),"."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the ",(0,r.kt)("strong",{parentName:"em"},"minimum")," possible sum of")," ",(0,r.kt)("inlineCode",{parentName:"p"},"new1")," ",(0,r.kt)("em",{parentName:"p"},"and")," ",(0,r.kt)("inlineCode",{parentName:"p"},"new2"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: num = 2932\nOutput: 52\nExplanation: Some possible pairs [new1, new2] are [29, 23], [223, 9], etc.\nThe minimum sum can be obtained by the pair [29, 23]: 29 + 23 = 52.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: num = 4009\nOutput: 13\nExplanation: Some possible pairs [new1, new2] are [0, 49], [490, 0], etc. \nThe minimum sum can be obtained by the pair [4, 9]: 4 + 9 = 13.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1000 <= num <= 9999"))),(0,r.kt)("h2",{id:"approach-1-sorting--greedy"},"Approach 1: Sorting & Greedy"),(0,r.kt)("p",null,"We can sort those 4 digits in an increasing order. Let's say $$abcd$$ where $$a <= b <= c <= d$$. We put those two smallest digits to be decimal's place, and those two largest ones in one's place. The answer is simply $$ac + bd$$."),(0,r.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int minimumSum(int num) {\n        string s = to_string(num);\n        vector<int> d;\n        while (num > 0) {\n            d.push_back(num % 10);\n            num /= 10;\n        }\n        sort(d.begin(), d.end());\n        return d[0] * 10 + d[3] + d[1] * 10 + d[2];\n    }\n};\n")))}g.isMDXComponent=!0}}]);