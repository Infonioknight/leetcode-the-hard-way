"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[32049],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,d=u["".concat(o,".").concat(m)]||u[m]||h[m]||s;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},51407:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const s={description:"Author: @vigneshshiv | https://leetcode.com/problems/valid-parentheses/"},i="0020 - Valid Parentheses (Easy)",l={unversionedId:"0000-0099/valid-parentheses-easy",id:"0000-0099/valid-parentheses-easy",title:"0020 - Valid Parentheses (Easy)",description:"Author: @vigneshshiv | https://leetcode.com/problems/valid-parentheses/",source:"@site/solutions/0000-0099/0020-valid-parentheses-easy.md",sourceDirName:"0000-0099",slug:"/0000-0099/valid-parentheses-easy",permalink:"/solutions/0000-0099/valid-parentheses-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0020-valid-parentheses-easy.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{description:"Author: @vigneshshiv | https://leetcode.com/problems/valid-parentheses/"},sidebar:"tutorialSidebar",previous:{title:"0019 - Remove Nth Node From End of List (Easy)",permalink:"/solutions/0000-0099/remove-nth-node-from-end-of-list-medium"},next:{title:"0021 - Merge Two Sorted Lists (Easy)",permalink:"/solutions/0000-0099/merge-two-sorted-lists-easy"}},o={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Stack",id:"approach-1-stack",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=p("Tabs"),h=p("TabItem"),m=p("SolutionAuthor"),d={toc:c},k="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(k,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0020---valid-parentheses-easy"},"0020 - Valid Parentheses (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/valid-parentheses/"},"https://leetcode.com/problems/valid-parentheses/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given a string ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," containing just the characters ",(0,r.kt)("inlineCode",{parentName:"p"},"'('"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"')'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'{'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'}'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'['")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"']'"),", determine if the input string is valid."),(0,r.kt)("p",null,"An input string is valid if:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Open brackets must be closed by the same type of brackets."),(0,r.kt)("li",{parentName:"ol"},"Open brackets must be closed in the correct order."),(0,r.kt)("li",{parentName:"ol"},"Every close bracket has a corresponding open bracket of the same type.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "()"\nOutput: true\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "()[]{}"\nOutput: true\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "(]"\nOutput: false\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= s.length <= 10^4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s")," consists of parentheses only ",(0,r.kt)("inlineCode",{parentName:"li"},"'()[]{}'"),".")),(0,r.kt)("h2",{id:"approach-1-stack"},"Approach 1: Stack"),(0,r.kt)("p",null,"Stack is widely known as ",(0,r.kt)("inlineCode",{parentName:"p"},"LIFO (last-in, first-out)")," data structure. "),(0,r.kt)("p",null,"It's commonly used in ",(0,r.kt)("inlineCode",{parentName:"p"},"undo mechanisms in text editors")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"compiler syntax checking for matching brackets and braces"),"."),(0,r.kt)("p",null,"Parentheses/braces can be in this order ",(0,r.kt)("inlineCode",{parentName:"p"},"'()()'")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"'(())'"),", since the last open ",(0,r.kt)("inlineCode",{parentName:"p"},"'('")," brace next sequence could be either ",(0,r.kt)("inlineCode",{parentName:"p"},"')'")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"'('")," another open brace to nested open braces. "),(0,r.kt)("p",null,"If the input has any of the open ",(0,r.kt)("inlineCode",{parentName:"p"},"'('")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"'{'")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"'['")," we can push onto a stack. If any close braces/parentheses comes then validate with last inserted character which is on the stack pop, should match corresponding open braces/paranetheses. "),(0,r.kt)("p",null,"Time Complexity: $O(n)$, where $n$ - # of characters in the string"),(0,r.kt)("p",null,"Space complexity: $O(n)$"),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(m,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean isValid(String s) {\n        if (Objects.isNull(s) || s.isEmpty() || s.length() < 2) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : s.toCharArray()) {\n            if (Objects.equals(c, '(') || Objects.equals(c, '[') || Objects.equals(c, '{')) {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char last = stack.pop();\n                if (Objects.equals(c, ')') && !Objects.equals(last, '(')) {\n                    return false;\n                }\n                if (Objects.equals(c, ']') && !Objects.equals(last, '[')) {\n                    return false;\n                }\n                if (Objects.equals(c, '}') && !Objects.equals(last, '{')) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n"))),(0,r.kt)(h,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(m,{name:"@vale-c",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def isValid(self, s: str) -> bool:\n        # if string is empty or has only one character\n        if not s or len(s) < 2:\n            return False\n        stack = []\n        # iterate over the string\n        for c in s:\n            # if the character is an opening bracket\n            if c in ['(', '[', '{']:\n                # push it to the stack\n                stack.append(c)\n            else:\n                # if the stack is empty there is no opening bracket to match\n                if not stack:\n                    return False\n                last = stack.pop()\n                # if the character is a closing bracket and the last element\n                # in the stack is not the corresponding opening bracket\n                if c == ')' and last != '(':\n                    return False\n                if c == ']' and last != '[':\n                    return False\n                if c == '}' and last != '{':\n                    return False\n        # if the stack is empty it means\n        # that all the brackets were matched\n        return not stack\n"))),(0,r.kt)(h,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)(m,{name:"@vale-c",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    // if string is empty or has only one character\n    if (!s || s.length < 2) {\n        return false;\n    }\n    let stack = [];\n    // iterate over the string\n    for (let c of s) {\n        // if the character is an opening bracket\n        if (c === '(' || c === '[' || c === '{') {\n            // push it to the stack\n            stack.push(c);\n        } else {\n            // if the stack is empty there is no opening bracket to match\n            if (!stack.length) {\n                return false;\n            }\n            let last = stack.pop();\n            // if the character is a closing bracket and the last element\n            // in the stack is not the corresponding opening bracket\n            if (c === ')' && last !== '(') {\n                return false;\n            }\n            if (c === ']' && last !== '[') {\n                return false;\n            }\n            if (c === '}' && last !== '{') {\n                return false;\n            }\n        }\n    }\n    // if the stack is empty it means\n    // that all the brackets were matched\n    return !stack.length;\n};\n"))),(0,r.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(m,{name:"@vale-c",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isValid(string s) {\n        // if string is empty or has only one character\n        if (s.empty() || s.length() < 2) {\n            return false;\n        }\n        stack<char> stack;\n        // iterate over the string\n        for (char c : s) {\n            // if the character is an opening bracket\n            if (c == '(' || c == '[' || c == '{') {\n                // push it to the stack\n                stack.push(c); \n            } else {\n                // if the stack is empty there is no opening bracket to match\n                if (stack.empty()) {\n                    return false;\n                }\n                char last = stack.top();\n                stack.pop();\n                // if the character is a closing bracket and the last element \n                // in the stack is not the corresponding opening bracket\n                if (c == ')' && last != '(') { \n                    return false;\n                }\n                if (c == ']' && last != '[') {\n                    return false;\n                }\n                if (c == '}' && last != '{') {\n                    return false;\n                }\n            }\n        }\n        // if the stack is empty it means\n        // that all the brackets were matched\n        return stack.empty();\n    }\n};\n")))))}f.isMDXComponent=!0}}]);