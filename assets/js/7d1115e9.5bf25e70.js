"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[34939],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,f=u["".concat(i,".").concat(d)]||u[d]||c[d]||o;return n?r.createElement(f,s(s({ref:t},m),{},{components:n})):r.createElement(f,s({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[u]="string"==typeof e?e:a,s[1]=p;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},63070:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/"},s="1269 - Number of Ways to Stay in the Same Place After Some Steps (Hard)",p={unversionedId:"1200-1299/number-of-ways-to-stay-in-the-same-place-after-some-steps-hard",id:"1200-1299/number-of-ways-to-stay-in-the-same-place-after-some-steps-hard",title:"1269 - Number of Ways to Stay in the Same Place After Some Steps (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/",source:"@site/solutions/1200-1299/1269-number-of-ways-to-stay-in-the-same-place-after-some-steps-hard.md",sourceDirName:"1200-1299",slug:"/1200-1299/number-of-ways-to-stay-in-the-same-place-after-some-steps-hard",permalink:"/solutions/1200-1299/number-of-ways-to-stay-in-the-same-place-after-some-steps-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1200-1299/1269-number-of-ways-to-stay-in-the-same-place-after-some-steps-hard.md",tags:[],version:"current",sidebarPosition:1269,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/"},sidebar:"tutorialSidebar",previous:{title:"1259 - Handshakes That Don't Cross (Hard)",permalink:"/solutions/1200-1299/handshakes-that-dont-cross-hard"},next:{title:"1281 - Subtract the Product and Sum of Digits of an Integer (Easy)",permalink:"/solutions/1200-1299/subtract-the-product-and-sum-of-digits-of-an-integer-easy"}},i={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],m=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const c={toc:l},d="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1269---number-of-ways-to-stay-in-the-same-place-after-some-steps-hard"},"1269 - Number of Ways to Stay in the Same Place After Some Steps (Hard)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/"},"https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You have a pointer at index ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," in an array of size ",(0,a.kt)("inlineCode",{parentName:"p"},"arrLen"),". At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time)."),(0,a.kt)("p",null,"Given two integers ",(0,a.kt)("inlineCode",{parentName:"p"},"steps")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"arrLen"),", return the number of ways such that your pointer still at index ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," after ",(0,a.kt)("strong",{parentName:"p"},"exactly")," ",(0,a.kt)("inlineCode",{parentName:"p"},"steps")," steps. Since the answer may be too large, return it ",(0,a.kt)("strong",{parentName:"p"},"modulo")," ",(0,a.kt)("inlineCode",{parentName:"p"},"109 + 7"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: steps = 3, arrLen = 2\nOutput: 4\nExplanation: There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: steps = 2, arrLen = 4\nOutput: 2\nExplanation: There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: steps = 4, arrLen = 2\nOutput: 8\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= steps <= 500")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= arrLen <= 10^6"))),(0,a.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,a.kt)("p",null,"The first observation is that the computational complexity does not depend on $$arrLen$$. Instead, it is all about steps. If we have $$n$$ steps, we can only walk at most $$n / 2$$ steps to the left or the right. Therefore, we can use DFS with memoization to find out the answer."),(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int numWays(int steps, int arrLen) {\n        int M = 1e9 + 7;\n        // dp[i][j]: how many ways to reach i-th pos using j steps\n        vector<vector<int>> dp(steps / 2 + 1, vector<int>(steps + 1, -1));\n        function<long long(int,int)> dfs = [&](int pos, int steps) -> long long {\n            // if we walk outside the array or use all the steps\n            // then return 0\n            if (pos < 0 || pos > arrLen - 1 || pos > steps) return 0;\n            // if we use all the steps, return 1 only if pos is 0\n            if (steps == 0) return pos == 0;\n            // if it has been calculated, return directly\n            if (dp[pos][steps] != -1) return dp[pos][steps];\n            // memoize it\n            return dp[pos][steps] = (\n                // move to the left\n                dfs(pos - 1, steps - 1) % M + \n                // stay at current position\n                dfs(pos, steps - 1) % M + \n                // move to the right\n                dfs(pos + 1, steps - 1) % M\n            ) % M;\n        };\n        return dfs(0, steps);\n    }\n};\n")),(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def numWays(self, steps: int, arrLen: int) -> int:\n        M = 10 ** 9 + 7\n        @lru_cache(None)\n        def dfs(pos, steps):\n            # if we walk outside the array or use all the steps\n            # then return 0\n            if pos < 0 or pos > steps or pos > arrLen - 1: return 0\n            # if we use all the steps, return 1 only if pos is 0\n            if steps == 0: return pos == 0\n            return (\n                # move to the left\n                dfs(pos - 1, steps - 1) +\n                # stay at current position\n                dfs(pos, steps - 1) +\n                # move to the right\n                dfs(pos + 1, steps - 1) \n            ) % M\n        return dfs(0, steps)\n")))}f.isMDXComponent=!0}}]);