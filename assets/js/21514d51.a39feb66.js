"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[17572],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,g=u["".concat(l,".").concat(h)]||u[h]||m[h]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},24161:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/make-the-string-great/",tags:["String","Stack"]},i="1544 - Make The String Great (Easy)",s={unversionedId:"1100-1199/make-the-string-great-easy",id:"1100-1199/make-the-string-great-easy",title:"1544 - Make The String Great (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/make-the-string-great/",source:"@site/solutions/1100-1199/1154-make-the-string-great-easy.md",sourceDirName:"1100-1199",slug:"/1100-1199/make-the-string-great-easy",permalink:"/solutions/1100-1199/make-the-string-great-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1100-1199/1154-make-the-string-great-easy.md",tags:[{label:"String",permalink:"/solutions/tags/string"},{label:"Stack",permalink:"/solutions/tags/stack"}],version:"current",sidebarPosition:1154,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/make-the-string-great/",tags:["String","Stack"]},sidebar:"tutorialSidebar",previous:{title:"1147 - Longest Chunked Palindrome Decomposition (Hard)",permalink:"/solutions/1100-1199/longest-chunked-palindrome-decomposition-hard"},next:{title:"1155 - Number of Dice Rolls With Target Sum (Medium)",permalink:"/solutions/1100-1199/number-of-dice-rolls-with-target-sum-medium"}},l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: String as Stack",id:"approach-1-string-as-stack",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=p("Tabs"),m=p("TabItem"),h=p("SolutionAuthor"),g={toc:c},d="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1544---make-the-string-great-easy"},"1544 - Make The String Great (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/make-the-string-great/"},"https://leetcode.com/problems/make-the-string-great/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given a string ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," of lower and upper case English letters."),(0,a.kt)("p",null,"A good string is a string which doesn't have ",(0,a.kt)("strong",{parentName:"p"},"two adjacent characters")," ",(0,a.kt)("inlineCode",{parentName:"p"},"s[i]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"s[i + 1]")," where:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= i <= s.length - 2")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s[i]")," is a lower-case letter and ",(0,a.kt)("inlineCode",{parentName:"li"},"s[i + 1]")," is the same letter but in upper-case or ",(0,a.kt)("strong",{parentName:"li"},"vice-versa"),".")),(0,a.kt)("p",null,"To make the string good, you can choose ",(0,a.kt)("strong",{parentName:"p"},"two adjacent")," characters that make the string bad and remove them. You can keep doing this until the string becomes good."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the string")," after making it good. The answer is guaranteed to be unique under the given constraints."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Notice")," that an empty string is also good."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "leEeetcode"\nOutput: "leetcode"\nExplanation: In the first step, either you choose i = 1 or i = 2, both will result "leEeetcode" to be reduced to "leetcode".\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "abBAcC"\nOutput: ""\nExplanation: We have many possible scenarios, and all lead to the same answer. For example:\n"abBAcC" --\x3e "aAcC" --\x3e "cC" --\x3e ""\n"abBAcC" --\x3e "abBA" --\x3e "aA" --\x3e ""\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "s"\nOutput: "s"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= s.length <= 100")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s")," contains only lower and upper case English letters.")),(0,a.kt)("h2",{id:"approach-1-string-as-stack"},"Approach 1: String as Stack"),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string makeGood(string s) {\n        // we can use stack as well but we need to build the final string at the end\n        // hence, using string is enough\n        string t;\n        // for each character\n        for (auto c : s) {\n            // as long as `t` has a character, we check if the last character is same letter but in upper-case or vice-versa\n            // here we can use XOR and 1 << 5 to convert a lower character to a upper one and vice-versa\n            // A: 01[0]00001\n            // a: 01[1]00001\n            // Z: 01[0]11010\n            // z: 01[1]11010\n            // a -> A / A -> a\n            if (t.size() && (t.back() ^ (1 << 5)) == c) {\n                // if it matches the requirement, we remove the last character in `t`\n                t.pop_back();\n            } else {\n                // otherweise, we add the current char to `t`\n                t.push_back(c);\n            }\n        }\n        return t;\n    }\n};\n"))),(0,a.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public String makeGood(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            // as long as `sb` has a character, \n            // we check if the last character is same letter but in upper-case or vice-versa\n            // here we can use XOR and 1 << 5 to convert a lower character to a upper one and vice-versa\n            // A: 01[0]00001\n            // a: 01[1]00001\n            // Z: 01[0]11010\n            // z: 01[1]11010\n            // a -> A / A -> a\n            if (sb.length() > 0  && ((sb.charAt(sb.length() - 1) ^ (1 << 5)) == s.charAt(i))) {\n                // if it matches the requirement, we remove the last character in `sb`\n                sb.deleteCharAt(sb.length() - 1);\n            } else {\n                // otherwise, we add the current char to `sb`\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}\n"))),(0,a.kt)(m,{value:"kt",label:"Kotlin",mdxType:"TabItem"},(0,a.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kt"},'class Solution {\n    fun makeGood(s: String): String {\n        var t : String = ""\n        // for each character\n        for (i in 0 .. s.length - 1) {\n            // as long as `t` has a character, we check if the last character is same letter but in upper-case or vice-versa\n            // here we can use XOR and 1 << 5 to convert a lower character to a upper one and vice-versa\n            // A: 01[0]00001\n            // a: 01[1]00001\n            // Z: 01[0]11010\n            // z: 01[1]11010\n            // a -> A / A -> a\n            if (t.length > 0 && (t.last() ^ s[i] == (1 shl 5)) {\n                // if it matches the requirement, we remove the last character in `t`\n                t = t.dropLast(1)\n            } else {\n                // otherweise, we add the current char to `t`\n                t += s[i]\n            }\n        }\n        return t\n    }\n}\n')))))}k.isMDXComponent=!0}}]);