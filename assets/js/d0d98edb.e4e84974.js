"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[30932],{2228:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=r(85893),i=r(11151);const s={description:"Author: @wingkwong | https://leetcode.com/problems/subarrays-with-k-different-integers/"},o="0992 - Subarrays with K Different Integers (Hard)",a={id:"0900-0999/subarrays-with-k-different-integers-hard",title:"0992 - Subarrays with K Different Integers (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/subarrays-with-k-different-integers/",source:"@site/solutions/0900-0999/0992-subarrays-with-k-different-integers-hard.md",sourceDirName:"0900-0999",slug:"/0900-0999/subarrays-with-k-different-integers-hard",permalink:"/solutions/0900-0999/subarrays-with-k-different-integers-hard",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0992-subarrays-with-k-different-integers-hard.md",tags:[],version:"current",sidebarPosition:992,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/subarrays-with-k-different-integers/"},sidebar:"tutorialSidebar",previous:{title:"0991 - Broken Calculator (Medium)",permalink:"/solutions/0900-0999/broken-calculator-medium"},next:{title:"0994 - Rotting Oranges (Medium)",permalink:"/solutions/0900-0999/rotting-oranges-medium"}},d={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window",id:"approach-1-sliding-window",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components},{SolutionAuthor:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"0992---subarrays-with-k-different-integers-hard",children:"0992 - Subarrays with K Different Integers (Hard)"}),"\n",(0,t.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/subarrays-with-k-different-integers/",children:"https://leetcode.com/problems/subarrays-with-k-different-integers/"})}),"\n",(0,t.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(n.p,{children:["Given an integer array ",(0,t.jsx)(n.code,{children:"nums"})," and an integer ",(0,t.jsx)(n.code,{children:"k"}),", return ",(0,t.jsxs)(n.em,{children:["the number of ",(0,t.jsx)(n.strong,{children:"good subarrays"})," of"]})," ",(0,t.jsx)(n.code,{children:"nums"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"good array"})," is an array where the number of different integers in that array is exactly ",(0,t.jsx)(n.code,{children:"k"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["For example, ",(0,t.jsx)(n.code,{children:"[1,2,3,1,2]"})," has ",(0,t.jsx)(n.code,{children:"3"})," different integers: ",(0,t.jsx)(n.code,{children:"1"}),", ",(0,t.jsx)(n.code,{children:"2"}),", and ",(0,t.jsx)(n.code,{children:"3"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"subarray"})," is a ",(0,t.jsx)(n.strong,{children:"contiguous"})," part of an array."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: nums = [1,2,1,2,3], k = 2\nOutput: 7\nExplanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Input: nums = [1,2,1,3,4], k = 3\nOutput: 3\nExplanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= nums.length <= 2 * 10^4"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"1 <= nums[i], k <= nums.length"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"approach-1-sliding-window",children:"Approach 1: Sliding Window"}),"\n",(0,t.jsx)(r,{name:"@wingkwong"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    // sliding window\n    int go(vector<int>& nums, int k) {\n        // count the frequency for each number\n        unordered_map<int, int> cnt;\n        int l = 0, res = 0;\n        for (int r = 0; r < nums.size(); r++) {\n            // if nums[r] doesn't exist, we subtract k by 1\n            // update cnt[nums[r]]\n            if (!cnt[nums[r]]++) k -= 1;\n            // while k < 0, we need to pop the leftmost element out\n            // if we remove nums[l] and its frequency is 0\n            // then we can include other integer so we increase k by 1\n            while (k < 0) {\n                if (!--cnt[nums[l]]) k += 1;\n                l++;\n            }\n            // add the current range to ans\n            res += r - l + 1;\n        }\n        return res;\n    }\n    \n    int subarraysWithKDistinct(vector<int>& nums, int k) {\n        // exactly k differences = \n        // at most k differences - at most k - 1 differences\n        return go(nums, k) - go(nums, k - 1);\n    }\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>o});var t=r(67294);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);