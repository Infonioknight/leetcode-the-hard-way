"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[19277],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},k=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(t),k=a,d=u["".concat(p,".").concat(k)]||u[k]||c[k]||i;return t?r.createElement(d,o(o({ref:n},m),{},{components:t})):r.createElement(d,o({ref:n},m))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=k;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"},76591:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/minimum-operations-to-make-the-array-k-increasing/"},o="2111 - Minimum Operations to Make the Array K-Increasing (Hard)",l={unversionedId:"2100-2199/minimum-operations-to-make-the-array-k-increasing-hard",id:"2100-2199/minimum-operations-to-make-the-array-k-increasing-hard",title:"2111 - Minimum Operations to Make the Array K-Increasing (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/minimum-operations-to-make-the-array-k-increasing/",source:"@site/solutions/2100-2199/2111-minimum-operations-to-make-the-array-k-increasing-hard.md",sourceDirName:"2100-2199",slug:"/2100-2199/minimum-operations-to-make-the-array-k-increasing-hard",permalink:"/solutions/2100-2199/minimum-operations-to-make-the-array-k-increasing-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2111-minimum-operations-to-make-the-array-k-increasing-hard.md",tags:[],version:"current",sidebarPosition:2111,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/minimum-operations-to-make-the-array-k-increasing/"},sidebar:"tutorialSidebar",previous:{title:"2110 - Number of Smooth Descent Periods of a Stock (Medium)",permalink:"/solutions/2100-2199/number-of-smooth-descent-periods-of-a-stock-medium"},next:{title:"2119 - A Number After a Double Reversal (Easy)",permalink:"/solutions/2100-2199/a-number-after-a-double-reversal-easy"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Longest Increasing Subsequence",id:"approach-1-longest-increasing-subsequence",level:2}],m=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const c={toc:s},k="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(k,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2111---minimum-operations-to-make-the-array-k-increasing-hard"},"2111 - Minimum Operations to Make the Array K-Increasing (Hard)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-operations-to-make-the-array-k-increasing/"},"https://leetcode.com/problems/minimum-operations-to-make-the-array-k-increasing/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a ",(0,a.kt)("strong",{parentName:"p"},"0-indexed")," array ",(0,a.kt)("inlineCode",{parentName:"p"},"arr")," consisting of ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," positive integers, and a positive integer ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,a.kt)("p",null,"The array ",(0,a.kt)("inlineCode",{parentName:"p"},"arr")," is called ",(0,a.kt)("strong",{parentName:"p"},"K-increasing")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"arr[i-k] <= arr[i]")," holds for every index ",(0,a.kt)("inlineCode",{parentName:"p"},"i"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"k <= i <= n-1"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For example, ",(0,a.kt)("inlineCode",{parentName:"li"},"arr = [4, 1, 5, 2, 6, 2]")," is K-increasing for ",(0,a.kt)("inlineCode",{parentName:"li"},"k = 2")," because:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"arr[0] <= arr[2] (4 <= 5)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"arr[1] <= arr[3] (1 <= 2)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"arr[2] <= arr[4] (5 <= 6)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"arr[3] <= arr[5] (2 <= 2)")))),(0,a.kt)("li",{parentName:"ul"},"However, the same ",(0,a.kt)("inlineCode",{parentName:"li"},"arr")," is not K-increasing for ",(0,a.kt)("inlineCode",{parentName:"li"},"k = 1")," (because ",(0,a.kt)("inlineCode",{parentName:"li"},"arr[0] > arr[1]"),") or ",(0,a.kt)("inlineCode",{parentName:"li"},"k = 3")," (because ",(0,a.kt)("inlineCode",{parentName:"li"},"arr[0] > arr[3]"),").")),(0,a.kt)("p",null,"In one ",(0,a.kt)("strong",{parentName:"p"},"operation"),", you can choose an index ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," and ",(0,a.kt)("strong",{parentName:"p"},"change")," ",(0,a.kt)("inlineCode",{parentName:"p"},"arr[i]")," into ",(0,a.kt)("strong",{parentName:"p"},"any")," positive integer."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"minimum number of operations")," required to make the array K-increasing for the given")," ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: arr = [5,4,3,2,1], k = 1\nOutput: 4\nExplanation:\nFor k = 1, the resultant array has to be non-decreasing.\nSome of the K-increasing arrays that can be formed are [5,6,7,8,9], [1,1,1,1,1], [2,2,3,4,4]. All of them require 4 operations.\nIt is suboptimal to change the array to, for example, [6,7,8,9,10] because it would take 5 operations.\nIt can be shown that we cannot make the array K-increasing in less than 4 operations.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: arr = [4,1,5,2,6,2], k = 2\nOutput: 0\nExplanation:\nThis is the same example as the one in the problem description.\nHere, for every index i where 2 <= i <= 5, arr[i-2] <= arr[i].\nSince the given array is already K-increasing, we do not need to perform any operations.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: arr = [4,1,5,2,6,2], k = 3\nOutput: 2\nExplanation:\nIndices 3 and 5 are the only ones not satisfying arr[i-3] <= arr[i] for 3 <= i <= 5.\nOne of the ways we can make the array K-increasing is by changing arr[3] to 4 and arr[5] to 5.\nThe array will now be [4,1,5,4,6,5].\nNote that there can be other ways to make the array K-increasing, but none of them require less than 2 operations.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= arr.length <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= arr[i], k <= arr.length"))),(0,a.kt)("h2",{id:"approach-1-longest-increasing-subsequence"},"Approach 1: Longest Increasing Subsequence"),(0,a.kt)("p",null,"We can break input vector into $$k$$ groups $$ai,ai+k,ai+2\u2217k,...$$for each $$i<k$$. Calculate the LIS (Longest Increasing Subsequence) on each group and compare the length with the target size. We need to perform $$a.size()\u2212lengthOfLIS(a)$$operations to make it K-increasing."),(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        int n = (int) nums.size();\n        vector<int> lis;\n        for(int i = 0; i < n; i++) {\n            auto it = upper_bound(lis.begin(), lis.end(), nums[i]);\n            if(it == lis.end()) lis.push_back(nums[i]);\n            else *it = nums[i];\n        }\n        return (int) lis.size();\n    }\n    \n    int kIncreasing(vector<int>& arr, int k) {\n        int ans = 0, n = arr.size();\n        for (int i = 0; i < k; i++) {\n            vector<int> a;\n            for (int j = i; j < n; j += k) {\n                a.push_back(arr[j]);\n            }\n            ans += a.size() - lengthOfLIS(a);\n        }\n        return ans;\n    }\n};\n")))}d.isMDXComponent=!0}}]);