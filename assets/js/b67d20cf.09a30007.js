"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[91344],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(h,i(i({ref:t},s),{},{components:n})):r.createElement(h,i({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},35690:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>k,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/find-the-town-judge/",tags:["Array","Hash Table","Graph"]},i="0997 - Find the Town Judge (Easy)",l={unversionedId:"1000-1099/find-the-town-judge-easy",id:"1000-1099/find-the-town-judge-easy",title:"0997 - Find the Town Judge (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/find-the-town-judge/",source:"@site/solutions/1000-1099/0997-find-the-town-judge-easy.md",sourceDirName:"1000-1099",slug:"/1000-1099/find-the-town-judge-easy",permalink:"/solutions/1000-1099/find-the-town-judge-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1000-1099/0997-find-the-town-judge-easy.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"Graph",permalink:"/solutions/tags/graph"}],version:"current",sidebarPosition:997,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-the-town-judge/",tags:["Array","Hash Table","Graph"]},sidebar:"tutorialSidebar",previous:{title:"1000 - 1099",permalink:"/solutions/category/1000---1099"},next:{title:"1000 - Minimum Cost to Merge Stones (Hard)",permalink:"/solutions/1000-1099/minimum-cost-to-merge-stones-hard"}},p={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Counting (Two Arrays)",id:"approach-1-counting-two-arrays",level:2},{value:"Approach 2: Counting (One Array)",id:"approach-2-counting-one-array",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},d=s("Tabs"),c=s("TabItem"),m=s("SolutionAuthor"),h={toc:u},g="wrapper";function k(e){let{components:t,...n}=e;return(0,o.kt)(g,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0997---find-the-town-judge-easy"},"0997 - Find the Town Judge (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-the-town-judge/"},"https://leetcode.com/problems/find-the-town-judge/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"In a town, there are ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," people labeled from ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"n"),". There is a rumor that one of these people is secretly the town judge."),(0,o.kt)("p",null,"If the town judge exists, then:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The town judge trusts nobody."),(0,o.kt)("li",{parentName:"ol"},"Everybody (except for the town judge) trusts the town judge."),(0,o.kt)("li",{parentName:"ol"},"There is exactly one person that satisfies properties ",(0,o.kt)("strong",{parentName:"li"},"1")," and ",(0,o.kt)("strong",{parentName:"li"},"2"),".")),(0,o.kt)("p",null,"You are given an array ",(0,o.kt)("inlineCode",{parentName:"p"},"trust")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"trust[i] = [ai, bi]")," representing that the person labeled ",(0,o.kt)("inlineCode",{parentName:"p"},"ai")," trusts the person labeled ",(0,o.kt)("inlineCode",{parentName:"p"},"bi"),"."),(0,o.kt)("p",null,"Return ",(0,o.kt)("em",{parentName:"p"},"the label of the town judge if the town judge exists and can be identified, or return"),(0,o.kt)("inlineCode",{parentName:"p"},"-1"),(0,o.kt)("em",{parentName:"p"},"otherwise"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 2, trust = [[1,2]]\nOutput: 2\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 3, trust = [[1,3],[2,3]]\nOutput: 3\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 3, trust = [[1,3],[2,3],[3,1]]\nOutput: -1\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= n <= 1000")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= trust.length <= 10^4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"trust[i].length == 2")),(0,o.kt)("li",{parentName:"ul"},"All the pairs of ",(0,o.kt)("inlineCode",{parentName:"li"},"trust")," are ",(0,o.kt)("strong",{parentName:"li"},"unique"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ai != bi")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= ai, bi <= n"))),(0,o.kt)("h2",{id:"approach-1-counting-two-arrays"},"Approach 1: Counting (Two Arrays)"),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findJudge(int n, vector<vector<int>>& trust) {\n        // indegree (in) = trusted by others\n        // outdegree (out) = trust others\n        vector<int> in(n + 1), out(n + 1);\n        // calculate the in and out\n        for (auto x : trust) in[x[1]]++, out[x[0]]++;\n        // iterate each person\n        for (int i = 1; i <= n; i++) {\n            // the judge will be the one with indegree = n - 1 and outdegree = 0\n            if (in[i] == n - 1 && out[i] == 0) {\n                // found the judge\n                return i;\n            }\n        }\n        // cannot identify -> return -1\n        return -1;\n    }\n};\n\n")))),(0,o.kt)("h2",{id:"approach-2-counting-one-array"},"Approach 2: Counting (One Array)"),(0,o.kt)("p",null,"We can further simplify Approach 1 with one array since we know ",(0,o.kt)("inlineCode",{parentName:"p"},"indegrees - outdegrees = n - 1"),"."),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findJudge(int n, vector<vector<int>>& trust) {\n        // n people\n        vector<int> v(n + 1);\n        for (auto x : trust) {\n            // out: trust other\n            v[x[0]]--;\n            // in: trusted by others\n            v[x[1]]++;\n        }\n        for (int i = 1; i <= n; i++) {\n            // we are looking for indegrees - outdegrees = n - 1\n            if (v[i] == n - 1) {\n                // if so, the i-th person will be the judge\n                return i;\n            }\n        }\n        // cannot identify -> return -1\n        return -1;\n    }\n};\n\n")))))}k.isMDXComponent=!0}}]);