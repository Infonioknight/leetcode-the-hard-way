"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[41271],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=a.createContext({}),s=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(m.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,m=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(n),h=i,c=p["".concat(m,".").concat(h)]||p[h]||u[h]||r;return n?a.createElement(c,o(o({ref:t},d),{},{components:n})):a.createElement(c,o({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},89870:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>f,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const r={description:"Author: @yashh0903 | https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/",tags:["Array","Binary Search"]},o="0154 - Find Minimum in Rotated Sorted Array II (Hard)",l={unversionedId:"0100-0199/find-minimum-in-rotated-sorted-array-ii-hard",id:"0100-0199/find-minimum-in-rotated-sorted-array-ii-hard",title:"0154 - Find Minimum in Rotated Sorted Array II (Hard)",description:"Author: @yashh0903 | https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/",source:"@site/solutions/0100-0199/0154-find-minimum-in-rotated-sorted-array-ii-hard.md",sourceDirName:"0100-0199",slug:"/0100-0199/find-minimum-in-rotated-sorted-array-ii-hard",permalink:"/solutions/0100-0199/find-minimum-in-rotated-sorted-array-ii-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0154-find-minimum-in-rotated-sorted-array-ii-hard.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Binary Search",permalink:"/solutions/tags/binary-search"}],version:"current",sidebarPosition:154,frontMatter:{description:"Author: @yashh0903 | https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/",tags:["Array","Binary Search"]},sidebar:"tutorialSidebar",previous:{title:"0152 - Maximum Product Subarray (Medium)",permalink:"/solutions/0100-0199/maximum-product-subarray-medium"},next:{title:"0155 - Min Stack (Medium)",permalink:"/solutions/0100-0199/min-stack-medium"}},m={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},p=d("Tabs"),u=d("TabItem"),h=d("SolutionAuthor"),c={toc:s},y="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(y,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0154---find-minimum-in-rotated-sorted-array-ii-hard"},"0154 - Find Minimum in Rotated Sorted Array II (Hard)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/"},"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Suppose an array of length ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," sorted in ascending order is ",(0,i.kt)("strong",{parentName:"p"},"rotated")," between ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," times. For example, the array ",(0,i.kt)("inlineCode",{parentName:"p"},"nums = [0,1,4,4,5,6,7]")," might become:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[4,5,6,7,0,1,4]")," if it was rotated ",(0,i.kt)("inlineCode",{parentName:"li"},"4")," times."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[0,1,4,4,5,6,7]")," if it was rotated ",(0,i.kt)("inlineCode",{parentName:"li"},"7")," times.")),(0,i.kt)("p",null,"Notice that ",(0,i.kt)("strong",{parentName:"p"},"rotating")," an array ",(0,i.kt)("inlineCode",{parentName:"p"},"[a[0], a[1], a[2], ..., a[n-1]]")," 1 time results in the array ",(0,i.kt)("inlineCode",{parentName:"p"},"[a[n-1], a[0], a[1], a[2], ..., a[n-2]]"),"."),(0,i.kt)("p",null,"Given the sorted rotated array ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," that may contain ",(0,i.kt)("strong",{parentName:"p"},"duplicates"),", return ",(0,i.kt)("em",{parentName:"p"},"the minimum element of this array"),"."),(0,i.kt)("p",null,"You must decrease the overall operation steps as much as possible."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1,3,5]\nOutput: 1\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [2,2,2,0,1]\nOutput: 0\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n == nums.length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= n <= 5000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-5000 <= nums[i] <= 5000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nums")," is sorted and rotated between ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," times.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Follow up:")," This problem is similar to\xa0",(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/"},"Find Minimum in Rotated Sorted Array"),", but\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," may contain ",(0,i.kt)("strong",{parentName:"p"},"duplicates"),". Would this affect the runtime complexity? How and why?"),(0,i.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The code uses a binary search approach to find the minimum element in the given nums array."),(0,i.kt)("li",{parentName:"ol"},"We initialize the start and end indices to cover the entire array initially."),(0,i.kt)("li",{parentName:"ol"},"Inside the while loop, we calculate the middle index using (start + end) / 2."),(0,i.kt)("li",{parentName:"ol"},"We compare the element at the middle index (nums","[mid]",") with the element at the end index (nums","[end]",")."),(0,i.kt)("li",{parentName:"ol"},"If nums","[mid]"," < nums","[end]",", it means the minimum element lies in the left half of the array, so we update the end index to mid."),(0,i.kt)("li",{parentName:"ol"},"If nums","[mid]"," == nums","[end]",", it means there are duplicate elements in the array. In this case, we can safely reduce the search range by moving the end index one step back."),(0,i.kt)("li",{parentName:"ol"},"If nums","[mid]"," > nums","[end]",", it means the minimum element lies in the right half of the array, so we update the start index to mid + 1."),(0,i.kt)("li",{parentName:"ol"},"The loop continues until the start index is equal to the end index, at which point it will point to the minimum element."),(0,i.kt)("li",{parentName:"ol"},"Finally, we return nums","[start]"," as the minimum element.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time Complexity: O(log N), where N is the length of the input array nums. This is because the binary search approach reduces the search range by half in each iteration, resulting in a logarithmic time complexity."),(0,i.kt)("li",{parentName:"ul"},"Space Complexity: O(1). The code uses a constant amount of extra space, regardless of the input size. We only have a few variables to store indices and intermediate calculations, which do not depend on the input size. Hence, the space complexity is constant.")),(0,i.kt)(p,{mdxType:"Tabs"},(0,i.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(h,{name:"@yashh0903",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"\nclass Solution {\npublic:\n    int findMin(vector<int>& nums) {\n        // Starting index of the search range\n        int start = 0;\n        // Ending index of the search range\n        int end = nums.size() - 1;\n        while (start < end) {\n            // Calculate the middle index\n            int mid = start + (end - start) / 2;\n            if (nums[mid] < nums[end]) {\n                // If the element at the middle index is smaller than the element at the end index,\n                // it means the minimum element lies in the left half, so update the end index\n                end = mid;\n            } else if (nums[mid] == nums[end]) {\n                // If the element at the middle index is equal to the element at the end index,\n                // it means there are duplicate elements in the array.\n                // In this case, we can safely reduce the search range by moving the end index one step back.\n                end--;\n            } else {\n                // If the element at the middle index is greater than the element at the end index,\n                // it means the minimum element lies in the right half, so update the start index.\n                start = mid + 1;\n            }\n        }\n        // When the loop ends, the start index will point to the minimum element\n        return nums[start];\n    }\n};\n\n")))))}f.isMDXComponent=!0}}]);