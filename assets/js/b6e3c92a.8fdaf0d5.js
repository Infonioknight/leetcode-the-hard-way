"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[53427],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||a;return n?r.createElement(k,l(l({ref:t},u),{},{components:n})):r.createElement(k,l({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1446:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return c}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),l=["components"],i={description:"Author: @wingkwong | https://leetcode.com/problems/delete-columns-to-make-sorted/",tags:["Array","String"]},s="0944 - Delete Columns to Make Sorted (Easy)",p={unversionedId:"0900-0999/delete-columns-to-make-sorted-easy",id:"0900-0999/delete-columns-to-make-sorted-easy",title:"0944 - Delete Columns to Make Sorted (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/delete-columns-to-make-sorted/",source:"@site/solutions/0900-0999/0944-delete-columns-to-make-sorted-easy.md",sourceDirName:"0900-0999",slug:"/0900-0999/delete-columns-to-make-sorted-easy",permalink:"/solutions/0900-0999/delete-columns-to-make-sorted-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0944-delete-columns-to-make-sorted-easy.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"String",permalink:"/solutions/tags/string"}],version:"current",sidebarPosition:944,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/delete-columns-to-make-sorted/",tags:["Array","String"]},sidebar:"tutorialSidebar",previous:{title:"0941 - Valid Mountain Array (Easy)",permalink:"/solutions/0900-0999/valid-mountain-array-easy"},next:{title:"0946 - Validate Stack Sequences (Medium)",permalink:"/solutions/0900-0999/validate-stack-sequences-medium"}},u={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Matrix Traversing",id:"approach-1-matrix-traversing",level:2}],m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)}},d=m("Tabs"),k=m("TabItem"),h=m("SolutionAuthor"),f={toc:c};function g(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0944---delete-columns-to-make-sorted-easy"},"0944 - Delete Columns to Make Sorted (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/delete-columns-to-make-sorted/"},"https://leetcode.com/problems/delete-columns-to-make-sorted/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given an array of ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," strings ",(0,a.kt)("inlineCode",{parentName:"p"},"strs"),", all of the same length."),(0,a.kt)("p",null,"The strings can be arranged such that there is one on each line, making a grid. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},'strs = ["abc", "bce", "cae"]')," can be arranged as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"abc\nbce\ncae\n")),(0,a.kt)("p",null,"You want to ",(0,a.kt)("strong",{parentName:"p"},"delete")," the columns that are ",(0,a.kt)("strong",{parentName:"p"},"not sorted lexicographically"),". In the above example (0-indexed), columns 0 (",(0,a.kt)("inlineCode",{parentName:"p"},"'a'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'b'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'c'"),") and 2 (",(0,a.kt)("inlineCode",{parentName:"p"},"'c'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'e'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'e'"),") are sorted while column 1 (",(0,a.kt)("inlineCode",{parentName:"p"},"'b'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'c'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'a'"),") is not, so you would delete column 1."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the number of columns that you will delete"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: strs = ["cba","daf","ghi"]\nOutput: 1\nExplanation: The grid looks as follows:\n  cba\n  daf\n  ghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: strs = ["a","b"]\nOutput: 0\nExplanation: The grid looks as follows:\n  a\n  b\nColumn 0 is the only column and is sorted, so you will not delete any columns.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: strs = ["zyx","wvu","tsr"]\nOutput: 3\nExplanation: The grid looks as follows:\n  zyx\n  wvu\n  tsr\nAll 3 columns are not sorted, so you will delete all 3.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == strs.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 100")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= strs[i].length <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"strs[i]")," consists of lowercase English letters.")),(0,a.kt)("h2",{id:"approach-1-matrix-traversing"},"Approach 1: Matrix Traversing"),(0,a.kt)(d,{mdxType:"Tabs"},(0,a.kt)(k,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int minDeletionSize(vector<string>& s) {\n        int ans = 0;\n        // iterate cols\n        for (int col = 0; col < s[0].size(); col++) {\n            // iterate rows\n            for (int row = 1; row < s.size(); row++) {\n                // if the character in the previous row is greater than the character in the current row\n                // then we can delete this column\n                if (s[row - 1][col] > s[row][col]) {\n                    ans += 1;\n                    break;\n                }\n            }\n        }\n        return ans;\n    }\n};\n"))),(0,a.kt)(k,{value:"rs",label:"Rust",mdxType:"TabItem"},(0,a.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"impl Solution {\n    pub fn min_deletion_size(strs: Vec<String>) -> i32 {\n        let mut ans = 0;\n        // iterate cols\n        for col in 0 .. strs[0].as_bytes().len() {\n            // iterate rows\n            for row in 1 .. strs.len() {\n                // if the character in the previous row is greater than the character in the current row\n                // then we can delete this column\n                if strs[row - 1].as_bytes()[col] > strs[row].as_bytes()[col] {\n                    ans += 1;\n                    break;\n                }\n            }\n        }\n        ans\n    }\n}\n")))))}g.isMDXComponent=!0}}]);