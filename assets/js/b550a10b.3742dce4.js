"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[21473],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,h=c["".concat(l,".").concat(d)]||c[d]||u[d]||r;return n?i.createElement(h,o(o({ref:t},m),{},{components:n})):i.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},95780:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(87462),a=(n(67294),n(3905));const r={description:"Author: @wingkwong | https://leetcode.com/problems/largest-combination-with-bitwise-and-greater-than-zero"},o="2275 - Largest Combination With Bitwise AND Greater Than Zero (Medium)",s={unversionedId:"2200-2299/largest-combination-with-bitwise-and-greater-than-zero-medium",id:"2200-2299/largest-combination-with-bitwise-and-greater-than-zero-medium",title:"2275 - Largest Combination With Bitwise AND Greater Than Zero (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/largest-combination-with-bitwise-and-greater-than-zero",source:"@site/solutions/2200-2299/2275-largest-combination-with-bitwise-and-greater-than-zero-medium.md",sourceDirName:"2200-2299",slug:"/2200-2299/largest-combination-with-bitwise-and-greater-than-zero-medium",permalink:"/solutions/2200-2299/largest-combination-with-bitwise-and-greater-than-zero-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2275-largest-combination-with-bitwise-and-greater-than-zero-medium.md",tags:[],version:"current",sidebarPosition:2275,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/largest-combination-with-bitwise-and-greater-than-zero"},sidebar:"tutorialSidebar",previous:{title:"2274 - Maximum Consecutive Floors Without Special Floors (Medium)",permalink:"/solutions/2200-2299/maximum-consecutive-floors-without-special-floors-medium"},next:{title:"2276 - Count Integers in Intervals (Hard)",permalink:"/solutions/2200-2299/count-integers-in-intervals-hard"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Counting",id:"approach-1-counting",level:2}],m=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var c;const u={toc:p},d="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2275---largest-combination-with-bitwise-and-greater-than-zero-medium"},"2275 - Largest Combination With Bitwise AND Greater Than Zero (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/largest-combination-with-bitwise-and-greater-than-zero"},"https://leetcode.com/problems/largest-combination-with-bitwise-and-greater-than-zero")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"bitwise AND")," of an array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," is the bitwise AND of all integers in ",(0,a.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For example, for ",(0,a.kt)("inlineCode",{parentName:"li"},"nums = [1, 5, 3]"),", the bitwise AND is equal to ",(0,a.kt)("inlineCode",{parentName:"li"},"1 & 5 & 3 = 1"),"."),(0,a.kt)("li",{parentName:"ul"},"Also, for ",(0,a.kt)("inlineCode",{parentName:"li"},"nums = [7]"),", the bitwise AND is ",(0,a.kt)("inlineCode",{parentName:"li"},"7"),".")),(0,a.kt)("p",null,"You are given an array of positive integers ",(0,a.kt)("inlineCode",{parentName:"p"},"candidates"),". Evaluate the ",(0,a.kt)("strong",{parentName:"p"},"bitwise AND")," of every ",(0,a.kt)("strong",{parentName:"p"},"combination")," of numbers of ",(0,a.kt)("inlineCode",{parentName:"p"},"candidates"),". Each number in ",(0,a.kt)("inlineCode",{parentName:"p"},"candidates")," may only be used ",(0,a.kt)("strong",{parentName:"p"},"once")," in each combination."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the size of the ",(0,a.kt)("strong",{parentName:"em"},"largest")," combination of")," ",(0,a.kt)("inlineCode",{parentName:"p"},"candidates")," ",(0,a.kt)("em",{parentName:"p"},"with a bitwise AND ",(0,a.kt)("strong",{parentName:"em"},"greater")," than")," ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: candidates = [16,17,71,62,12,24,14]\nOutput: 4\nExplanation: The combination [16,17,62,24] has a bitwise AND of 16 & 17 & 62 & 24 = 16 > 0.\nThe size of the combination is 4.\nIt can be shown that no combination with a size greater than 4 has a bitwise AND greater than 0.\nNote that more than one combination may have the largest size.\nFor example, the combination [62,12,24,14] has a bitwise AND of 62 & 12 & 24 & 14 = 8 > 0.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: candidates = [8,8]\nOutput: 2\nExplanation: The largest combination [8,8] has a bitwise AND of 8 & 8 = 8 > 0.\nThe size of the combination is 2, so we return 2.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= candidates.length <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= candidates[i] <= 10^7"))),(0,a.kt)("h2",{id:"approach-1-counting"},"Approach 1: Counting"),(0,a.kt)("p",null,"If the $i$-th bit is set after performing AND operation on $k$ candidates, it means the $i$-th of all $k$ candidates must be 1. Therefore, we check each bit to see which bit has the most candidates with the bit set. "),(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int largestCombination(vector<int>& candidates) {\n        int n = candidates.size(), ans = 0;\n        for (int i = 0; i < 32; i++) {\n            // init bits to  0 for each index\n            int bits = 0;\n            // iterate each candidate\n            for (int j = 0; j < n; j++) {\n                // i-th bit is set for candidates[j]\n                if ((1 << i) & candidates[j]) {\n                    // count the bit\n                    bits += 1;\n                }\n            }\n            // update the ans \n            ans = max(ans, bits);\n        }\n        return ans;\n    }\n};\n")))}h.isMDXComponent=!0}}]);