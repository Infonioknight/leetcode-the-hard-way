"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[53530],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=a,f=p["".concat(u,".").concat(d)]||p[d]||c[d]||o;return n?r.createElement(f,i(i({ref:t},m),{},{components:n})):r.createElement(f,i({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},22287:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @jit, @heder | https://leetcode.com/problems/sum-of-absolute-differences-in-a-sorted-array/",tags:["Array","Math","Prefix Sum"]},i="1685 - Sum of Absolute Differences in a Sorted Array (Medium)",s={unversionedId:"1600-1699/sum-of-absolute-differences-in-a-sorted-array-medium",id:"1600-1699/sum-of-absolute-differences-in-a-sorted-array-medium",title:"1685 - Sum of Absolute Differences in a Sorted Array (Medium)",description:"Author: @jit, @heder | https://leetcode.com/problems/sum-of-absolute-differences-in-a-sorted-array/",source:"@site/solutions/1600-1699/1685-sum-of-absolute-differences-in-a-sorted-array-medium.md",sourceDirName:"1600-1699",slug:"/1600-1699/sum-of-absolute-differences-in-a-sorted-array-medium",permalink:"/solutions/1600-1699/sum-of-absolute-differences-in-a-sorted-array-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1600-1699/1685-sum-of-absolute-differences-in-a-sorted-array-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Math",permalink:"/solutions/tags/math"},{label:"Prefix Sum",permalink:"/solutions/tags/prefix-sum"}],version:"current",sidebarPosition:1685,frontMatter:{description:"Author: @jit, @heder | https://leetcode.com/problems/sum-of-absolute-differences-in-a-sorted-array/",tags:["Array","Math","Prefix Sum"]},sidebar:"tutorialSidebar",previous:{title:"1680 - Concatenation of Consecutive Binary Numbers (Medium)",permalink:"/solutions/1600-1699/concatenation-of-consecutive-binary-numbers-medium"},next:{title:"1692 - Count Ways to Distribute Candies (Hard)",permalink:"/solutions/1600-1699/count-ways-to-distribute-candies-hard"}},u={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Prefix and Suffix Sum",id:"approach-1-prefix-and-suffix-sum",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},p=m("Tabs"),c=m("TabItem"),d=m("SolutionAuthor"),f={toc:l},b="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(b,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1685---sum-of-absolute-differences-in-a-sorted-array-medium"},"1685 - Sum of Absolute Differences in a Sorted Array (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sum-of-absolute-differences-in-a-sorted-array/"},"https://leetcode.com/problems/sum-of-absolute-differences-in-a-sorted-array/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," sorted in ",(0,a.kt)("strong",{parentName:"p"},"non-decreasing")," order."),(0,a.kt)("p",null,"Build and return ",(0,a.kt)("em",{parentName:"p"},"an integer array"),(0,a.kt)("inlineCode",{parentName:"p"},"result"),(0,a.kt)("em",{parentName:"p"},"with the same length as"),(0,a.kt)("inlineCode",{parentName:"p"},"nums"),(0,a.kt)("em",{parentName:"p"},"such that"),(0,a.kt)("inlineCode",{parentName:"p"},"result[i]"),(0,a.kt)("em",{parentName:"p"},"is equal to the ",(0,a.kt)("strong",{parentName:"em"},"summation of absolute differences")," between"),(0,a.kt)("inlineCode",{parentName:"p"},"nums[i]"),(0,a.kt)("em",{parentName:"p"},"and all the other elements in the array.")),(0,a.kt)("p",null,"In other words, ",(0,a.kt)("inlineCode",{parentName:"p"},"result[i]")," is equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"sum(|nums[i]-nums[j]|)")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"0 <= j < nums.length")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"j != i")," (",(0,a.kt)("strong",{parentName:"p"},"0-indexed"),")."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [2,3,5]\nOutput: [4,3,5]\nExplanation: Assuming the arrays are 0-indexed, then\nresult[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,\nresult[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,\nresult[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,4,6,8,10]\nOutput: [24,15,13,15,21]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"2 <= nums.length <= 10 ^ 5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= nums[i + 1] <= 10 ^ 4"))),(0,a.kt)("h2",{id:"approach-1-prefix-and-suffix-sum"},"Approach 1: Prefix and Suffix Sum"),(0,a.kt)(p,{mdxType:"Tabs"},(0,a.kt)(c,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,a.kt)(d,{name:"@jit",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"// Prefix and suffix sum:\ndef getSumAbsoluteDifferences(nums: Array[Int]): Array[Int] = {\n  val n = nums.length\n  val pref = nums.scanLeft(0)(_ + _).tail\n  val suff = nums.scanRight(0)(_ + _).init\n  Array.tabulate(n)(i =>\n    suff(i) - pref(i) + nums(i) * (2 * i + 1 - n))\n}\n"))),(0,a.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(d,{name:"@heder",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'static int fast_io = []() { std::ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0; }();\n\nclass Solution {\npublic:\n    __attribute__((no_sanitize("address")))\n    static vector<int> getSumAbsoluteDifferences(vector<int>& nums) {\n        const int total = accumulate(begin(nums), end(nums), 0);\n        for (int i = 0, ps = 0; i < size(nums); ++i) {\n            const int num = nums[i];\n            const int before = num * (i - 1) - ps;\n            const int after = total - ps - num * (size(nums) - i - 1);\n            nums[i] = before + after;\n            ps += num;\n        }\n        return nums;\n    }\n};\n')))))}y.isMDXComponent=!0}}]);