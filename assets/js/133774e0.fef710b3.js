"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[50409],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(r),c=a,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||l;return r?n.createElement(h,o(o({ref:t},u),{},{components:r})):n.createElement(h,o({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},77248:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const l={description:"Author: @Srijita-Mandal, @radojicic23 | https://leetcode.com/problems/binary-tree-level-order-traversal/",tags:["Tree","Breadth-First Search","Binary Tree"]},o="0102 - Binary Tree Level Order Traversal (Medium)",i={unversionedId:"0100-0199/binary-tree-level-order-traversal-medium",id:"0100-0199/binary-tree-level-order-traversal-medium",title:"0102 - Binary Tree Level Order Traversal (Medium)",description:"Author: @Srijita-Mandal, @radojicic23 | https://leetcode.com/problems/binary-tree-level-order-traversal/",source:"@site/solutions/0100-0199/0102-binary-tree-level-order-traversal-medium.md",sourceDirName:"0100-0199",slug:"/0100-0199/binary-tree-level-order-traversal-medium",permalink:"/solutions/0100-0199/binary-tree-level-order-traversal-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0102-binary-tree-level-order-traversal-medium.md",tags:[{label:"Tree",permalink:"/solutions/tags/tree"},{label:"Breadth-First Search",permalink:"/solutions/tags/breadth-first-search"},{label:"Binary Tree",permalink:"/solutions/tags/binary-tree"}],version:"current",sidebarPosition:102,frontMatter:{description:"Author: @Srijita-Mandal, @radojicic23 | https://leetcode.com/problems/binary-tree-level-order-traversal/",tags:["Tree","Breadth-First Search","Binary Tree"]},sidebar:"tutorialSidebar",previous:{title:"0101 - Symmetric Tree (Easy)",permalink:"/solutions/0100-0199/symmetric-tree-easy"},next:{title:"0103 -  Binary Tree Zigzag Level Order Traversal (Medium)",permalink:"/solutions/0100-0199/binary-tree-zigzag-level-order-traversal-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: BFS",id:"approach-1-bfs",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},d=u("Tabs"),m=u("TabItem"),c=u("SolutionAuthor"),h={toc:p},v="wrapper";function f(e){let{components:t,...r}=e;return(0,a.kt)(v,(0,n.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0102---binary-tree-level-order-traversal-medium"},"0102 - Binary Tree Level Order Traversal (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-level-order-traversal/"},"https://leetcode.com/problems/binary-tree-level-order-traversal/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given the $root$ of a binary tree, return ",(0,a.kt)("em",{parentName:"p"},"the level order traversal of its nodes' values"),". (i.e., from left to right, level by level)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1]\nOutput: [[1]]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = []\nOutput: []\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ",(0,a.kt)("inlineCode",{parentName:"li"},"[0, 2000]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-1000 <= Node.val <= 1000"))),(0,a.kt)("h2",{id:"approach-1-bfs"},"Approach 1: BFS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Take one 2D vector $ans$ to return the final tree-traversal, and another vector $v$ to store seperate levels."),(0,a.kt)("li",{parentName:"ul"},"Take a queue, store $root$ node inside it and a ",(0,a.kt)("em",{parentName:"li"},"NULL")," node for seperating levels."),(0,a.kt)("li",{parentName:"ul"},"Until the queue is not empty, pop one by one nodes from queue. if the node is ",(0,a.kt)("em",{parentName:"li"},"NULL")," and queue is not empty, push the ",(0,a.kt)("em",{parentName:"li"},"NULL")," again inside the queue. Push $v$ into $ans$ as one level is completed and clear $v$."),(0,a.kt)("li",{parentName:"ul"},"If the node is not null, push the value into $v$ and push its left and right nodes into queue (if not null).")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Time Complexity:"),"  $O(N)$",(0,a.kt)("br",{parentName:"p"}),"\n","All the nodes of the binary tree ",(0,a.kt)("em",{parentName:"p"},"(N nodes)")," are traversed once at a time.  So, $O(N)$ time complexity is needed to traverse all the $N$ nodes."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Space Complexity:"),"  $O(N)$",(0,a.kt)("br",{parentName:"p"}),"\n","A queue data structure is taken to store the next level nodes. For the worst case, the queue is stored with all the $N$ nodes. That's why the space complexity is $O(N)$."),(0,a.kt)(d,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(c,{name:"@Srijita-Mandal",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n    public:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector<vector<int>> ans;\n        // return [] if the input is null\n        if (root == NULL) return ans;\n        \n        //for storing each level\n        vector<int> v;  \n        queue<TreeNode*> q;\n        // starting point\n        q.push(root);\n        // for sepearting levels\n        q.push(NULL);  \n\n        // BFS\n        while(!q.empty()){\n            TreeNode* cur = q.front();\n            q.pop();\n            if (cur == NULL) {\n                // storing each level into ans vector\n                ans.push_back(v);  \n                // clearing v vector to insert next level\n                v.clear();  \n                // storing NULL at the end of queue\n                if (!q.empty()) q.push(NULL); \n            } else{\n                v.push_back(cur->val);\n                if (cur->left != NULL) q.push(cur->left);\n                if (cur->right != NULL) q.push(cur->right);\n            }\n        }\n        return ans;\n    }\n};\n"))),(0,a.kt)(m,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(c,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        res = []\n        # initialize queue\n        q = collections.deque()\n        # add root node that we are given in queue\n        q.append(root)\n        \n        # BFS\n        while q:\n            level = []\n            # going through one level at a time \n            # with those nodes from that level\n            # we are going to add them to it's own list (level)\n            # and we are going to add that list to the result \n            for i in range(len(q)):\n                # pop nodes from the left of the queue\n                node = q.popleft()\n                # if node is not empty \n                if node:\n                    level.append(node.val)\n                    # add children of this node to queue\n                    q.append(node.left)\n                    q.append(node.right)\n            # if level is not empty\n            if level:\n                # add level to the result \n                res.append(level)\n        return res \n"))),(0,a.kt)(m,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)(c,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n    let q = [root];\n    let res = [];\n    // BFS\n    while (q[0]) {\n        let level = [];\n        let q_len = q.length;\n        // going through one level at a time \n        // with those nodes from that level\n        // we are going to add them to it's own list (level)\n        // and we are going to add that list to the result\n        for (let i = 0; i < q_len; i++) {\n            // pop nodes from the left of the queue\n            let node = q.shift();\n            level.push(node.val);\n            // add children of this node to queue\n            if (node.left) q.push(node.left);\n            if (node.right) q.push(node.right);\n        }\n        // add level to the result \n        res.push(level);\n    }\n    return res;\n};\n")))))}f.isMDXComponent=!0}}]);