"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[70879],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return k}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=p(t),k=i,c=f["".concat(u,".").concat(k)]||f[k]||m[k]||a;return t?r.createElement(c,o(o({ref:n},l),{},{components:t})):r.createElement(c,o({ref:n},l))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},74662:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var r=t(87462),i=t(63366),a=(t(67294),t(3905)),o=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/subarray-sums-divisible-by-k/",tags:["Array","Hash Table","Prefix Sum"]},u="0974 - Subarray Sums Divisible by K (Medium)",p={unversionedId:"0900-0999/subarray-sums-divisible-by-k-medium",id:"0900-0999/subarray-sums-divisible-by-k-medium",title:"0974 - Subarray Sums Divisible by K (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/subarray-sums-divisible-by-k/",source:"@site/solutions/0900-0999/0974-subarray-sums-divisible-by-k-medium.md",sourceDirName:"0900-0999",slug:"/0900-0999/subarray-sums-divisible-by-k-medium",permalink:"/solutions/0900-0999/subarray-sums-divisible-by-k-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0974-subarray-sums-divisible-by-k-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"Prefix Sum",permalink:"/solutions/tags/prefix-sum"}],version:"current",sidebarPosition:974,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/subarray-sums-divisible-by-k/",tags:["Array","Hash Table","Prefix Sum"]},sidebar:"tutorialSidebar",previous:{title:"0973 - K Closest Points to Origin (Medium)",permalink:"/solutions/0900-0999/k-closest-points-to-origin-medium"},next:{title:"0976 - Largest Perimeter Triangle (Easy)",permalink:"/solutions/0900-0999/largest-perimeter-triangle-easy"}},l={},m=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Hash Map + Prefix Sum",id:"approach-1-hash-map--prefix-sum",level:2}],f=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)}},k=f("Tabs"),c=f("TabItem"),b=f("SolutionAuthor"),y={toc:m};function d(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0974---subarray-sums-divisible-by-k-medium"},"0974 - Subarray Sums Divisible by K (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,a.kt)("em",{parentName:"p"},"the number of non-empty ",(0,a.kt)("strong",{parentName:"em"},"subarrays")," that have a sum divisible by"),(0,a.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"subarray")," is a ",(0,a.kt)("strong",{parentName:"p"},"contiguous")," part of an array."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [4,5,0,-2,-3,1], k = 5\nOutput: 7\nExplanation: There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [5], k = 9\nOutput: 0\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 3 * 10^4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-104 <= nums[i] <= 10^4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"2 <= k <= 10^4"))),(0,a.kt)("h2",{id:"approach-1-hash-map--prefix-sum"},"Approach 1: Hash Map + Prefix Sum"),(0,a.kt)(k,{mdxType:"Tabs"},(0,a.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(b,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> generatePrefixSum(vector<int>& a) {\n        int n = a.size();\n        vector<int> pref(n);\n        pref[0] = a[0];\n        for (int i = 1; i < n; i++) pref[i] = pref[i - 1] + a[i];\n        return pref;\n    }\n\n    int subarraysDivByK(vector<int>& nums, int k) {\n        // generate prefix sum\n        vector<int> pref = generatePrefixSum(nums);\n        // store the modular cnt\n        vector<int> m(k);\n        // base value\n        m[0] = 1;\n        // init ans\n        int ans = 0;\n        // iterate each sum\n        for (auto& x : pref) {\n            // if x is negative, turn it to positive modular equivalent\n            if (x < 0) x = (x % k + k) % k;\n            // we need to find pairs such that (pref[j] - pref[i]) % k == 0\n            // hence, we look for pref[j] % k == pref[i] % k\n            // why ..? \n            // pref[j] = a * k + x\n            // pref[i] = b * k + y\n            // pref[j] - pref[i] = (a * k + x) - (b * k + y)\n            // pref[j] - pref[i] = k * (a - b) + (x - y)\n            // -> (pref[j] - pref[i]) % k == 0 if & only if (x - y) == 0\n            m[x % k]++;\n        }\n        // n choose 2\n        for (auto& x : m) ans += x * (x - 1) / 2;\n        return ans;\n    }\n};\n"))),(0,a.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(b,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int subarraysDivByK(int[] nums, int k) {\n        // generate prefix sum\n        int[] pref = new int[nums.length];\n        pref[0] = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            pref[i] = pref[i - 1] + nums[i];\n        }\n        // store the modular cnt\n        int[] m = new int[k];\n        // base value\n        m[0] = 1;\n        // init ans\n        int ans = 0;\n        // iterate each sum\n        for (int x : pref) {\n            // if x is negative, turn it to positive modular equivalent\n            if (x < 0) {\n                x = (x % k + k) % k;\n            }\n            // we need to find pairs such that (pref[j] - pref[i]) % k == 0\n            // hence, we look for pref[j] % k == pref[i] % k\n            // why ..? \n            // pref[j] = a * k + x\n            // pref[i] = b * k + y\n            // pref[j] - pref[i] = (a * k + x) - (b * k + y)\n            // pref[j] - pref[i] = k * (a - b) + (x - y)\n            // -> (pref[j] - pref[i]) % k == 0 if & only if (x - y) == 0\n            m[x % k]++;\n        }\n        // n choose 2\n        for (int x : m) {\n            ans += x * (x - 1) / 2;\n        }\n        return ans;\n    }\n}\n\n"))),(0,a.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(b,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def subarraysDivByK(self, nums: List[int], k: int) -> int:\n        # generate prefix sum\n        pref = [0] * len(nums)\n        pref[0] = nums[0]\n        for i in range(1, len(nums)):\n            pref[i] = pref[i-1] + nums[i]\n        \n        # store the modular cnt\n        m = [0] * k\n        # base value\n        m[0] = 1\n        # init ans\n        ans = 0\n        # iterate each sum\n        for x in pref:\n            # we don't need the following logic as Python handles it internally \n            # if x is negative, turn it to positive modular equivalent\n            # if x < 0:\n            #     x = (x % k + k) % k\n            # we need to find pairs such that (pref[j] - pref[i]) % k == 0\n            # hence, we look for pref[j] % k == pref[i] % k\n            # why ..? \n            # pref[j] = a * k + x\n            # pref[i] = b * k + y\n            # pref[j] - pref[i] = (a * k + x) - (b * k + y)\n            # pref[j] - pref[i] = k * (a - b) + (x - y)\n            # -> (pref[j] - pref[i]) % k == 0 if & only if (x - y) == 0\n            m[x % k] += 1\n        # n choose 2\n        for x in m:\n            ans += x * (x - 1) // 2\n        return ans\n"))),(0,a.kt)(c,{value:"rs",label:"Rust",mdxType:"TabItem"},(0,a.kt)(b,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"impl Solution {\n    pub fn subarrays_div_by_k(nums: Vec<i32>, k: i32) -> i32 {\n        // generate prefix sum\n        let mut pref = vec![0; nums.len()];\n        pref[0] = nums[0];\n        for i in 1 .. nums.len() {\n            pref[i] = pref[i - 1] + nums[i];\n        }\n        // store the modular cnt\n        let mut m = vec![0; k as usize];\n        // base value\n        m[0] = 1;\n        // init ans\n        let mut ans = 0;\n        // iterate each sum\n        for x in pref.iter_mut() {\n            // if x is negative, turn it to positive modular equivalent\n            if *x < 0 {\n                *x = (*x % k + k) % k;\n            }\n            // we need to find pairs such that (pref[j] - pref[i]) % k == 0\n            // hence, we look for pref[j] % k == pref[i] % k\n            // why ..? \n            // pref[j] = a * k + x\n            // pref[i] = b * k + y\n            // pref[j] - pref[i] = (a * k + x) - (b * k + y)\n            // pref[j] - pref[i] = k * (a - b) + (x - y)\n            // -> (pref[j] - pref[i]) % k == 0 if & only if (x - y) == 0\n            m[(*x % k) as usize] += 1;\n        }\n        // n choose 2\n        for x in m {\n            ans += x * (x - 1) / 2;\n        }\n        ans\n    }\n}\n\n")))))}d.isMDXComponent=!0}}]);