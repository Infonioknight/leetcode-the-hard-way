"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[72221],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>c});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},d=Object.keys(e);for(i=0;i<d.length;i++)t=d[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(i=0;i<d.length;i++)t=d[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var r=i.createContext({}),l=function(e){var n=i.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=l(e.components);return i.createElement(r.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,d=e.originalType,r=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),p=l(t),g=o,c=p["".concat(r,".").concat(g)]||p[g]||u[g]||d;return t?i.createElement(c,s(s({ref:n},m),{},{components:t})):i.createElement(c,s({ref:n},m))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var d=t.length,s=new Array(d);s[0]=g;var a={};for(var r in n)hasOwnProperty.call(n,r)&&(a[r]=n[r]);a.originalType=e,a[p]="string"==typeof e?e:o,s[1]=a;for(var l=2;l<d;l++)s[l]=t[l];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},52119:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>v,frontMatter:()=>d,metadata:()=>a,toc:()=>l});var i=t(87462),o=(t(67294),t(3905));const d={description:"Author: @wingkwong | https://leetcode.com/problems/find-closest-node-to-given-two-nodes"},s="2359 - Find Closest Node to Given Two Nodes (Medium)",a={unversionedId:"2300-2399/find-closest-node-to-given-two-nodes-medium",id:"2300-2399/find-closest-node-to-given-two-nodes-medium",title:"2359 - Find Closest Node to Given Two Nodes (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/find-closest-node-to-given-two-nodes",source:"@site/solutions/2300-2399/2359-find-closest-node-to-given-two-nodes-medium.md",sourceDirName:"2300-2399",slug:"/2300-2399/find-closest-node-to-given-two-nodes-medium",permalink:"/solutions/2300-2399/find-closest-node-to-given-two-nodes-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2300-2399/2359-find-closest-node-to-given-two-nodes-medium.md",tags:[],version:"current",sidebarPosition:2359,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-closest-node-to-given-two-nodes"},sidebar:"tutorialSidebar",previous:{title:"2358 - Maximum Number of Groups Entering a Competition (Medium)",permalink:"/solutions/2300-2399/maximum-number-of-groups-entering-a-competition-medium"},next:{title:"2360 - Longest Cycle in a Graph (Hard)",permalink:"/solutions/2300-2399/longest-cycle-in-a-graph-hard"}},r={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS x 2",id:"approach-1-dfs-x-2",level:2},{value:"Approach: Dijkstra x 2",id:"approach-dijkstra-x-2",level:2}],m=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)},p=m("Tabs"),u=m("TabItem"),g=m("SolutionAuthor"),c={toc:l},f="wrapper";function v(e){let{components:n,...t}=e;return(0,o.kt)(f,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"2359---find-closest-node-to-given-two-nodes-medium"},"2359 - Find Closest Node to Given Two Nodes (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-closest-node-to-given-two-nodes"},"https://leetcode.com/problems/find-closest-node-to-given-two-nodes")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given a ",(0,o.kt)("strong",{parentName:"p"},"directed")," graph of ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," nodes numbered from ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"n - 1"),", where each node has ",(0,o.kt)("strong",{parentName:"p"},"at most one")," outgoing edge."),(0,o.kt)("p",null,"The graph is represented with a given ",(0,o.kt)("strong",{parentName:"p"},"0-indexed")," array ",(0,o.kt)("inlineCode",{parentName:"p"},"edges")," of size ",(0,o.kt)("inlineCode",{parentName:"p"},"n"),", indicating that there is a directed edge from node ",(0,o.kt)("inlineCode",{parentName:"p"},"i")," to node ",(0,o.kt)("inlineCode",{parentName:"p"},"edges[i]"),". If there is no outgoing edge from ",(0,o.kt)("inlineCode",{parentName:"p"},"i"),", then ",(0,o.kt)("inlineCode",{parentName:"p"},"edges[i] == -1"),"."),(0,o.kt)("p",null,"You are also given two integers ",(0,o.kt)("inlineCode",{parentName:"p"},"node1")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"node2"),"."),(0,o.kt)("p",null,"Return ",(0,o.kt)("em",{parentName:"p"},"the ",(0,o.kt)("strong",{parentName:"em"},"index")," of the node that can be reached from both")," ",(0,o.kt)("inlineCode",{parentName:"p"},"node1")," ",(0,o.kt)("em",{parentName:"p"},"and")," ",(0,o.kt)("inlineCode",{parentName:"p"},"node2"),(0,o.kt)("em",{parentName:"p"},", such that the ",(0,o.kt)("strong",{parentName:"em"},"maximum")," between the distance from")," ",(0,o.kt)("inlineCode",{parentName:"p"},"node1")," ",(0,o.kt)("em",{parentName:"p"},"to that node, and from")," ",(0,o.kt)("inlineCode",{parentName:"p"},"node2")," ",(0,o.kt)("em",{parentName:"p"},"to that node is ",(0,o.kt)("strong",{parentName:"em"},"minimized")),". If there are multiple answers, return the node with the ",(0,o.kt)("strong",{parentName:"p"},"smallest")," index, and if no possible answer exists, return ",(0,o.kt)("inlineCode",{parentName:"p"},"-1"),"."),(0,o.kt)("p",null,"Note that ",(0,o.kt)("inlineCode",{parentName:"p"},"edges")," may contain cycles."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-2.png",alt:null})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: edges = [2,2,3,-1], node1 = 0, node2 = 1\nOutput: 2\nExplanation: The distance from node 0 to node 2 is 1, and the distance from node 1 to node 2 is 1.\nThe maximum of those two distances is 1. It can be proven that we cannot get a node with a smaller maximum distance than 1, so we return node 2.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-4.png",alt:null})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: edges = [1,2,-1], node1 = 0, node2 = 2\nOutput: 2\nExplanation: The distance from node 0 to node 2 is 2, and the distance from node 2 to itself is 0.\nThe maximum of those two distances is 2. It can be proven that we cannot get a node with a smaller maximum distance than 2, so we return node 2.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"n == edges.length")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"2 <= n <= 10^5")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-1 <= edges[i] < n")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edges[i] != i")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= node1, node2 < n"))),(0,o.kt)("h2",{id:"approach-1-dfs-x-2"},"Approach 1: DFS x 2"),(0,o.kt)("p",null,"Since there is only at most 1 outgoing edge, we can simply use DFS."),(0,o.kt)(p,{mdxType:"Tabs"},(0,o.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void dfs(int u, vector<int>& d, vector<int>& vis, vector<int>& edges) {\n        // mark it visited\n        vis[u] = 1;\n        // check the outgoing edge\n        int v = edges[u];\n        // -1 means there is no outgoing edge, so we skip it\n        // if it is visited, we also skip it\n        if (v != -1 && !vis[v]) {\n            // the dist going to node v form node u is simply d[u] + 1\n            d[v] = d[u] + 1;\n            // dfs on neigbour node `v`\n            dfs(v, d, vis, edges);\n        }\n    }\n    \n    int closestMeetingNode(vector<int>& edges, int node1, int node2) {\n        int n = edges.size();\n        // d1[i]: shortest dist to node i starting from node 1\n        // d2[i]: shortest dist to nodes i starting from node 2\n        vector<int> d1(n, INT_MAX), d2(n, INT_MAX);\n        // vis1[i]: true if node i is visited else false. used for building d1\n        // vis2[i]: true if node i is visited else false. used for building d2\n        vector<int> vis1(n, 0), vis2(n, 0);\n        // dist to node1 from node1 is 0, same as node2 \n        d1[node1] = 0, d2[node2] = 0;\n        // build the dist for d1\n        dfs(node1, d1, vis1, edges);\n        // build the dist for d2\n        dfs(node2, d2, vis2, edges);\n        // iterate each node to find the min max dist\n        int ans = -1, mi = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            if (max(d1[i], d2[i]) < mi) {\n                mi = max(d1[i], d2[i]);\n                ans = i;\n            }\n        }\n        return ans;\n    }\n};\n"))),(0,o.kt)(u,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public void dfs(int u, int[] d, boolean[] vis, int[] edges) {\n        // mark it visited\n        vis[u] = true;\n        // check the outgoing edge\n        int v = edges[u];\n        // -1 means there is no outgoing edge, so we skip it\n        if (v != -1 && !vis[v]) {\n            // the dist going to node v form node u is simply d[u] + 1\n            d[v] = d[u] + 1;\n            // dfs on neigbour node `v`\n            dfs(v, d, vis, edges);\n        }\n    }\n    \n    public int closestMeetingNode(int[] edges, int node1, int node2) {\n        int n = edges.length;\n        // d1[i]: shortest dist to node i starting from node 1\n        // d2[i]: shortest dist to nodes i starting from node 2\n        int[] d1 = new int[n];\n        int[] d2 = new int[n];\n        // vis1[i]: true if node i is visited else false. used for building d1\n        // vis2[i]: true if node i is visited else false. used for building d2\n        boolean[] vis1 = new boolean[n];\n        boolean[] vis2 = new boolean[n];\n        Arrays.fill(d1, Integer.MAX_VALUE);\n        Arrays.fill(d2, Integer.MAX_VALUE);\n        // dist to node1 from node1 is 0, same as node2 \n        d1[node1] = d2[node2] = 0;\n        // build the dist for d1\n        dfs(node1, d1, vis1, edges);\n        // build the dist for d2\n        dfs(node2, d2, vis2, edges);\n        // iterate each node to find the min max dist\n        int ans = -1, mi = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            if (Math.max(d1[i], d2[i]) < mi) {\n                mi = Math.max(d1[i], d2[i]);\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}\n"))),(0,o.kt)(u,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'class Solution:\n    def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -> int:\n        def dfs(u: int, d: List[int], vis: List[bool], edges: List[int]) -> None:\n            # mark it visited\n            vis[u] = True\n            # check the outgoing edge\n            v = edges[u]\n            # -1 means there is no outgoing edge, so we skip it\n            # if it is visited, we also skip it\n            if v != -1 and not vis[v]:\n                # the dist going to node v form node u is simply d[u] + 1\n                d[v] = d[u] + 1\n                # dfs on neigbour node `v`\n                dfs(v, d, vis, edges)\n        n = len(edges)\n        # d1[i]: shortest dist to node i starting from node 1\n        # d2[i]: shortest dist to nodes i starting from node 2\n        d1, d2 = [float("inf")] * n, [float("inf")] * n\n        # vis1[i]: true if node i is visited else false. used for building d1\n        # vis2[i]: true if node i is visited else false. used for building d2\n        vis1, vis2 = [False] * n, [False] * n\n        # dist to node1 from node1 is 0, same as node2 \n        d1[node1], d2[node2] = 0, 0\n        # build the dist for d1\n        dfs(node1, d1, vis1, edges)\n        # build the dist for d2\n        dfs(node2, d2, vis2, edges)\n        # iterate each node to find the min max dist\n        ans = -1\n        mi = float("inf")\n        for i in range(n):\n            if max(d1[i], d2[i]) < mi:\n                mi = max(d1[i], d2[i])\n                ans = i\n        return ans\n'))),(0,o.kt)(u,{value:"rs",label:"Rust",mdxType:"TabItem"},(0,o.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rs"},"use std::cmp::max;\n\nimpl Solution {\n    fn dfs(u: i32, d: &mut Vec<i32>, vis: &mut Vec<bool>, edges: &Vec<i32>) {\n        // mark it visited\n        vis[u as usize] = true;\n        // check the outgoing edge\n        let v = edges[u as usize];\n        // -1 means there is no outgoing edge, so we skip it\n        // if it is visited, we also skip it\n        if v != -1 && !vis[v as usize] {\n            // the dist going to node v form node u is simply d[u] + 1\n            d[v as usize] = d[u as usize] + 1;\n            // dfs on neigbour node `v`\n            Self::dfs(v, d, vis, edges);\n        }\n    }\n    \n    pub fn closest_meeting_node(edges: Vec<i32>, node1: i32, node2: i32) -> i32 {\n        let n = edges.len();\n        // d1[i]: shortest dist to node i starting from node 1\n        // d2[i]: shortest dist to nodes i starting from node 2\n        let mut d1 = vec![i32::MAX; n];\n        let mut d2 = vec![i32::MAX; n];\n        // vis1[i]: true if node i is visited else false. used for building d1\n        // vis2[i]: true if node i is visited else false. used for building d2\n        let mut vis1 = vec![false; n];\n        let mut vis2 = vec![false; n];\n        // dist to node1 from node1 is 0, same as node2 \n        d1[node1 as usize] = 0;\n        d2[node2 as usize] = 0;\n        // build the dist for d1\n        Self::dfs(node1, &mut d1, &mut vis1, &edges);\n        // build the dist for d2\n        Self::dfs(node2, &mut d2, &mut vis2, &edges);\n        // iterate each node to find the min max dist\n        let mut ans = -1;\n        let mut mi = i32::MAX;\n        for i in 0..n {\n            if max(d1[i], d2[i]) < mi {\n                mi = max(d1[i], d2[i]);\n                ans = i as i32;\n            }\n        }\n        return ans;\n    }\n}\n")))),(0,o.kt)("h2",{id:"approach-dijkstra-x-2"},"Approach: Dijkstra x 2"),(0,o.kt)("p",null,"Dijkstra approach in this question is not recommended but here's how we do in case there are multiple outgoing edges."),(0,o.kt)(p,{mdxType:"Tabs"},(0,o.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    // https://leetcodethehardway.com/tutorials/graph-theory/dijkstra\n    template<typename T_pair, typename T_vector>\n    void dijkstra(T_pair &g, T_vector &dist, int start) {\n      priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n      dist[start] = 0;\n      pq.push({start, 0});\n      while (!pq.empty()) {\n        auto [u_node, u_cost] = pq.top(); pq.pop();\n        if (u_cost > dist[u_node]) continue;\n        for (auto [v_node, v_cost] : g[u_node]) {\n          if (dist[v_node] > dist[u_node] + v_cost) {\n            dist[v_node] = dist[u_node] + v_cost;\n            pq.push({v_node, dist[v_node]});\n          }\n        }\n      }\n    }\n    \n    int closestMeetingNode(vector<int>& edges, int node1, int node2) {\n        int n = edges.size();\n        // d1[i]: shortest dist to node i starting from node 1\n        // d2[i]: shortest dist to nodes i starting from node 2\n        vector<int> d1(n, INT_MAX), d2(n, INT_MAX);\n        // build the graph\n        vector<vector<pair<int, int>>> g(n);\n        // iterate each node\n        for (int i = 0; i < n; i++) {\n            // if there is outgoing edge from node i\n            if (edges[i] != -1) {\n                // by default, we define the dist to edges[i] is 1\n                g[i].push_back({edges[i], 1});\n            }\n        }\n        // build the dist for d1\n        dijkstra(g, d1, node1);\n        // build the dist for d2\n        dijkstra(g, d2, node2);\n        // iterate each node to find the min max dist\n        int ans = -1, mi = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            if (max(d1[i], d2[i]) < mi) {\n                mi = max(d1[i], d2[i]);\n                ans = i;\n            }\n        }\n        return ans;\n    }\n};\n")))))}v.isMDXComponent=!0}}]);