"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[85723],{3905:(e,a,n)=>{n.d(a,{Zo:()=>l,kt:()=>u});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function m(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=t.createContext({}),p=function(e){var a=t.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):m(m({},a),e)),n},l=function(e){var a=p(e.components);return t.createElement(o.Provider,{value:a},e.children)},c="mdxType",N={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},k=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=p(n),k=r,u=c["".concat(o,".").concat(k)]||c[k]||N[k]||s;return n?t.createElement(u,m(m({ref:a},l),{},{components:n})):t.createElement(u,m({ref:a},l))}));function u(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=n.length,m=new Array(s);m[0]=k;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i[c]="string"==typeof e?e:r,m[1]=i;for(var p=2;p<s;p++)m[p]=n[p];return t.createElement.apply(null,m)}return t.createElement.apply(null,n)}k.displayName="MDXCreateElement"},12675:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>m,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var t=n(87462),r=(n(67294),n(3905));const s={description:"Author: @wingkwong | https://leetcode.com/problems/compare-version-numbers/"},m="0165 - Compare Version Numbers (Medium)",i={unversionedId:"0100-0199/compare-version-numbers-medium",id:"0100-0199/compare-version-numbers-medium",title:"0165 - Compare Version Numbers (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/compare-version-numbers/",source:"@site/solutions/0100-0199/0165-compare-version-numbers-medium.md",sourceDirName:"0100-0199",slug:"/0100-0199/compare-version-numbers-medium",permalink:"/solutions/0100-0199/compare-version-numbers-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0165-compare-version-numbers-medium.md",tags:[],version:"current",sidebarPosition:165,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/compare-version-numbers/"},sidebar:"tutorialSidebar",previous:{title:"0155 - Min Stack (Medium)",permalink:"/solutions/0100-0199/min-stack-medium"},next:{title:"0169 - Majority Element (Easy)",permalink:"/solutions/0100-0199/majority-element-easy"}},o={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Split",id:"approach-1-split",level:2}],l=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var c;const N={toc:p},k="wrapper";function u(e){let{components:a,...n}=e;return(0,r.kt)(k,(0,t.Z)({},N,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0165---compare-version-numbers-medium"},"0165 - Compare Version Numbers (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/compare-version-numbers/"},"https://leetcode.com/problems/compare-version-numbers/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given two version numbers, ",(0,r.kt)("inlineCode",{parentName:"p"},"version1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"version2"),", compare them."),(0,r.kt)("p",null,"Version numbers consist of ",(0,r.kt)("strong",{parentName:"p"},"one or more revisions")," joined by a dot ",(0,r.kt)("inlineCode",{parentName:"p"},"'.'"),". Each revision consists of ",(0,r.kt)("strong",{parentName:"p"},"digits")," and may contain leading ",(0,r.kt)("strong",{parentName:"p"},"zeros"),". Every revision contains ",(0,r.kt)("strong",{parentName:"p"},"at least one character"),". Revisions are ",(0,r.kt)("strong",{parentName:"p"},"0-indexed from left to right"),", with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example ",(0,r.kt)("inlineCode",{parentName:"p"},"2.5.33")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"0.1")," are valid version numbers."),(0,r.kt)("p",null,"To compare version numbers, compare their revisions in ",(0,r.kt)("strong",{parentName:"p"},"left-to-right order"),". Revisions are compared using their ",(0,r.kt)("strong",{parentName:"p"},"integer value ignoring any leading zeros"),". This means that revisions ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"001")," are considered ",(0,r.kt)("strong",{parentName:"p"},"equal"),". If a version number does not specify a revision at an index, then ",(0,r.kt)("strong",{parentName:"p"},"treat the revision as ",(0,r.kt)("inlineCode",{parentName:"strong"},"0")),". For example, version ",(0,r.kt)("inlineCode",{parentName:"p"},"1.0")," is less than version ",(0,r.kt)("inlineCode",{parentName:"p"},"1.1")," because their revision 0s are the same, but their revision 1s are ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," respectively, and ",(0,r.kt)("inlineCode",{parentName:"p"},"0 < 1"),"."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Return the following:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"version1 < version2"),", return ",(0,r.kt)("inlineCode",{parentName:"li"},"-1"),"."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"version1 > version2"),", return ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,r.kt)("li",{parentName:"ul"},"Otherwise, return ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: version1 = "1.01", version2 = "1.001"\nOutput: 0\nExplanation: Ignoring leading zeroes, both "01" and "001" represent the same integer "1".\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: version1 = "1.0", version2 = "1.0.0"\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as "0".\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: version1 = "0.1", version2 = "1.1"\nOutput: -1\nExplanation: version1\'s revision 0 is "0", while version2\'s revision 0 is "1". 0 < 1, so version1 < version2.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= version1.length, version2.length <= 500")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"version1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"version2")," only contain digits and ",(0,r.kt)("inlineCode",{parentName:"li"},"'.'"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"version1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"version2")," ",(0,r.kt)("strong",{parentName:"li"},"are valid version numbers"),"."),(0,r.kt)("li",{parentName:"ul"},"All the given revisions in ",(0,r.kt)("inlineCode",{parentName:"li"},"version1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"version2")," can be stored in a ",(0,r.kt)("strong",{parentName:"li"},"32-bit integer"),".")),(0,r.kt)("h2",{id:"approach-1-split"},"Approach 1: Split"),(0,r.kt)("p",null,'We split the input strings by "." and store the digit into a list. Then we pad 0s to the shortest list to make the length for both list equal. Then we can compare both list. In Python3, ',(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"c"),(0,r.kt)("mi",{parentName:"mrow"},"m"),(0,r.kt)("mi",{parentName:"mrow"},"p"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"a"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mi",{parentName:"mrow"},"b"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"cmp(a, b)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))," is gone so the equivalent for it is ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"a"),(0,r.kt)("mo",{parentName:"mrow"},">"),(0,r.kt)("mi",{parentName:"mrow"},"b"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"a"),(0,r.kt)("mo",{parentName:"mrow"},"<"),(0,r.kt)("mi",{parentName:"mrow"},"b"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(a > b) - (a < b)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},">"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"))))),"."),(0,r.kt)(l,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def compareVersion(self, version1: str, version2: str) -> int:\n        v1 = [int(i) for i in version1.split(".")]\n        v2 = [int(i) for i in version2.split(".")]\n        l1, l2 = len(v1), len(v2)\n        if l1 < l2: v1 += [0] * (l2 - l1)\n        else: v2 += [0] * (l1 - l2)\n        return (v1 > v2) - (v1 < v2)\n')))}u.isMDXComponent=!0}}]);