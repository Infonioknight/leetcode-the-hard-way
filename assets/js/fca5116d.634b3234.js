"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[76673],{3905:function(e,n,a){a.d(n,{Zo:function(){return l},kt:function(){return u}});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=t.createContext({}),p=function(e){var n=t.useContext(m),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},l=function(e){var n=p(e.components);return t.createElement(m.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=p(a),u=r,h=d["".concat(m,".").concat(u)]||d[u]||c[u]||i;return a?t.createElement(h,s(s({ref:n},l),{},{components:a})):t.createElement(h,s({ref:n},l))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=d;var o={};for(var m in n)hasOwnProperty.call(n,m)&&(o[m]=n[m]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},32277:function(e,n,a){a.r(n),a.d(n,{assets:function(){return l},contentTitle:function(){return m},default:function(){return f},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var t=a(87462),r=a(63366),i=(a(67294),a(3905)),s=["components"],o={description:"Author: @wingkwong | https://leetcode.com/problems/find-all-anagrams-in-a-string/",tags:["Hash Table","String","Sliding Window"]},m="0438 - Find All Anagrams in a String (Medium)",p={unversionedId:"0400-0499/find-all-anagrams-in-a-string-medium",id:"0400-0499/find-all-anagrams-in-a-string-medium",title:"0438 - Find All Anagrams in a String (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/find-all-anagrams-in-a-string/",source:"@site/solutions/0400-0499/0438-find-all-anagrams-in-a-string-medium.md",sourceDirName:"0400-0499",slug:"/0400-0499/find-all-anagrams-in-a-string-medium",permalink:"/solutions/0400-0499/find-all-anagrams-in-a-string-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0438-find-all-anagrams-in-a-string-medium.md",tags:[{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"String",permalink:"/solutions/tags/string"},{label:"Sliding Window",permalink:"/solutions/tags/sliding-window"}],version:"current",sidebarPosition:438,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-all-anagrams-in-a-string/",tags:["Hash Table","String","Sliding Window"]},sidebar:"tutorialSidebar",previous:{title:"0435 - Non-overlapping Intervals (Medium)",permalink:"/solutions/0400-0499/non-overlapping-intervals-medium"},next:{title:"0441 - Arranging Coins (Easy)",permalink:"/solutions/0400-0499/arranging-coins-easy"}},l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window",id:"approach-1-sliding-window",level:2}],d=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=d("Tabs"),h=d("TabItem"),g=d("SolutionAuthor"),k={toc:c};function f(e){var n=e.components,a=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,t.Z)({},k,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0438---find-all-anagrams-in-a-string-medium"},"0438 - Find All Anagrams in a String (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-all-anagrams-in-a-string/"},"https://leetcode.com/problems/find-all-anagrams-in-a-string/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given two strings ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"p"),", return ",(0,i.kt)("em",{parentName:"p"},"an array of all the start indices of")," ",(0,i.kt)("inlineCode",{parentName:"p"},"p"),(0,i.kt)("em",{parentName:"p"},"'s anagrams in")," ",(0,i.kt)("inlineCode",{parentName:"p"},"s"),". You may return the answer in ",(0,i.kt)("strong",{parentName:"p"},"any order"),"."),(0,i.kt)("p",null,"An ",(0,i.kt)("strong",{parentName:"p"},"Anagram")," is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "cbaebabacd", p = "abc"\nOutput: [0,6]\nExplanation:\nThe substring with start index = 0 is "cba", which is an anagram of "abc".\nThe substring with start index = 6 is "bac", which is an anagram of "abc".\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "abab", p = "ab"\nOutput: [0,1,2]\nExplanation:\nThe substring with start index = 0 is "ab", which is an anagram of "ab".\nThe substring with start index = 1 is "ba", which is an anagram of "ab".\nThe substring with start index = 2 is "ab", which is an anagram of "ab".\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= s.length, p.length <= 3 * 10^4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"s")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"p")," consist of lowercase English letters.")),(0,i.kt)("h2",{id:"approach-1-sliding-window"},"Approach 1: Sliding Window"),(0,i.kt)("p",null,"First we build the count ",(0,i.kt)("inlineCode",{parentName:"p"},"m2")," of each character in string ",(0,i.kt)("inlineCode",{parentName:"p"},"p"),". Then we keep the window size as ",(0,i.kt)("inlineCode",{parentName:"p"},"m"),". If it is within the window, then we update ",(0,i.kt)("inlineCode",{parentName:"p"},"m1")," until the pointer ",(0,i.kt)("inlineCode",{parentName:"p"},"j")," is out of the window. If ",(0,i.kt)("inlineCode",{parentName:"p"},"m1")," is equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"m2"),", then we can add the current ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," to the answer vector. After that, we need to move decrease ",(0,i.kt)("inlineCode",{parentName:"p"},"m1[s[i] - 'a']]")," by 1 as the character ",(0,i.kt)("inlineCode",{parentName:"p"},"s[i]")," will be out of the window."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Time Complexity: ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"O"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,i.kt)("mi",{parentName:"mrow"},"n"),(0,i.kt)("mo",{parentName:"mrow"},"+"),(0,i.kt)("mi",{parentName:"mrow"},"m"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n + m)")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,i.kt)("span",{parentName:"span",className:"mopen"},"("),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,i.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,i.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,i.kt)("span",{parentName:"span",className:"mclose"},")"))))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Space Complexity: ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"O"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,i.kt)("mn",{parentName:"mrow"},"1"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(1)")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,i.kt)("span",{parentName:"span",className:"mopen"},"("),(0,i.kt)("span",{parentName:"span",className:"mord"},"1"),(0,i.kt)("span",{parentName:"span",className:"mclose"},")")))))))),(0,i.kt)(u,{mdxType:"Tabs"},(0,i.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n public:\n  vector<int> findAnagrams(string s, string p) {\n      vector<int> ans, m1(26, 0), m2(26, 0);\n      int n = (int) s.size(), m = (int) p.size(), j = 0;\n      for (auto x : p) m2[x - 'a']++;\n      for (int i = 0; i < n; i++) {\n          while (j < n && j - i + 1 <= m) m1[s[j++] - 'a']++;\n          if (m1 == m2) ans.push_back(i);\n          m1[s[i] - 'a']--;\n      }\n      return ans;\n  }\n};\n"))),(0,i.kt)(h,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        # sliding window -> substring with same set of freq of chars\n        ans = []\n        # cnt_s: store frequency of characters in s\n        # cnt_p: store frequency of characters in p\n        cnt_s, cnt_p = [0] * 26, [0] * 26\n        n, m = len(s), len(p)\n        j = 0\n        # count frequency of characters in p\n        for x in p:\n            cnt_p[ord(x) - ord('a')] += 1\n        for i in range(n):\n            # add s[j] to the window if the window is not full\n            while j < n and j - i + 1 <= m:\n                cnt_s[ord(s[j]) - ord('a')] += 1\n                j += 1\n            # check if both frequency matches\n            if cnt_s == cnt_p:\n                # i is the starting index of the window\n                ans.append(i)\n            # remove the leftmost element from the window\n            cnt_s[ord(s[i]) - ord('a')] -= 1\n        return ans\n")))))}f.isMDXComponent=!0}}]);