"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[48355],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return c}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=p(n),c=a,h=d["".concat(s,".").concat(c)]||d[c]||u[c]||o;return n?r.createElement(h,l(l({ref:t},m),{},{components:n})):r.createElement(h,l({ref:t},m))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1575:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return d}});var r,a=n(87462),o=n(63366),l=(n(67294),n(3905)),i=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/all-elements-in-two-binary-search-trees/"},p="1305 - All Elements in Two Binary Search Trees (Medium)",m={unversionedId:"1300-1399/all-elements-in-two-binary-search-trees-medium",id:"1300-1399/all-elements-in-two-binary-search-trees-medium",title:"1305 - All Elements in Two Binary Search Trees (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/all-elements-in-two-binary-search-trees/",source:"@site/solutions/1300-1399/1305-all-elements-in-two-binary-search-trees-medium.md",sourceDirName:"1300-1399",slug:"/1300-1399/all-elements-in-two-binary-search-trees-medium",permalink:"/solutions/1300-1399/all-elements-in-two-binary-search-trees-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1300-1399/1305-all-elements-in-two-binary-search-trees-medium.md",tags:[],version:"current",sidebarPosition:1305,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/all-elements-in-two-binary-search-trees/"},sidebar:"tutorialSidebar",previous:{title:"1300 - 1399",permalink:"/solutions/category/1300---1399"},next:{title:"1328 - Break a Palindrome (Medium)",permalink:"/solutions/1300-1399/break-a-palindrome-medium"}},u={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS Traversal and Sorting",id:"approach-1-dfs-traversal-and-sorting",level:2},{value:"Approach 2: In-order Traversal + Merging",id:"approach-2-in-order-traversal--merging",level:2}],c=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)}),h={toc:d};function k(e){var t=e.components,n=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"1305---all-elements-in-two-binary-search-trees-medium"},"1305 - All Elements in Two Binary Search Trees (Medium)"),(0,l.kt)("h2",{id:"problem-link"},"Problem Link"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/all-elements-in-two-binary-search-trees/"},"https://leetcode.com/problems/all-elements-in-two-binary-search-trees/")),(0,l.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,l.kt)("p",null,"Given two binary search trees ",(0,l.kt)("inlineCode",{parentName:"p"},"root1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"root2"),", return ",(0,l.kt)("em",{parentName:"p"},"a list containing all the integers from both trees sorted in ",(0,l.kt)("strong",{parentName:"em"},"ascending")," order"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example 1:")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2019/12/18/q2-e1.png",alt:null})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: root1 = [2,1,4], root2 = [1,0,3]\nOutput: [0,1,1,2,3,4]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example 2:")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2019/12/18/q2-e5-.png",alt:null})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: root1 = [1,null,8], root2 = [8,1]\nOutput: [1,1,8,8]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constraints:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The number of nodes in each tree is in the range ",(0,l.kt)("inlineCode",{parentName:"li"},"[0, 5000]"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-10^5 <= Node.val <= 10^5"))),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Prerequisite")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("ul",{parentName:"div"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"../../tutorials/graph-theory/binary-tree"},"Binary Tree"))))),(0,l.kt)("h2",{id:"approach-1-dfs-traversal-and-sorting"},"Approach 1: DFS Traversal and Sorting"),(0,l.kt)("p",null,"In this problem, we can use either one to traverse all nodes and put them into a common array. We sort the array at the end."),(0,l.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> s;\n    \n    void dfs(TreeNode* node) {\n        if (node == NULL) return;\n        dfs(node->left);\n        s.push_back(node->val);\n        dfs(node->right);\n    }\n    \n    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {\n        dfs(root1);\n        dfs(root2);\n        sort(s.begin(), s.end());\n        return s;\n    }\n};\n")),(0,l.kt)("p",null,"However, we can see the in-order traversal is faster than the other two. This is because the array is already sorted after the traversal for binary tree. In example 1, after the traversal, we will have ","[","1, 2, 4] and ","[","0, 1, 3]."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Traversal"),(0,l.kt)("th",{parentName:"tr",align:null},"Runtime"),(0,l.kt)("th",{parentName:"tr",align:null},"Memory"),(0,l.kt)("th",{parentName:"tr",align:null},"Language"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pre-order"),(0,l.kt)("td",{parentName:"tr",align:null},"309 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"85.4 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"cpp")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"In-order"),(0,l.kt)("td",{parentName:"tr",align:null},"132 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"85.3 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"cpp")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Post-order"),(0,l.kt)("td",{parentName:"tr",align:null},"211 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"85.4 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"cpp")))),(0,l.kt)("h2",{id:"approach-2-in-order-traversal--merging"},"Approach 2: In-order Traversal + Merging"),(0,l.kt)("p",null,'As we know In-order traversal will make the array sorted, the remaining problem is same as "merging two sorted arrays into one". '),(0,l.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void inorder(TreeNode* node, vector<int>& res) {\n        if (node == NULL) return;\n        inorder(node->left, res);\n        res.push_back(node->val);\n        inorder(node->right, res);\n    }\n    \n    vector<int> merge(vector<int>& a, vector<int>& b) {\n        vector<int> res;\n        int n = (int) a.size(), m = (int) b.size();\n        int i = 0, j = 0;\n        while (i < n && j < m) {\n            if (a[i] < b[j]) res.push_back(a[i++]);\n            else res.push_back(b[j++]);\n        }\n        while (i < n) res.push_back(a[i++]);\n        while (j < m) res.push_back(b[j++]);\n        return res;\n    }\n    \n    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {\n        vector<int> a, b;\n        inorder(root1, a); inorder(root2, b);\n        return merge(a, b);\n    }\n};\n")))}k.isMDXComponent=!0}}]);