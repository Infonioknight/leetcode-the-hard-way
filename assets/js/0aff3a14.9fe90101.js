"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[50635],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),l=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),u=l(a),d=r,k=u["".concat(o,".").concat(d)]||u[d]||c[d]||s;return a?n.createElement(k,i(i({ref:t},p),{},{components:a})):n.createElement(k,i({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=d;var m={};for(var o in t)hasOwnProperty.call(t,o)&&(m[o]=t[o]);m.originalType=e,m[u]="string"==typeof e?e:r,i[1]=m;for(var l=2;l<s;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},41053:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>f,frontMatter:()=>s,metadata:()=>m,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const s={description:"Author: @wingkwong | https://leetcode.com/problems/subarrays-distinct-element-sum-of-squares-i/"},i="2913 - Subarrays Distinct Element Sum of Squares I (Easy)",m={unversionedId:"2900-2999/subarrays-distinct-element-sum-of-squares-i-easy",id:"2900-2999/subarrays-distinct-element-sum-of-squares-i-easy",title:"2913 - Subarrays Distinct Element Sum of Squares I (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/subarrays-distinct-element-sum-of-squares-i/",source:"@site/solutions/2900-2999/2913-subarrays-distinct-element-sum-of-squares-i-easy.md",sourceDirName:"2900-2999",slug:"/2900-2999/subarrays-distinct-element-sum-of-squares-i-easy",permalink:"/solutions/2900-2999/subarrays-distinct-element-sum-of-squares-i-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2900-2999/2913-subarrays-distinct-element-sum-of-squares-i-easy.md",tags:[],version:"current",sidebarPosition:2913,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/subarrays-distinct-element-sum-of-squares-i/"},sidebar:"tutorialSidebar",previous:{title:"2903 - Find Indices With Index and Value Difference I (Easy)",permalink:"/solutions/2900-2999/find-indices-with-index-and-value-difference-i-easy"},next:{title:"2914 - Minimum Number of Changes to Make Binary String Beautiful (Medium)",permalink:"/solutions/2900-2999/minimum-number-of-changes-to-make-binary-string-beautiful-medium"}},o={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=p("Tabs"),c=p("TabItem"),d=p("SolutionAuthor"),k={toc:l},h="wrapper";function f(e){let{components:t,...a}=e;return(0,r.kt)(h,(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2913---subarrays-distinct-element-sum-of-squares-i-easy"},"2913 - Subarrays Distinct Element Sum of Squares I (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/subarrays-distinct-element-sum-of-squares-i/"},"https://leetcode.com/problems/subarrays-distinct-element-sum-of-squares-i/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given a ",(0,r.kt)("strong",{parentName:"p"},"0-indexed"),"integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"distinct count")," of a subarray of ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," is defined as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Let ",(0,r.kt)("inlineCode",{parentName:"li"},"nums[i..j]")," be a subarray of ",(0,r.kt)("inlineCode",{parentName:"li"},"nums")," consisting of all the indices from ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"j")," such that ",(0,r.kt)("inlineCode",{parentName:"li"},"0 <= i <= j < nums.length"),". Then the number of distinct values in ",(0,r.kt)("inlineCode",{parentName:"li"},"nums[i..j]")," is called the distinct count of ",(0,r.kt)("inlineCode",{parentName:"li"},"nums[i..j]"),".")),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the sum of the ",(0,r.kt)("strong",{parentName:"em"},"squares")," of ",(0,r.kt)("strong",{parentName:"em"},"distinct counts")," of all subarrays of"),(0,r.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,r.kt)("p",null,"A subarray is a contiguous ",(0,r.kt)("strong",{parentName:"p"},"non-empty")," sequence of elements within an array."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [1,2,1]\nOutput: 15\nExplanation: Six possible subarrays are:\n[1]: 1 distinct value\n[2]: 1 distinct value\n[1]: 1 distinct value\n[1,2]: 2 distinct values\n[2,1]: 2 distinct values\n[1,2,1]: 2 distinct values\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [1,1]\nOutput: 3\nExplanation: Three possible subarrays are:\n[1]: 1 distinct value\n[1]: 1 distinct value\n[1,1]: 1 distinct value\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 100")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 100"))),(0,r.kt)("h2",{id:"approach-1-brute-force"},"Approach 1: Brute Force"),(0,r.kt)("p",null,"Since the constraints are small, we can brute force each subarray by using two loops. For each element, we put it to a hash map. If the occurrence is ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mn",{parentName:"mrow"},"1")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"))))),", meaning this element is first appeared. We increase the distinct counts ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"c"),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mi",{parentName:"mrow"},"t")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"cnt")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6151em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t")))))," by ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mn",{parentName:"mrow"},"1")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"))))),". We calculate the sum of squares accordingly."),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int sumCounts(vector<int>& nums) {\n        int n = nums.size(), ans = 0;\n        for (int i = 0; i < n; i++) {\n            unordered_map<int, int> m;\n            int cnt = 0;\n            for (int j = i; j < n; j++) {\n                if (++m[nums[j]] == 1) cnt += 1;\n                ans += cnt * cnt;\n            }\n        }\n        return ans;\n    }\n};\n")))))}f.isMDXComponent=!0}}]);