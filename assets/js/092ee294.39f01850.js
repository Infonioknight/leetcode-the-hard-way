"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[77061],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),h=u(n),c=r,m=h["".concat(s,".").concat(c)]||h[c]||p[c]||a;return n?o.createElement(m,i(i({ref:t},d),{},{components:n})):o.createElement(m,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},83727:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return b},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var o=n(87462),r=n(63366),a=(n(67294),n(3905)),i=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/count-good-nodes-in-binary-tree/",tags:["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},s="1448 - Count Good Nodes in Binary Tree (Medium)",u={unversionedId:"1400-1499/count-good-nodes-in-binary-tree-medium",id:"1400-1499/count-good-nodes-in-binary-tree-medium",title:"1448 - Count Good Nodes in Binary Tree (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/count-good-nodes-in-binary-tree/",source:"@site/solutions/1400-1499/1448-count-good-nodes-in-binary-tree-medium.md",sourceDirName:"1400-1499",slug:"/1400-1499/count-good-nodes-in-binary-tree-medium",permalink:"/solutions/1400-1499/count-good-nodes-in-binary-tree-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1400-1499/1448-count-good-nodes-in-binary-tree-medium.md",tags:[{label:"Tree",permalink:"/solutions/tags/tree"},{label:"Depth-First Search",permalink:"/solutions/tags/depth-first-search"},{label:"Breadth-First Search",permalink:"/solutions/tags/breadth-first-search"},{label:"Binary Tree",permalink:"/solutions/tags/binary-tree"}],version:"current",sidebarPosition:1448,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/count-good-nodes-in-binary-tree/",tags:["Tree","Depth-First Search","Breadth-First Search","Binary Tree"]},sidebar:"tutorialSidebar",previous:{title:"1443 - Minimum Time to Collect All Apples in a Tree (Medium)",permalink:"/solutions/1400-1499/minimum-time-to-collect-all-apples-in-a-tree"},next:{title:"1457 - Pseudo-Palindromic Paths in a Binary Tree (Medium)",permalink:"/solutions/1400-1499/pseudo-palindromic-paths-in-a-binary-tree-medium"}},d={},p=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}],h=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)}},c=h("Tabs"),m=h("TabItem"),f=h("SolutionAuthor"),g={toc:p};function b(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1448---count-good-nodes-in-binary-tree-medium"},"1448 - Count Good Nodes in Binary Tree (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given a binary tree ",(0,a.kt)("inlineCode",{parentName:"p"},"root"),", a node ",(0,a.kt)("em",{parentName:"p"},"X")," in the tree is named\xa0",(0,a.kt)("strong",{parentName:"p"},"good")," if in the path from root to ",(0,a.kt)("em",{parentName:"p"},"X")," there are no nodes with a value ",(0,a.kt)("em",{parentName:"p"},"greater than")," X."),(0,a.kt)("p",null,"Return the number of ",(0,a.kt)("strong",{parentName:"p"},"good")," nodes in the binary tree."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [3,1,4,3,null,1,5]\nOutput: 4\nExplanation: Nodes in blue are good.\nRoot Node (3) is always a good node.\nNode 4 -> (3,4) is the maximum value in the path starting from the root.\nNode 5 -> (3,4,5) is the maximum value in the path\nNode 3 -> (3,1,3) is the maximum value in the path.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: root = [3,3,null,4,2]\nOutput: 3\nExplanation: Node 2 -> (3, 3, 2) is not good, because "3" is higher than it.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1]\nOutput: 1\nExplanation: Root is considered as good.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the binary tree is in the range\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 10^5]"),"."),(0,a.kt)("li",{parentName:"ul"},"Each node's value is between ",(0,a.kt)("inlineCode",{parentName:"li"},"[-10^4, 10^4]"),".")),(0,a.kt)("h2",{id:"approach-1-dfs"},"Approach 1: DFS"),(0,a.kt)(c,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Time complexity: O(N) as we visit every node only once.\n// Space complexity: O(H) where H is the height of the tree.\n// In the worst case, H would be N given that the tree only has one path.\nclass Solution {\npublic:\n    // the idea is to record the max value from the root to the node\n    // we can first initialise mx as INT_MIN \n    int goodNodes(TreeNode* root, int mx = INT_MIN) {\n        // if the root is null, we return 0\n        if (!root) return 0;\n        // then we can break it into 3 parts\n        // the first part is the current node\n        // if the current node value is greater than the maximum value so far\n        // that means the current node is a good node\n        // hence we add 1, else add 0\n        return (mx <= root->val ? 1 : 0) + \n                // the second part is the result of the left sub-tree\n                // we traverse it with the updated maximum value at the current point\n                // we don't need to check if root->left is null or not here\n                // as we cover the null case in the first line\n                goodNodes(root->left, max(root->val, mx)) + \n                // the last part is the result of the right sub-tree\n                // we traverse it with the updated maximum value at the current point\n                // we don't need to check if root->right is null or not here\n                // as we cover the null case in the first line\n                goodNodes(root->right, max(root->val, mx));\n    }\n};\n"))),(0,a.kt)(m,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(f,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # Iterative Depth-First Search\n    # We can simply solve this problem by running a DFS, and passing down a max\n    # value to each node. A node is only good of it is >= to this max value.\n    # Time Complexity: O(n). We are going to have to precess each node.\n    # Space Complexity: O(h). Using a stack, we only ever have the current path\n    # inside our stack.\n    def goodNodes(self, root: TreeNode) -> int:\n        # Early termination\n        if not root:\n            return 0\n        # initialize return integer\n        num_good_nodes = 0\n        # initialize our stack, each item will be a tuple (node, max_value)\n        # where the max value is the max value we have seen thus far going down\n        # the path to the node.\n        stack = [(root, root.val)]\n        # while our stack still has nodes inside.\n        while stack:\n            # pop off the node and the highest value we have seen thus far.\n            node, high = stack.pop()\n            # Increment our num_good_nodes integer iff our current nodes value\n            # is greater than or equal to the highest node we have seen.\n            if node.val >= high:\n                num_good_nodes += 1\n            # if node has a left child\n            if node.left:\n                # add left child to the stack with the highest value.\n                # highest value will be larger of the current nodes value and\n                # the highest value that was passed to this iteration.\n                stack.append((node.left, max(node.val,high)))\n            # if the node has a right child\n            if node.right:\n                # add right child, make sure to update the high value.\n                stack.append((node.right, max(node.val, high)))\n        # return the number of good nodse that we calculated above.\n        return num_good_nodes\n")))))}b.isMDXComponent=!0}}]);