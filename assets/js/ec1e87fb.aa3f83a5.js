"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[23287],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var l=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,l,i=function(e,n){if(null==e)return{};var t,l,i={},o=Object.keys(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=l.createContext({}),p=function(e){var n=l.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return l.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},m=l.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?l.createElement(h,a(a({ref:n},c),{},{components:t})):l.createElement(h,a({ref:n},c))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[u]="string"==typeof e?e:i,a[1]=r;for(var p=2;p<o;p++)a[p]=t[p];return l.createElement.apply(null,a)}return l.createElement.apply(null,t)}m.displayName="MDXCreateElement"},52992:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var l=t(87462),i=(t(67294),t(3905));const o={description:"Author: @lonyehan, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/linked-list-cycle/",tags:["Hash Table","Linked List","Two Pointers"]},a="0141 - Linked List Cycle (Easy)",r={unversionedId:"0100-0199/linked-list-cycle",id:"0100-0199/linked-list-cycle",title:"0141 - Linked List Cycle (Easy)",description:"Author: @lonyehan, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/linked-list-cycle/",source:"@site/solutions/0100-0199/0141-linked-list-cycle.md",sourceDirName:"0100-0199",slug:"/0100-0199/linked-list-cycle",permalink:"/solutions/0100-0199/linked-list-cycle",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0141-linked-list-cycle.md",tags:[{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"Linked List",permalink:"/solutions/tags/linked-list"},{label:"Two Pointers",permalink:"/solutions/tags/two-pointers"}],version:"current",sidebarPosition:141,frontMatter:{description:"Author: @lonyehan, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/linked-list-cycle/",tags:["Hash Table","Linked List","Two Pointers"]},sidebar:"tutorialSidebar",previous:{title:"0139 - Word Break (Medium)",permalink:"/solutions/0100-0199/word-break-medium"},next:{title:"0143 - Reorder List (Medium)",permalink:"/solutions/0100-0199/reorder-list-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two Pointers",id:"approach-1-two-pointers",level:2}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},u=c("Tabs"),d=c("TabItem"),m=c("SolutionAuthor"),h={toc:p},k="wrapper";function f(e){let{components:n,...t}=e;return(0,i.kt)(k,(0,l.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0141---linked-list-cycle-easy"},"0141 - Linked List Cycle (Easy)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/linked-list-cycle/"},"https://leetcode.com/problems/linked-list-cycle/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given ",(0,i.kt)("inlineCode",{parentName:"p"},"head"),", the head of a linked list, determine if the linked list has a cycle in it."),(0,i.kt)("p",null,"There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the ",(0,i.kt)("inlineCode",{parentName:"p"},"next")," pointer. Internally, ",(0,i.kt)("inlineCode",{parentName:"p"},"pos")," is used to denote the index of the node that tail's ",(0,i.kt)("inlineCode",{parentName:"p"},"next")," pointer is connected to. ",(0,i.kt)("strong",{parentName:"p"},"Note that ",(0,i.kt)("inlineCode",{parentName:"strong"},"pos")," is not passed as a parameter"),"."),(0,i.kt)("p",null,"Return ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," ",(0,i.kt)("em",{parentName:"p"},"if there is a cycle in the linked list"),". Otherwise, return ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The number of the nodes in the list is in the range ",(0,i.kt)("inlineCode",{parentName:"li"},"[0, 10^4]"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-10^5 <= Node.val <= 10^5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pos")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"-1")," or a ",(0,i.kt)("strong",{parentName:"li"},"valid index")," in the linked-list.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Follow up:")," Can you solve it using ",(0,i.kt)("inlineCode",{parentName:"p"},"O(1)")," (i.e. constant) memory?"),(0,i.kt)("h2",{id:"approach-1-two-pointers"},"Approach 1: Two Pointers"),(0,i.kt)(u,{mdxType:"Tabs"},(0,i.kt)(d,{value:"cs",label:"C#",mdxType:"TabItem"},(0,i.kt)(m,{name:"@lonyehan",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public bool HasCycle(ListNode head) {\n        ListNode slowPointer = head;\n        ListNode quickPointer = head;\n        \n        if(head == null) return false;\n        \n        while(head != null) {\n            // slow pointer, move one step each time.\n            slowPointer = slowPointer.next;\n            if(slowPointer == null) return false;\n            \n            // quick pointer, move two steps each time.\n            quickPointer = quickPointer?.next?.next;\n            if(quickPointer == null) return false;\n            \n            // slow pointer meets quick pointer means that there is a cycle in this linked list\n            if(slowPointer == quickPointer) return true;\n        }\n        \n        return false;\n    }\n}\n"))),(0,i.kt)(d,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)(m,{name:"@vale-c",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        slowPointer = head\n        quickPointer = head\n        \n        if head == None:\n            return False\n        \n        while head != None:\n            # slow pointer, move one step each time.\n            slowPointer = slowPointer.next\n            if slowPointer == None:\n                return False\n            \n            # quick pointer, move two steps each time.\n            quickPointer = quickPointer.next.next if quickPointer.next != None else None\n            if quickPointer == None:\n                return False\n            \n            # slow pointer meets quick pointer means that there is a cycle in this linked list\n            if slowPointer == quickPointer:\n                return True\n        \n        return False\n"))),(0,i.kt)(d,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(m,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\n// Time complexity: O(n), where n - # of nodes in the list\n// Space complexity: O(1)\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        if (head == null) return false;\n        // Fast & Slow pointer\n        ListNode slow = head;\n        ListNode fast = head;\n        // Fast Reference to check if it's not null, because it's traverse twice as fast as slow\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n            // If both meet at the same node then there is a loop\n            if (slow == fast) {\n                return true;\n            }\n        }\n        // If no loop, fast pointer at the end reached it's last node null pointer\n        return false;\n    }\n}\n"))),(0,i.kt)(d,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)(m,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar hasCycle = function(head) {\n    let slow = head\n    let fast = head \n\n    while (fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next;\n        if (slow == fast) {\n            return true;\n        }\n    }\n    return false;\n};\n"))),(0,i.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(m,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n        while (fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n            if (slow == fast) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n")))))}f.isMDXComponent=!0}}]);