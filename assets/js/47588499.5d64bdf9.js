"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[97406],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),c=s(n),d=i,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||a;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u.mdxType="string"==typeof e?e:i,o[1]=u;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},68558:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return c}});var r,i=n(87462),a=n(63366),o=(n(67294),n(3905)),u=["components"],p={description:"Author: @wingkwong | https://leetcode.com/problems/find-pivot-index/",tags:["Array","Prefix Sum"]},s="0724 - Find Pivot Index (Easy)",l={unversionedId:"0700-0799/find-pivot-index-easy",id:"0700-0799/find-pivot-index-easy",title:"0724 - Find Pivot Index (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/find-pivot-index/",source:"@site/solutions/0700-0799/0724-find-pivot-index-easy.md",sourceDirName:"0700-0799",slug:"/0700-0799/find-pivot-index-easy",permalink:"/solutions/0700-0799/find-pivot-index-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0700-0799/0724-find-pivot-index-easy.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Prefix Sum",permalink:"/solutions/tags/prefix-sum"}],version:"current",sidebarPosition:724,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-pivot-index/",tags:["Array","Prefix Sum"]},sidebar:"tutorialSidebar",previous:{title:"0718 - Maximum Length of Repeated Subarray (Medium)",permalink:"/solutions/0700-0799/maximum-length-of-repeated-subarray-medium"},next:{title:"0732 - My Calendar III (Hard)",permalink:"/solutions/0700-0799/my-calendar-iii-hard"}},m={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Prefix Sum",id:"approach-1-prefix-sum",level:2},{value:"Approach 2: Prefix Sum with Space Optimizated",id:"approach-2-prefix-sum-with-space-optimizated",level:2}],d=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}),f={toc:c};function h(e){var t=e.components,n=(0,a.Z)(e,u);return(0,o.kt)("wrapper",(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0724---find-pivot-index-easy"},"0724 - Find Pivot Index (Easy)"),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given an array of integers ",(0,o.kt)("inlineCode",{parentName:"p"},"nums"),", calculate the ",(0,o.kt)("strong",{parentName:"p"},"pivot index")," of this array."),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"pivot index")," is the index where the sum of all the numbers ",(0,o.kt)("strong",{parentName:"p"},"strictly")," to the left of the index is equal to the sum of all the numbers ",(0,o.kt)("strong",{parentName:"p"},"strictly")," to the index's right."),(0,o.kt)("p",null,"If the index is on the left edge of the array, then the left sum is ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," because there are no elements to the left. This also applies to the right edge of the array."),(0,o.kt)("p",null,"Return *the ",(0,o.kt)("strong",{parentName:"p"},"leftmost pivot index*"),". If no such index exists, return -1."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1,7,3,6,5,6]\nOutput: 3\nExplanation:\nThe pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3]\nOutput: -1\nExplanation:\nThere is no index that satisfies the conditions in the problem statement.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [2,1,-1]\nOutput: 0\nExplanation:\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 10^4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-1000 <= nums[i] <= 1000"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," This question is the same as\xa01991:\xa0",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-the-middle-index-in-array/"},"https://leetcode.com/problems/find-the-middle-index-in-array/")),(0,o.kt)("h2",{id:"approach-1-prefix-sum"},"Approach 1: Prefix Sum"),(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int n = nums.size(), totalSum = 0;\n        vector<int> pref(n + 1, 0);\n        // Example 1\n        // pref = [0, 1, 8, 11, 17, 22, 28]\n        // totalSum = 28\n        for (int i = 0; i < n; i++) pref[i + 1] = pref[i] + nums[i], totalSum += nums[i];\n        for (int i = 0; i < n; i++) {\n            // if the current number is nums[i], \n            // then we can get the left part easily - just pref[i]\n            // the right part would be the total sum - pref[i] - the current number\n            int leftSum = pref[i], rightSum = sum - left - nums[i];\n            // if the left sum is same as the right sum,\n            // then i is the pivot index\n            if(leftSum == rightSum) {\n                return i;\n            }\n        }\n        // no such index exists\n        return -1;\n    }\n};\n")),(0,o.kt)("h2",{id:"approach-2-prefix-sum-with-space-optimizated"},"Approach 2: Prefix Sum with Space Optimizated"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int n = nums.size(), leftSum = 0, totalSum = 0;\n        // calculate the total sum\n        // alternative, we can use `accumulate(nums.begin(), nums.end(), 0);`\n        for (int i = 0; i < n; i++) totalSum += nums[i];\n        for (int i = 0; i < n; i++) {\n            // if the current number is nums[i], \n            // then we can get the left part easily - i.e leftSum\n            // the right part would be the total sum - leftSum - the current number\n            int rightSum = totalSum - leftSum - nums[i];\n            // if the left sum is same as the right sum,\n            // then i is the pivot index\n            if(leftSum == rightSum) {\n                return i;\n            }\n            // add the current number to leftSum\n            leftSum += nums[i];\n        }\n        // no such index exists\n        return -1;\n    }\n};\n")))}h.isMDXComponent=!0}}]);