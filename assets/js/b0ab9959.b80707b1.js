"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[71765],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),h=l(n),u=o,m=h["".concat(i,".").concat(u)]||h[u]||c[u]||a;return n?r.createElement(m,s(s({ref:t},d),{},{components:n})):r.createElement(m,s({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=u;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[h]="string"==typeof e?e:o,s[1]=p;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},19849:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/handshakes-that-dont-cross/"},s="1259 - Handshakes That Don't Cross (Hard)",p={unversionedId:"1200-1299/handshakes-that-dont-cross-hard",id:"1200-1299/handshakes-that-dont-cross-hard",title:"1259 - Handshakes That Don't Cross (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/handshakes-that-dont-cross/",source:"@site/solutions/1200-1299/1259-handshakes-that-dont-cross-hard.md",sourceDirName:"1200-1299",slug:"/1200-1299/handshakes-that-dont-cross-hard",permalink:"/solutions/1200-1299/handshakes-that-dont-cross-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1200-1299/1259-handshakes-that-dont-cross-hard.md",tags:[],version:"current",sidebarPosition:1259,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/handshakes-that-dont-cross/"},sidebar:"tutorialSidebar",previous:{title:"1235 - Maximum Profit in Job Scheduling (Hard)",permalink:"/solutions/1200-1299/maximum-profit-in-job-scheduling-hard"},next:{title:"1269 - Number of Ways to Stay in the Same Place After Some Steps (Hard)",permalink:"/solutions/1200-1299/number-of-ways-to-stay-in-the-same-place-after-some-steps-hard"}},i={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],d=(h="SolutionAuthor",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var h;const c={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1259---handshakes-that-dont-cross-hard"},"1259 - Handshakes That Don't Cross (Hard)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/handshakes-that-dont-cross/"},"https://leetcode.com/problems/handshakes-that-dont-cross/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given an ",(0,o.kt)("strong",{parentName:"p"},"even")," number of people ",(0,o.kt)("inlineCode",{parentName:"p"},"numPeople")," that stand around a circle and each person shakes hands with someone else so that there are ",(0,o.kt)("inlineCode",{parentName:"p"},"numPeople / 2")," handshakes total."),(0,o.kt)("p",null,"Return ",(0,o.kt)("em",{parentName:"p"},"the number of ways these handshakes could occur such that none of the handshakes cross"),"."),(0,o.kt)("p",null,"Since the answer could be very large, return it ",(0,o.kt)("strong",{parentName:"p"},"modulo")," ",(0,o.kt)("inlineCode",{parentName:"p"},"109 + 7"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2019/07/11/5125_example_2.png",alt:null})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: numPeople = 4\nOutput: 2\nExplanation: There are two ways to do it, the first way is [(1,2),(3,4)] and the second one is [(2,3),(4,1)].\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2019/07/11/5125_example_3.png",alt:null})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: numPeople = 6\nOutput: 5\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"2 <= numPeople <= 1000")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"numPeople")," is even.")),(0,o.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,o.kt)("p",null,"Person 1 can shake hand with person with even number but not with odd number because every time we need to divide the group into two sets. For example, if person 1 shakes hand with person 2, then there is an empty set and a set of people with numbers from 3 to n. If person 1 shakes hand with person 4, then the first set is person 2 + person 3 and the second set is from 5 to n. At the end, we would have a set from person 2 to n - 1 and an empty set."),(0,o.kt)("p",null,"In general, let $$dp","[i]","$$ be the number of ways these handshakes could occur such that none of the handshakes cross of for $$i$$ people. If person $$i$$ shakes hand with person $$j$$, then we could divide into two sets - one from 2 to j - 1 and another one from j - 1 to i. The product of them would be the contribution to $$dp","[i]","$$."),(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int numberOfWays(int n) {\n        int M = 1e9 + 7;\n        vector<long long> dp(n + 1, 0);\n        dp[0] = 1;\n        for (int i = 2; i <= n; i += 2) {\n            for (int j = 2; j <= i; j += 2) {\n                // two sets : \n                // 1. [2 .. j - 1] = j - 1 - 2 + 1 = j - 2\n                // 2. [j + 1 .. i] = i - (j + 1) + 1 = i - j\n                dp[i] = (dp[i] + (dp[j - 2] * dp[i - j])) % M;\n            }\n        }\n        return dp[n];\n    }\n};\n")))}m.isMDXComponent=!0}}]);