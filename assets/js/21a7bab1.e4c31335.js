"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[57784],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,h=c["".concat(p,".").concat(d)]||c[d]||u[d]||i;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9348:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/nearest-exit-from-entrance-in-maze/",tags:["Array","Breadth-First Search","Matrix"]},o="1926 - Nearest Exit from Entrance in Maze (Medium)",l={unversionedId:"1900-1999/nearest-exit-from-entrance-in-maze-medium",id:"1900-1999/nearest-exit-from-entrance-in-maze-medium",title:"1926 - Nearest Exit from Entrance in Maze (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/nearest-exit-from-entrance-in-maze/",source:"@site/solutions/1900-1999/1926-nearest-exit-from-entrance-in-maze-medium.md",sourceDirName:"1900-1999",slug:"/1900-1999/nearest-exit-from-entrance-in-maze-medium",permalink:"/solutions/1900-1999/nearest-exit-from-entrance-in-maze-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1900-1999/1926-nearest-exit-from-entrance-in-maze-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Breadth-First Search",permalink:"/solutions/tags/breadth-first-search"},{label:"Matrix",permalink:"/solutions/tags/matrix"}],version:"current",sidebarPosition:1926,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/nearest-exit-from-entrance-in-maze/",tags:["Array","Breadth-First Search","Matrix"]},sidebar:"tutorialSidebar",previous:{title:"1916 - Count Ways to Build Rooms in an Ant Colony (Hard)",permalink:"/solutions/1900-1999/count-ways-to-build-rooms-in-an-ant-colony"},next:{title:"1929 - Concatenation of Array (Easy)",permalink:"/solutions/1900-1999/concatenation-of-array-easy"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: BFS",id:"approach-1-bfs",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=m("Tabs"),u=m("TabItem"),d=m("SolutionAuthor"),h={toc:s},k="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(k,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1926---nearest-exit-from-entrance-in-maze-medium"},"1926 - Nearest Exit from Entrance in Maze (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/nearest-exit-from-entrance-in-maze/"},"https://leetcode.com/problems/nearest-exit-from-entrance-in-maze/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given an ",(0,r.kt)("inlineCode",{parentName:"p"},"m x n")," matrix ",(0,r.kt)("inlineCode",{parentName:"p"},"maze")," (",(0,r.kt)("strong",{parentName:"p"},"0-indexed"),") with empty cells (represented as ",(0,r.kt)("inlineCode",{parentName:"p"},"'.'"),") and walls (represented as ",(0,r.kt)("inlineCode",{parentName:"p"},"'+'"),"). You are also given the ",(0,r.kt)("inlineCode",{parentName:"p"},"entrance")," of the maze, where ",(0,r.kt)("inlineCode",{parentName:"p"},"entrance = [entrancerow, entrancecol]")," denotes the row and column of the cell you are initially standing at."),(0,r.kt)("p",null,"In one step, you can move one cell ",(0,r.kt)("strong",{parentName:"p"},"up"),", ",(0,r.kt)("strong",{parentName:"p"},"down"),", ",(0,r.kt)("strong",{parentName:"p"},"left"),", or ",(0,r.kt)("strong",{parentName:"p"},"right"),". You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the ",(0,r.kt)("strong",{parentName:"p"},"nearest exit")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"entrance"),". An ",(0,r.kt)("strong",{parentName:"p"},"exit")," is defined as an ",(0,r.kt)("strong",{parentName:"p"},"empty cell")," that is at the ",(0,r.kt)("strong",{parentName:"p"},"border")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"maze"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"entrance")," ",(0,r.kt)("strong",{parentName:"p"},"does not count")," as an exit."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the ",(0,r.kt)("strong",{parentName:"em"},"number of steps")," in the shortest path from the"),(0,r.kt)("inlineCode",{parentName:"p"},"entrance"),(0,r.kt)("em",{parentName:"p"},"to the nearest exit, or"),(0,r.kt)("inlineCode",{parentName:"p"},"-1"),(0,r.kt)("em",{parentName:"p"},"if no such path exists"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: maze = [["+","+",".","+"],[".",".",".","+"],["+","+","+","."]], entrance = [1,2]\nOutput: 1\nExplanation: There are 3 exits in this maze at [1,0], [0,2], and [2,3].\nInitially, you are at the entrance cell [1,2].\n- You can reach [1,0] by moving 2 steps left.\n- You can reach [0,2] by moving 1 step up.\nIt is impossible to reach [2,3] from the entrance.\nThus, the nearest exit is [0,2], which is 1 step away.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: maze = [["+","+","+"],[".",".","."],["+","+","+"]], entrance = [1,0]\nOutput: 2\nExplanation: There is 1 exit in this maze at [1,2].\n[1,0] does not count as an exit since it is the entrance cell.\nInitially, you are at the entrance cell [1,0].\n- You can reach [1,2] by moving 2 steps right.\nThus, the nearest exit is [1,2], which is 2 steps away.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: maze = [[".","+"]], entrance = [0,0]\nOutput: -1\nExplanation: There are no exits in this maze.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maze.length == m")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maze[i].length == n")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 100")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"maze[i][j]")," is either ",(0,r.kt)("inlineCode",{parentName:"li"},"'.'")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"'+'"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"entrance.length == 2")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= entrancerow < m")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= entrancecol < n")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"entrance")," will always be an empty cell.")),(0,r.kt)("h2",{id:"approach-1-bfs"},"Approach 1: BFS"),(0,r.kt)(c,{mdxType:"Tabs"},(0,r.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    // 4 directions for x-axis and y-axis\n    int dirx[4] = { -1, 0, 0, 1 };\n    int diry[4] = { 0, 1, -1, 0 };\n    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {\n        int m = maze.size(), n = maze[0].size();\n        queue<array<int, 3>> q; // {i, j, steps}\n        // push the starting point (i, j) with initial step 0\n        q.push({entrance[0], entrance[1], 0});\n        // BFS\n        while (!q.empty()) {\n            auto [i, j, steps] = q.front(); q.pop();\n            // handle exit condition, we can exit if\n            // 1. the current position is not the entrance \n            bool isAtTheEntrance = i == entrance[0] && j == entrance[1];\n            // 2. and the current position is at the border\n            bool isAtTheBorder = i == 0 || j == 0 || i == m - 1 || j == n - 1;\n            if (!isAtTheEntrance && isAtTheBorder) return steps;\n            for (int d = 0; d < 4; d++) {\n                int next_i = i + dirx[d];\n                int next_j = j + diry[d];\n                // check if we can move to (next_i, next_j)\n                if (next_i >= 0 && next_j >= 0 && next_i < m && next_j < n && maze[next_i][next_j] == '.') {\n                    // if so, we mark the next cell to `+` so that we won't visit it again\n                    maze[next_i][next_j] = '+';\n                    // add the next position to the queue with steps + 1\n                    q.push({next_i, next_j, steps + 1});\n                }\n            }\n        }\n        return -1;\n    }\n};\n")))))}f.isMDXComponent=!0}}]);