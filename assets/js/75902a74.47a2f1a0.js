"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[1207],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=r.createContext({}),s=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,m=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),p=i,h=d["".concat(m,".").concat(p)]||d[p]||c[p]||a;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},33731:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>y,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const a={},o="0162 - Find Peak Element (Medium)",l={unversionedId:"0100-0199/find-peak-element-medium",id:"0100-0199/find-peak-element-medium",title:"0162 - Find Peak Element (Medium)",description:"Approach 1: Binary Search",source:"@site/solutions/0100-0199/0162-find-peak-element-medium.md",sourceDirName:"0100-0199",slug:"/0100-0199/find-peak-element-medium",permalink:"/solutions/0100-0199/find-peak-element-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0162-find-peak-element-medium.md",tags:[],version:"current",sidebarPosition:162,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"0155 - Min Stack (Medium)",permalink:"/solutions/0100-0199/min-stack-medium"},next:{title:"0165 - Compare Version Numbers (Medium)",permalink:"/solutions/0100-0199/compare-version-numbers-medium"}},m={},s=[{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},d=u("Tabs"),c=u("TabItem"),p=u("SolutionAuthor"),h={toc:s},f="wrapper";function y(e){let{components:t,...n}=e;return(0,i.kt)(f,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0162---find-peak-element-medium"},"0162 - Find Peak Element (Medium)"),(0,i.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Initialize start as the start index of the vector (0) and end as the end index of the vector (nums.size() - 1)."),(0,i.kt)("li",{parentName:"ul"},"Perform binary search until start becomes equal to end."),(0,i.kt)("li",{parentName:"ul"},"Calculate the middle index mid using the formula mid = start + (end - start) / 2."),(0,i.kt)("li",{parentName:"ul"},"Compare nums","[mid]"," with nums","[mid + 1]"," to determine if the peak is on the left side or the right side of mid.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If nums","[mid]"," is greater than nums","[mid + 1]",", move the end index to mid, indicating that the peak is on the left side."),(0,i.kt)("li",{parentName:"ul"},"Otherwise, move the start index to mid + 1, indicating that the peak is on the right side."))),(0,i.kt)("li",{parentName:"ul"},"Repeat steps 3-4 until start becomes equal to end."),(0,i.kt)("li",{parentName:"ul"},"Return the value of start, which represents the index of the peak element.")),(0,i.kt)("p",null,"Time complexity : The time complexity of the code is O(log n), where n is the number of elements in the nums vector."),(0,i.kt)("p",null,"Space Complexity: The space complexity of the code is O(1) since it uses a constant amount of extra space."),(0,i.kt)(d,{mdxType:"Tabs"},(0,i.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(p,{name:"@yashh0903",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"\nclass Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n       // Start index of the search range\n        int start = 0;\n        // End index of the search range\n        int end = nums.size() - 1;\n\n        while (start < end) {\n          // Middle index\n            int mid = start + (end - start) / 2;\n\n            if (nums[mid] > nums[mid + 1]) {\n                // If the current element is greater than the next element,\n                // move the end index to search in the left half\n                end = mid;\n            } else {\n                // If the current element is smaller or equal to the next element,\n                // move the start index to search in the right half\n                start = mid + 1;\n            }\n        }\n         // Return the index of the peak element\n        return start;\n    }\n};\n\n\n")))))}y.isMDXComponent=!0}}]);