"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[46943],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),p=s(n),d=r,f=p["".concat(u,".").concat(d)]||p[d]||c[d]||i;return n?a.createElement(f,o(o({ref:t},l),{},{components:n})):a.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var m={};for(var u in t)hasOwnProperty.call(t,u)&&(m[u]=t[u]);m.originalType=e,m[p]="string"==typeof e?e:r,o[1]=m;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},60805:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>m,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray/"},o="2841 - Maximum Sum of Almost Unique Subarray (Medium)",m={unversionedId:"2800-2899/maximum-sum-of-almost-unique-subarray-medium",id:"2800-2899/maximum-sum-of-almost-unique-subarray-medium",title:"2841 - Maximum Sum of Almost Unique Subarray (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray/",source:"@site/solutions/2800-2899/2841-maximum-sum-of-almost-unique-subarray-medium.md",sourceDirName:"2800-2899",slug:"/2800-2899/maximum-sum-of-almost-unique-subarray-medium",permalink:"/solutions/2800-2899/maximum-sum-of-almost-unique-subarray-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2800-2899/2841-maximum-sum-of-almost-unique-subarray-medium.md",tags:[],version:"current",sidebarPosition:2841,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray/"},sidebar:"tutorialSidebar",previous:{title:"2840 - Check if Strings Can be Made Equal With Operations II (Medium)",permalink:"/solutions/2800-2899/check-if-strings-can-be-made-equal-with-operations-ii-medium"},next:{title:"2900 - 2999",permalink:"/solutions/category/2900---2999"}},u={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window",id:"approach-1-sliding-window",level:2}],l=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},p=l("Tabs"),c=l("TabItem"),d=l("SolutionAuthor"),f={toc:s},k="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(k,(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2841---maximum-sum-of-almost-unique-subarray-medium"},"2841 - Maximum Sum of Almost Unique Subarray (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray/"},"https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given an integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," and two positive integers ",(0,r.kt)("inlineCode",{parentName:"p"},"m")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the ",(0,r.kt)("strong",{parentName:"em"},"maximum sum")," out of all ",(0,r.kt)("strong",{parentName:"em"},"almost unique")," subarrays of length"),(0,r.kt)("inlineCode",{parentName:"p"},"k"),(0,r.kt)("em",{parentName:"p"},"of")," ",(0,r.kt)("inlineCode",{parentName:"p"},"nums"),". If no such subarray exists, return ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("p",null,"A subarray of ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," is ",(0,r.kt)("strong",{parentName:"p"},"almost unique")," if it contains at least ",(0,r.kt)("inlineCode",{parentName:"p"},"m")," distinct elements."),(0,r.kt)("p",null,"A subarray is a contiguous ",(0,r.kt)("strong",{parentName:"p"},"non-empty")," sequence of elements within an array."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [2,6,7,3,1,7], m = 3, k = 4\nOutput: 18\nExplanation: There are 3 almost unique subarrays of size k = 4. These subarrays are [2, 6, 7, 3], [6, 7, 3, 1], and [7, 3, 1, 7]. Among these subarrays, the one with the maximum sum is [2, 6, 7, 3] which has a sum of 18.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [5,9,9,2,4,5,4], m = 1, k = 3\nOutput: 23\nExplanation: There are 5 almost unique subarrays of size k. These subarrays are [5, 9, 9], [9, 9, 2], [9, 2, 4], [2, 4, 5], and [4, 5, 4]. Among these subarrays, the one with the maximum sum is [5, 9, 9] which has a sum of 23.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [1,2,1,2,1,2,1], m = 3, k = 3\nOutput: 0\nExplanation: There are no subarrays of size k = 3 that contain at least m = 3 distinct elements in the given array [1,2,1,2,1,2,1]. Therefore, no almost unique subarrays exist, and the maximum sum is 0.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 2 * 10 ^ 4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= m <= k <= nums.length")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 10 ^ 9"))),(0,r.kt)("h2",{id:"approach-1-sliding-window"},"Approach 1: Sliding Window"),(0,r.kt)(p,{mdxType:"Tabs"},(0,r.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    long long maxSum(vector<int>& nums, int m, int k) {\n        long long ans = 0, sum = 0;\n        // count the frequency of each number\n        unordered_map<int, int> cnt;\n        // cater the first window\n        for (int i = 0; i < k; i++) sum += nums[i], cnt[nums[i]]++;\n        // if it has at least m distinct elements, set the ans\n        if ((int) cnt.size() >= m) ans = sum;\n        // having a fixed size window - now sliding to the right\n        for (int i = k; i < nums.size(); i++) {\n            // add nums[i] to the window, and update sum\n            cnt[nums[i]]++, sum += nums[i];\n            // nums[i - k] is out of the window, if it is 0, remove from the map\n            if (--cnt[nums[i - k]] == 0) cnt.erase(nums[i - k]);\n            // nums[i - k] is out of the window, substract from the sum \n            sum -= nums[i - k];\n            // check if it has at least m distinct elements, set the ans\n            if ((int) cnt.size() >= m) ans = max(ans, sum);\n        }\n        return ans;\n    }\n};\n")))))}h.isMDXComponent=!0}}]);