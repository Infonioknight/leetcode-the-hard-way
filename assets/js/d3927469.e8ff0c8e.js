"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[35294],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),m=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=m(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=m(t),d=i,f=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var m=2;m<o;m++)a[m]=t[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},83641:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>k,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var r=t(87462),i=(t(67294),t(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/sum-of-distances/"},a="2615 - Sum of Distances (Medium)",s={unversionedId:"2600-2699/sum-of-distances-medium",id:"2600-2699/sum-of-distances-medium",title:"2615 - Sum of Distances (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/sum-of-distances/",source:"@site/solutions/2600-2699/2615-sum-of-distances-medium.md",sourceDirName:"2600-2699",slug:"/2600-2699/sum-of-distances-medium",permalink:"/solutions/2600-2699/sum-of-distances-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2600-2699/2615-sum-of-distances-medium.md",tags:[],version:"current",sidebarPosition:2615,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/sum-of-distances/"},sidebar:"tutorialSidebar",previous:{title:"2614 - Prime In Diagonal (Easy)",permalink:"/solutions/2600-2699/prime-in-diagonal-easy"},next:{title:"2616 - Minimize the Maximum Difference of Pairs (Medium)",permalink:"/solutions/2600-2699/minimize-the-maximum-difference-of-pairs-medium"}},l={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Prefix Sum",id:"approach-1-prefix-sum",level:2}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},u=p("Tabs"),c=p("TabItem"),d=p("SolutionAuthor"),f={toc:m},h="wrapper";function k(e){let{components:n,...t}=e;return(0,i.kt)(h,(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2615---sum-of-distances-medium"},"2615 - Sum of Distances (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sum-of-distances/"},"https://leetcode.com/problems/sum-of-distances/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given a ",(0,i.kt)("strong",{parentName:"p"},"0-indexed")," integer array ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),". There exists an array ",(0,i.kt)("inlineCode",{parentName:"p"},"arr")," of length ",(0,i.kt)("inlineCode",{parentName:"p"},"nums.length"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"arr[i]")," is the sum of ",(0,i.kt)("inlineCode",{parentName:"p"},"|i - j|")," over all ",(0,i.kt)("inlineCode",{parentName:"p"},"j")," such that ",(0,i.kt)("inlineCode",{parentName:"p"},"nums[j] == nums[i]")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"j != i"),". If there is no such ",(0,i.kt)("inlineCode",{parentName:"p"},"j"),", set ",(0,i.kt)("inlineCode",{parentName:"p"},"arr[i]")," to be ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the array"),(0,i.kt)("inlineCode",{parentName:"p"},"arr"),(0,i.kt)("em",{parentName:"p"},".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1,3,1,1,2]\nOutput: [5,0,3,4,0]\nExplanation: \nWhen i = 0, nums[0] == nums[2] and nums[0] == nums[3]. Therefore, arr[0] = |0 - 2| + |0 - 3| = 5. \nWhen i = 1, arr[1] = 0 because there is no other index with value 3.\nWhen i = 2, nums[2] == nums[0] and nums[2] == nums[3]. Therefore, arr[2] = |2 - 0| + |2 - 3| = 3. \nWhen i = 3, nums[3] == nums[0] and nums[3] == nums[2]. Therefore, arr[3] = |3 - 0| + |3 - 2| = 4. \nWhen i = 4, arr[4] = 0 because there is no other index with value 2.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [0,5,3]\nOutput: [0,0,0]\nExplanation: Since each element in nums is distinct, arr[i] = 0 for all i.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 10^5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= nums[i] <= 10^9"))),(0,i.kt)("h2",{id:"approach-1-prefix-sum"},"Approach 1: Prefix Sum"),(0,i.kt)(u,{mdxType:"Tabs"},(0,i.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<long long> distance(vector<int>& nums) {\n        unordered_map<int, vector<int>> m;\n        vector<long long> ans(nums.size());\n        int n = nums.size();\n        // for each number x, collect all the indices where x occurs\n        for (int i = 0; i < n; i++) m[nums[i]].push_back(i);\n        for (auto x : m) {\n            // calcualte the prefix sum of the array\n            vector<int> v = x.second;\n            int n = v.size();\n            vector<long long> pre(n + 1);\n            for (int i = 0; i < n; i++) pre[i + 1] = pre[i] + v[i];\n            // for each occurrence of x, \n            // the indices to the right will be regular subtraction \n            // while the indices to the left will be reversed subtraction.\n            for (int i = 0; i < n; i++) {\n                long long k = v[i];\n                ans[k] = (k * (i + 1) - pre[i + 1]) + \n                            (pre[n] - pre[i] - k * (n - i));\n            }\n        }\n        return ans;\n    }\n};\n")))))}k.isMDXComponent=!0}}]);