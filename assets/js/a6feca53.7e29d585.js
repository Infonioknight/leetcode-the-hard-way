"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[1232],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(t),c=a,f=d["".concat(p,".").concat(c)]||d[c]||u[c]||i;return t?r.createElement(f,o(o({ref:n},m),{},{components:t})):r.createElement(f,o({ref:n},m))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},66588:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/intervals-between-identical-elements/"},o="2121 - Intervals Between Identical Elements (Medium)",l={unversionedId:"2100-2199/intervals-between-identical-elements-medium",id:"2100-2199/intervals-between-identical-elements-medium",title:"2121 - Intervals Between Identical Elements (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/intervals-between-identical-elements/",source:"@site/solutions/2100-2199/2121-intervals-between-identical-elements-medium.md",sourceDirName:"2100-2199",slug:"/2100-2199/intervals-between-identical-elements-medium",permalink:"/solutions/2100-2199/intervals-between-identical-elements-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2121-intervals-between-identical-elements-medium.md",tags:[],version:"current",sidebarPosition:2121,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/intervals-between-identical-elements/"},sidebar:"tutorialSidebar",previous:{title:"2120 - Execution of All Suffix Instructions Staying in a Grid (Medium)",permalink:"/solutions/2100-2199/execution-of-all-suffix-instructions-staying-in-a-grid-medium"},next:{title:"2122 - Recover the Original Array (Hard)",permalink:"/solutions/2100-2199/recover-the-original-array-hard"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Prefix Sum",id:"approach-1-prefix-sum",level:2}],m=(d="SolutionAuthor",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var d;const u={toc:s},c="wrapper";function f(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2121---intervals-between-identical-elements-medium"},"2121 - Intervals Between Identical Elements (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/intervals-between-identical-elements/"},"https://leetcode.com/problems/intervals-between-identical-elements/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a ",(0,a.kt)("strong",{parentName:"p"},"0-indexed")," array of ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," integers ",(0,a.kt)("inlineCode",{parentName:"p"},"arr"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"interval")," between two elements in ",(0,a.kt)("inlineCode",{parentName:"p"},"arr")," is defined as the ",(0,a.kt)("strong",{parentName:"p"},"absolute difference")," between their indices. More formally, the ",(0,a.kt)("strong",{parentName:"p"},"interval")," between ",(0,a.kt)("inlineCode",{parentName:"p"},"arr[i]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"arr[j]")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"|i - j|"),"."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"an array")," ",(0,a.kt)("inlineCode",{parentName:"p"},"intervals")," ",(0,a.kt)("em",{parentName:"p"},"of length")," ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," ",(0,a.kt)("em",{parentName:"p"},"where")," ",(0,a.kt)("inlineCode",{parentName:"p"},"intervals[i]")," ",(0,a.kt)("em",{parentName:"p"},"is ",(0,a.kt)("strong",{parentName:"em"},"the sum of intervals")," between")," ",(0,a.kt)("inlineCode",{parentName:"p"},"arr[i]")," ",(0,a.kt)("em",{parentName:"p"},"and each element in")," ",(0,a.kt)("inlineCode",{parentName:"p"},"arr")," ",(0,a.kt)("em",{parentName:"p"},"with the same value as")," ",(0,a.kt)("inlineCode",{parentName:"p"},"arr[i]"),(0,a.kt)("em",{parentName:"p"},".")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"|x|")," is the absolute value of ",(0,a.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: arr = [2,1,3,1,2,3,3]\nOutput: [4,2,7,2,4,4,5]\nExplanation:\n- Index 0: Another 2 is found at index 4. |0 - 4| = 4\n- Index 1: Another 1 is found at index 3. |1 - 3| = 2\n- Index 2: Two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7\n- Index 3: Another 1 is found at index 1. |3 - 1| = 2\n- Index 4: Another 2 is found at index 0. |4 - 0| = 4\n- Index 5: Two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4\n- Index 6: Two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: arr = [10,5,10,10]\nOutput: [5,0,3,4]\nExplanation:\n- Index 0: Two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5\n- Index 1: There is only one 5 in the array, so its sum of intervals to identical elements is 0.\n- Index 2: Two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3\n- Index 3: Two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == arr.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 105")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= arr[i] <= 105"))),(0,a.kt)("h2",{id:"approach-1-prefix-sum"},"Approach 1: Prefix Sum"),(0,a.kt)("p",null,"First we need to know the indices for each number. We can easily construct it using ",(0,a.kt)("inlineCode",{parentName:"p"},"unordered_map<int, vector<int>>"),". Then it comes to the math part. Our goal is to calculate the absolute difference for numbers smaller than and greater than or equal to $$k$$ in linear time."),(0,a.kt)("p",null,"Let's say the list is ","[","1, 3, 5, 7, 9] and let $$k$$ be $$7$$. The absolute difference for numbers smaller than or equal to $$7$$ is $$(7\u22121)+(7\u22123)+(7\u22125)\u2212(7\u22127)$$. We can arrange it to $$7\u22174\u2212(1\u22123\u22125\u22127)$$ which is same as $$k\u2217(i+1)\u2212pre","[i+1]","$$."),(0,a.kt)("p",null,"Similarly, let $$k$$ be $$3$$ and we want to find out the absolute difference for numbers greater than or equal to $$3$$. $$(3\u22123)+(3\u22125)+(3\u22127)+(3\u22129)$$. We can arrange it to $$3\u22174\u2212(3+5+7+9)$$, which is same as $$(pre","[n]","\u2212pre","[i]",")\u2212k\u2217(n\u2212i)$$. Therefore, $$ans","[k]","$$ would be the sum of the left part and the right part."),(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<long long> getDistances(vector<int>& arr) {\n        unordered_map<int, vector<int>> m;\n        vector<long long> ans(arr.size());\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            m[arr[i]].push_back(i);\n        }\n        for (auto x : m) {\n            vector<int> v = x.second;\n            int n = v.size();\n            vector<long long> pre(n + 1);\n            for (int i = 0; i < n; i++) {\n                pre[i + 1] = pre[i] + v[i];\n            }\n            for (int i = 0; i < n; i++) {\n                long long k = v[i];\n                ans[k] = (k * (i + 1) - pre[i + 1]) + \n                            ((pre[n] - pre[i]) - (k * (n - i)));\n            }\n        }\n        return ans;\n    }\n};\n")))}f.isMDXComponent=!0}}]);