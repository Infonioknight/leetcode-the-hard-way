"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[37389],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(n),h=a,d=u["".concat(s,".").concat(h)]||u[h]||c[h]||i;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var m=2;m<i;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},18379:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/smallest-string-with-a-given-numeric-value/"},o="1633 - Smallest String With A Given Numeric Value (Medium)",l={unversionedId:"1600-1699/smallest-string-with-a-given-numeric-value-medium",id:"1600-1699/smallest-string-with-a-given-numeric-value-medium",title:"1633 - Smallest String With A Given Numeric Value (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/smallest-string-with-a-given-numeric-value/",source:"@site/solutions/1600-1699/1633-smallest-string-with-a-given-numeric-value-medium.md",sourceDirName:"1600-1699",slug:"/1600-1699/smallest-string-with-a-given-numeric-value-medium",permalink:"/solutions/1600-1699/smallest-string-with-a-given-numeric-value-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1600-1699/1633-smallest-string-with-a-given-numeric-value-medium.md",tags:[],version:"current",sidebarPosition:1633,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/smallest-string-with-a-given-numeric-value/"},sidebar:"tutorialSidebar",previous:{title:"1631 - Path With Minimum Effort (Medium)",permalink:"/solutions/1600-1699/path-with-minimum-effort-medium"},next:{title:"1639 - Number of Ways to Form a Target String Given a Dictionary (Hard)",permalink:"/solutions/1600-1699/number-of-ways-to-form-a-target-string-given-a-dictionary-hard"}},s={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Build from the right",id:"approach-1-build-from-the-right",level:2},{value:"Approach 2: Three segments",id:"approach-2-three-segments",level:2}],p=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const c={toc:m},h="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1633---smallest-string-with-a-given-numeric-value-medium"},"1633 - Smallest String With A Given Numeric Value (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/smallest-string-with-a-given-numeric-value/"},"https://leetcode.com/problems/smallest-string-with-a-given-numeric-value/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"numeric value")," of a ",(0,a.kt)("strong",{parentName:"p"},"lowercase character")," is defined as its position ",(0,a.kt)("inlineCode",{parentName:"p"},"(1-indexed)")," in the alphabet, so the numeric value of ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),", the numeric value of ",(0,a.kt)("inlineCode",{parentName:"p"},"b")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"2"),", the numeric value of ",(0,a.kt)("inlineCode",{parentName:"p"},"c")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"3"),", and so on."),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"numeric value")," of a ",(0,a.kt)("strong",{parentName:"p"},"string")," consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string ",(0,a.kt)("inlineCode",{parentName:"p"},'"abe"')," is equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"1 + 2 + 5 = 8"),"."),(0,a.kt)("p",null,"You are given two integers ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),". Return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"lexicographically smallest string")," with ",(0,a.kt)("strong",{parentName:"em"},"length")," equal to ",(0,a.kt)("inlineCode",{parentName:"em"},"n")," and ",(0,a.kt)("strong",{parentName:"em"},"numeric value")," equal to ",(0,a.kt)("inlineCode",{parentName:"em"},"k"),".")),(0,a.kt)("p",null,"Note that a string ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," is lexicographically smaller than string ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," comes before ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," in dictionary order, that is, either ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," is a prefix of ",(0,a.kt)("inlineCode",{parentName:"p"},"y"),", or if ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," is the first position such that ",(0,a.kt)("inlineCode",{parentName:"p"},"x[i] != y[i]"),", then ",(0,a.kt)("inlineCode",{parentName:"p"},"x[i]")," comes before ",(0,a.kt)("inlineCode",{parentName:"p"},"y[i]")," in alphabetic order."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: n = 3, k = 27\nOutput: "aay"\nExplanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: n = 5, k = 73\nOutput: "aaszz"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n <= k <= 26 * n"))),(0,a.kt)("h2",{id:"approach-1-build-from-the-right"},"Approach 1: Build from the right"),(0,a.kt)("p",null,"To obtain lexicographically smallest string, we should put $$a$$ from the left and $$z$$ from the right if possible and put what's left in the middle. Therefore, we initialise the answer with all $$a$$s. Starting from the right, the best case is to make it to $$z$$ (i.e. $$s","[i]"," + 25$$). If we cannot do it, then we can only make it to the max one (i.e. $$s","[i]"," + k$$)."),(0,a.kt)(p,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string getSmallestString(int n, int k) {\n        // init s with all 'a's\n        string s(n, 'a');\n        // since we put n times, update k\n        k -= n; \n        // 0-index\n        n -= 1;\n        // fill character until k <= 0\n        while (k > 0) {\n            // we either put a + 25 (z) or a + k\n            s[n] += min(k, 25);\n            // update k\n            k -= 25;\n            // shift the pointer to the left\n            n -= 1;\n        }\n        return answer\n        return s;\n    }\n};\n")),(0,a.kt)("h2",{id:"approach-2-three-segments"},"Approach 2: Three segments"),(0,a.kt)("p",null,"The answer can be potentially constructed by three segments. The first segment contains only $$a$$. The last segment contains only $$z$$. The middle segment contains a character. This approach is to calculate each character in each segment given $$n$$ and $$k$$."),(0,a.kt)("p",null,"First we calculate the number of characters that are not $$a$$, i.e. the total number of characters in the second and the third segment. Let's call it $$nonA$$. Then we know that there would be $$n - nonA$$ a in the first segment and $$nonA - 1$$ z in the third segment (minus one because we need one for the second segment). So how to get $$nonA$$? We can use above condition to find out $$nonA$$. That is $$(n - nonA) ",(0,a.kt)("em",{parentName:"p"}," 1 + nonA ")," 26 >= k$$ which gives $$nonA >= (k - n) / 25$$."),(0,a.kt)("p",null,"For the middle segment, how many $$k$$ left we can use? We've used $$(n - nonA) ",(0,a.kt)("em",{parentName:"p"}," 1$$ for the first segment and $$(nonA-1)")," 26$$ for the last segment. The index of the character in the middle segment would be $$k - (n - nonA) - (nonA - 1) * 26$$."),(0,a.kt)(p,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string getSmallestString(int n, int k) {\n        // total number of characters in 2nd & 3rd segment\n        int nonA = ((k - n) + 25 - 1) / 25;\n        // 1st segment: there is (n - nonA) 'a's\n        // 2nd segment: one character with index k - (n - nonA) - (nonA - 1) * 26\n        // 3rd segemnt: there is (nonA - 1) 'z's\n        return string(n - nonA, 'a') + \n               char(k - (n - nonA) - (nonA - 1) * 26 + 'a' - 1) + \n               string(nonA - 1, 'z');\n    }\n};\n")))}d.isMDXComponent=!0}}]);