"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[43006],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),u=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=u(e.components);return o.createElement(l.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=u(t),d=r,h=p["".concat(l,".").concat(d)]||p[d]||c[d]||i;return t?o.createElement(h,a(a({ref:n},m),{},{components:t})):o.createElement(h,a({ref:n},m))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:r,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},78300:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>v,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var o=t(87462),r=(t(67294),t(3905));const i={description:"Author: @heiheihang, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/move-zeroes/"},a="0283 - Move Zeroes (Easy)",s={unversionedId:"0200-0299/move-zeroes-easy",id:"0200-0299/move-zeroes-easy",title:"0283 - Move Zeroes (Easy)",description:"Author: @heiheihang, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/move-zeroes/",source:"@site/solutions/0200-0299/0283-move-zeroes-easy.md",sourceDirName:"0200-0299",slug:"/0200-0299/move-zeroes-easy",permalink:"/solutions/0200-0299/move-zeroes-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0283-move-zeroes-easy.md",tags:[],version:"current",sidebarPosition:283,frontMatter:{description:"Author: @heiheihang, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/move-zeroes/"},sidebar:"tutorialSidebar",previous:{title:"0278 - First Bad Version (Easy)",permalink:"/solutions/0200-0299/first-bad-version-easy"},next:{title:"0286 - Walls and Gates (Medium)",permalink:"/solutions/0200-0299/walls-and-gates-medium"}},l={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two pointers",id:"approach-1-two-pointers",level:2},{value:"Approach 2: Two pointers Optimal",id:"approach-2-two-pointers-optimal",level:2}],m=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)},p=m("Tabs"),c=m("TabItem"),d=m("SolutionAuthor"),h={toc:u},f="wrapper";function v(e){let{components:n,...t}=e;return(0,r.kt)(f,(0,o.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0283---move-zeroes-easy"},"0283 - Move Zeroes (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/move-zeroes/"},"https://leetcode.com/problems/move-zeroes/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given an integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"nums"),", move all ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"'s to the end of it while maintaining the relative order of the non-zero elements."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note")," that you must do this in-place without making a copy of the array."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [0]\nOutput: [0]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 10^4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-2^31 <= nums[i] <= 2^31 - 1"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Follow up:")," Could you minimize the total number of operations done?"),(0,r.kt)("h2",{id:"approach-1-two-pointers"},"Approach 1: Two pointers"),(0,r.kt)("p",null,"We need to set two pointers for this problem. The first pointer identifies the current number it is looking at. The second pointer identifies the next un-updated slot for moving the non-zero numbers in."),(0,r.kt)("p",null,"When we see a non-zero element, we put it in the slot pointed by ",(0,r.kt)("inlineCode",{parentName:"p"},"left_pointer"),", and then increment ",(0,r.kt)("inlineCode",{parentName:"p"},"left_pointer"),". When we see a zero, we just skip."),(0,r.kt)("p",null,"At the end, we need to set all the unused slots of ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," to zero."),(0,r.kt)(p,{mdxType:"Tabs"},(0,r.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)(d,{name:"@heiheihang",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def moveZeroes(self, nums: List[int]) -> None:\n        """\n        Do not return anything, modify nums in-place instead.\n        """\n        #initialize left pointer to keep track of spaces for non-zero elements\n        left_pointer = 0\n        #iterate all numbers in nums\n        for i in range(len(nums)):\n            #we skip if we see a 0\n            if(nums[i] == 0):\n                continue\n            else:\n                #we put the current number to the empty space if its non-zero\n                nums[left_pointer] = nums[i]\n                #as the current position is filled, move to the next one\n                left_pointer += 1\n        \n        #we put zeros to the remaining spots in nums\n        for i in range(left_pointer, len(nums)):\n            nums[i] = 0\n            \n'))),(0,r.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(d,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public void moveZeroes(int[] nums) {\n        if (nums.length == 1) return;\n        int idx = 0;\n        for (int num : nums) {\n            if (num != 0) {\n                nums[idx++] = num;\n            }\n        }\n        while (idx < nums.length) {\n            nums[idx++] = 0;\n        }\n    }\n}\n"))),(0,r.kt)(c,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function(nums) {\n    let slow = 0;\n    for (let fast = 0; fast < nums.length; fast++) {\n        if (nums[fast] === 0) {\n            continue;\n        } else {\n            nums[slow] = nums[fast];\n            slow++;\n        }\n    }\n    while (slow < nums.length) {\n        nums[slow] = 0;\n        slow++;\n    }\n};\n"))),(0,r.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        int slow = 0;\n        for (int fast = 0; fast < nums.size(); fast++) {\n            if (nums[fast] == 0) {\n                continue;\n            } else {\n                nums[slow] = nums[fast];\n                slow++;\n            }\n        }\n        while (slow < nums.size()) {\n            nums[slow] = 0;\n            slow++;\n        }\n    }\n};\n")))),(0,r.kt)("h2",{id:"approach-2-two-pointers-optimal"},"Approach 2: Two pointers Optimal"),(0,r.kt)("p",null,"Iterate through numbers and count the $0$ occurances, while doing so, if any non-zero number present and if the zero's count more than $0$, shift the current number to current $index - count0$ count index. This solves the problem in linear time and optimally.  "),(0,r.kt)("p",null,"For example, the given input is $","[1, 3, 0, 0, 12]","$, right now $12$ has to be placed in first $0$ th position. While iterating, we have count $2$ zero's and we are at the last index. Shift $12$ present in current index $4$ to index $2$, apply $nums","[i - count0]"," = nums","[i]","$ and set $0$ in the current index. "),(0,r.kt)(p,{mdxType:"Tabs"},(0,r.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(d,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public void moveZeroes(int[] nums) {\n        if (nums.length == 1) return;\n        int count0 = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == 0) {\n                count0 += 1;\n            } else if (count0 > 0) {\n                nums[i - count0] = nums[i];\n                nums[i] = 0;\n            }\n        }\n    }\n}\n"))),(0,r.kt)(c,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar moveZeroes = function(nums) {\n    let count_zero = 0;\n    // iterate through array\n    for (i = 0; i < nums.length; i++) {\n        // count the zeros\n        if (nums[i] == 0) count_zero++;\n        // if the current number is not zero and\n        // if zero's count is one or more\n        else if (count_zero > 0) {\n            // swap them\n            nums[i - count_zero] = nums[i];\n            nums[i] = 0\n        }\n    }\n};\n"))),(0,r.kt)(c,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        """\n        Do not return anything, modify nums in-place instead.\n        """\n        count_zero = 0\n        # iterate through array\n        for i in range(len(nums)):\n            # count the zeros\n            if nums[i] == 0:\n                count_zero += 1\n            # if the current number is not 0 and \n            # if zero\'s count is 1 or more\n            elif count_zero > 0:\n                # swap them \n                nums[i - count_zero] = nums[i]\n                nums[i] = 0\n'))),(0,r.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        int countZeros = 0;\n        // iterate through array\n        for (int i = 0; i < nums.size(); i++) {\n            // count zeros\n            if (nums[i] == 0) {\n                countZeros++;\n            // if the current number is not 0\n            // and if zero's count is 1 or more\n            } else if (countZeros > 0) {\n                // swap them\n                nums[i - countZeros] = nums[i];\n                nums[i] = 0;\n            }\n        }\n    }\n};\n")))))}v.isMDXComponent=!0}}]);