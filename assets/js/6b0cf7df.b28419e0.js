"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[48071],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(n),d=o,h=c["".concat(u,".").concat(d)]||c[d]||m[d]||s;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5967:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const s={description:"Author: @wingkwong | https://leetcode.com/problems/shortest-unsorted-continuous-subarray/"},a="0581 - Shortest Unsorted Continuous Subarray (Medium)",i={unversionedId:"0500-0599/shortest-unsorted-continuous-subarray-medium",id:"0500-0599/shortest-unsorted-continuous-subarray-medium",title:"0581 - Shortest Unsorted Continuous Subarray (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/shortest-unsorted-continuous-subarray/",source:"@site/solutions/0500-0599/0581-shortest-unsorted-continuous-subarray-medium.md",sourceDirName:"0500-0599",slug:"/0500-0599/shortest-unsorted-continuous-subarray-medium",permalink:"/solutions/0500-0599/shortest-unsorted-continuous-subarray-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0500-0599/0581-shortest-unsorted-continuous-subarray-medium.md",tags:[],version:"current",sidebarPosition:581,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/shortest-unsorted-continuous-subarray/"},sidebar:"tutorialSidebar",previous:{title:"0572 - Subtree of Another Tree (Easy)",permalink:"/solutions/0500-0599/subtree-of-another-tree-easy"},next:{title:"0589 - N-ary Tree Preorder Traversal (Easy)",permalink:"/solutions/0500-0599/n-ary-tree-preorder-traversal-easy"}},u={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sort",id:"approach-1-sort",level:2}],p=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const m={toc:l},d="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0581---shortest-unsorted-continuous-subarray-medium"},"0581 - Shortest Unsorted Continuous Subarray (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/shortest-unsorted-continuous-subarray/"},"https://leetcode.com/problems/shortest-unsorted-continuous-subarray/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given an integer array ",(0,o.kt)("inlineCode",{parentName:"p"},"nums"),", you need to find one ",(0,o.kt)("strong",{parentName:"p"},"continuous subarray")," that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order."),(0,o.kt)("p",null,"Return ",(0,o.kt)("em",{parentName:"p"},"the shortest such subarray and output its length"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [2,6,4,8,10,9,15]\nOutput: 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3,4]\nOutput: 0\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1]\nOutput: 0\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 10^4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-105 <= nums[i] <= 10^5"))),(0,o.kt)("h2",{id:"approach-1-sort"},"Approach 1: Sort"),(0,o.kt)("p",null,"If the input is sorted, then return $$0$$."),(0,o.kt)("p",null,"Otherwise, we compare the input with the sorted version to check the first difference $$l$$ and the last difference $$r$$. The answer will be $$r - l + 1$$."),(0,o.kt)(p,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findUnsortedSubarray(vector<int>& nums) {\n        vector<int> v = nums;\n        // sort the cloned input\n        sort(v.begin(), v.end());\n        // if it is sorted, then return 0\n        if (v == nums) return 0;\n        // assuming it must have the answer\n        int l = -1, r = -1;\n        for (int i = 0; i < nums.size(); i++) {\n            // find the first index of the difference\n            if (l == -1 && v[i] != nums[i]) l = i;\n            // find the last index of the difference\n            if (v[i] != nums[i]) r = i;\n        }\n        // output the length\n        return r - l + 1;\n    }\n};\n")),(0,o.kt)("p",null,"Same idea but search from both side."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findUnsortedSubarray(vector<int>& nums) {\n        vector<int> v = nums;\n        sort(nums.begin(), nums.end());\n        int n = nums.size(), i = 0, j = n - 1;\n        while (i < n && nums[i] == v[i]) i++;\n        while (j > i && nums[j] == v[j]) j--;\n        return j - i + 1;\n    }\n};\n")))}h.isMDXComponent=!0}}]);