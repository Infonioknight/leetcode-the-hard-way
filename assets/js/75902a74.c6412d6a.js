"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[1207],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),s=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(n),c=a,h=u["".concat(m,".").concat(c)]||u[c]||d[c]||i;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},33731:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={description:"Author: @yashh0903 | https://leetcode.com/problems/find-peak-element/",tags:["Array","Binary Search"]},l="0162 - Find Peak Element (Medium)",o={unversionedId:"0100-0199/find-peak-element-medium",id:"0100-0199/find-peak-element-medium",title:"0162 - Find Peak Element (Medium)",description:"Author: @yashh0903 | https://leetcode.com/problems/find-peak-element/",source:"@site/solutions/0100-0199/0162-find-peak-element-medium.md",sourceDirName:"0100-0199",slug:"/0100-0199/find-peak-element-medium",permalink:"/solutions/0100-0199/find-peak-element-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0162-find-peak-element-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Binary Search",permalink:"/solutions/tags/binary-search"}],version:"current",sidebarPosition:162,frontMatter:{description:"Author: @yashh0903 | https://leetcode.com/problems/find-peak-element/",tags:["Array","Binary Search"]},sidebar:"tutorialSidebar",previous:{title:"0155 - Min Stack (Medium)",permalink:"/solutions/0100-0199/min-stack-medium"},next:{title:"0165 - Compare Version Numbers (Medium)",permalink:"/solutions/0100-0199/compare-version-numbers-medium"}},m={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=p("Tabs"),d=p("TabItem"),c=p("SolutionAuthor"),h={toc:s},k="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(k,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0162---find-peak-element-medium"},"0162 - Find Peak Element (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-peak-element/"},"https://leetcode.com/problems/find-peak-element/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"A peak element is an element that is strictly greater than its neighbors."),(0,a.kt)("p",null,"Given a ",(0,a.kt)("strong",{parentName:"p"},"0-indexed")," integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums"),", find a peak element, and return its index. If the array contains multiple peaks, return the index to ",(0,a.kt)("strong",{parentName:"p"},"any of the peaks"),"."),(0,a.kt)("p",null,"You may imagine that ",(0,a.kt)("inlineCode",{parentName:"p"},"nums[-1] = nums[n] = -\u221e"),". In other words, an element is always considered to be strictly greater than a neighbor that is outside the array."),(0,a.kt)("p",null,"You must write an algorithm that runs in ",(0,a.kt)("inlineCode",{parentName:"p"},"O(log n)")," time."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-2 ^ 31 <= nums[i] <= 2 ^ 31 - 1")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nums[i] != nums[i + 1]")," for all valid ",(0,a.kt)("inlineCode",{parentName:"li"},"i"),".")),(0,a.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Initialize start as the start index of the vector (0) and end as the end index of the vector (nums.size() - 1)."),(0,a.kt)("li",{parentName:"ul"},"Perform binary search until start becomes equal to end."),(0,a.kt)("li",{parentName:"ul"},"Calculate the middle index mid using the formula mid = start + (end - start) / 2."),(0,a.kt)("li",{parentName:"ul"},"Compare nums","[mid]"," with nums","[mid + 1]"," to determine if the peak is on the left side or the right side of mid.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If nums","[mid]"," is greater than nums","[mid + 1]",", move the end index to mid, indicating that the peak is on the left side."),(0,a.kt)("li",{parentName:"ul"},"Otherwise, move the start index to mid + 1, indicating that the peak is on the right side."))),(0,a.kt)("li",{parentName:"ul"},"Repeat steps 3-4 until start becomes equal to end."),(0,a.kt)("li",{parentName:"ul"},"Return the value of start, which represents the index of the peak element.")),(0,a.kt)("p",null,"Time complexity : The time complexity of the code is O(log n), where n is the number of elements in the nums vector."),(0,a.kt)("p",null,"Space Complexity: The space complexity of the code is O(1) since it uses a constant amount of extra space."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(c,{name:"@yashh0903",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n        // Start index of the search range\n        int start = 0;\n        // End index of the search range\n        int end = nums.size() - 1;\n\n        while (start < end) {\n            // Middle index\n            int mid = start + (end - start) / 2;\n            if (nums[mid] > nums[mid + 1]) {\n                // If the current element is greater than the next element,\n                // move the end index to search in the left half\n                end = mid;\n            } else {\n                // If the current element is smaller or equal to the next element,\n                // move the start index to search in the right half\n                start = mid + 1;\n            }\n        }\n         // Return the index of the peak element\n        return start;\n    }\n};\n")))))}f.isMDXComponent=!0}}]);