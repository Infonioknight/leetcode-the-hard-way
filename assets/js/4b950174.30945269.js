"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[30027],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),s=l(n),d=a,h=s["".concat(u,".").concat(d)]||s[d]||c[d]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var m={};for(var u in t)hasOwnProperty.call(t,u)&&(m[u]=t[u]);m.originalType=e,m[s]="string"==typeof e?e:a,o[1]=m;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},15456:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>y,frontMatter:()=>i,metadata:()=>m,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const i={description:"Author: @ColeB2 | https://leetcode.com/problems/maximum-product-subarray/",tags:["Array","Dynamic Programming"]},o="0152 - Maximum Product Subarray (Medium)",m={unversionedId:"0100-0199/maximum-product-subarray-medium",id:"0100-0199/maximum-product-subarray-medium",title:"0152 - Maximum Product Subarray (Medium)",description:"Author: @ColeB2 | https://leetcode.com/problems/maximum-product-subarray/",source:"@site/solutions/0100-0199/0152-maximum-product-subarray-medium.md",sourceDirName:"0100-0199",slug:"/0100-0199/maximum-product-subarray-medium",permalink:"/solutions/0100-0199/maximum-product-subarray-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0152-maximum-product-subarray-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"}],version:"current",sidebarPosition:152,frontMatter:{description:"Author: @ColeB2 | https://leetcode.com/problems/maximum-product-subarray/",tags:["Array","Dynamic Programming"]},sidebar:"tutorialSidebar",previous:{title:"0150 - Evaluate Reverse Polish Notation (Medium)",permalink:"/solutions/0100-0199/evaluate-reverse-olish-notation-medium"},next:{title:"0154 - Find Minimum in Rotated Sorted Array II (Hard)",permalink:"/solutions/0100-0199/find-minimum-in-rotated-sorted-array-ii-hard"}},u={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},s=p("Tabs"),c=p("TabItem"),d=p("SolutionAuthor"),h={toc:l},g="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0152---maximum-product-subarray-medium"},"0152 - Maximum Product Subarray (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-product-subarray/"},"https://leetcode.com/problems/maximum-product-subarray/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums"),", find a subarray that has the largest product, and return ",(0,a.kt)("em",{parentName:"p"},"the product"),"."),(0,a.kt)("p",null,"The test cases are generated so that the answer will fit in a ",(0,a.kt)("strong",{parentName:"p"},"32-bit")," integer."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 2 * 10^4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-10 <= nums[i] <= 10")),(0,a.kt)("li",{parentName:"ul"},"The product of any prefix or suffix of ",(0,a.kt)("inlineCode",{parentName:"li"},"nums")," is ",(0,a.kt)("strong",{parentName:"li"},"guaranteed")," to fit in a ",(0,a.kt)("strong",{parentName:"li"},"32-bit")," integer.")),(0,a.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,a.kt)("p",null,"We can solve this in a single pass using dynamic programming. While looping through the numbers, we just need to track both the $$min$$ and the $$max$$ values ending at $$i$$. Swap them if the current number at the position is negative (as that will make the $$min$$,$$max$$ switch), then calculate the new $$min$$,$$max$$ as either the $$min$$/$$max$$ of the current num or the current num times $$min$$/$$max$$. We can then update the global max product with the current max and the max ending at i."),(0,a.kt)("p",null,"Time Complexity: $$O(n)$$, where n is the length of nums. We are going to loop through each num in nums."),(0,a.kt)("p",null,"Space Complexity: $$O(1)$$, we only need constant space to track variables of our min/max ending at i, as well as our max product."),(0,a.kt)(s,{mdxType:"Tabs"},(0,a.kt)(c,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(d,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        # initialize max_product, and our min/max ending at i.\n        # They can all initialize as the first value.\n        max_product = nums[0]\n        min_ending_at_i = nums[0]\n        max_ending_at_i = nums[0]\n        # start our loop at 1, since we already handled first value.\n        for i in range(1, len(nums)):\n            # track the current num\n            num = nums[i]\n            # if current num is negative:\n            if num < 0:\n                # swap min/max values as a negative number will make\n                # the min our max and the max our min.\n                min_ending_at_i, max_ending_at_i = max_ending_at_i, min_ending_at_i\n            # solve the new max/min ending at i.\n            max_ending_at_i = max(num, max_ending_at_i*num)\n            min_ending_at_i = min(num, min_ending_at_i*num)\n            # update our max product\n            max_product = max(max_product, max_ending_at_i)\n        # return our max product\n        return max_product\n")))))}y.isMDXComponent=!0}}]);