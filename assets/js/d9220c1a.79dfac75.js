"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[35807],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>c});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=m(t),h=i,c=u["".concat(s,".").concat(h)]||u[h]||p[h]||a;return t?r.createElement(c,o(o({ref:n},d),{},{components:t})):r.createElement(c,o({ref:n},d))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var m=2;m<a;m++)o[m]=t[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},11950:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var r=t(87462),i=(t(67294),t(3905));const a={description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/search-in-rotated-sorted-array/"},o="0033 - Search in Rotated Sorted Array (Medium)",l={unversionedId:"0000-0099/search-in-rotated-sorted-array-medium",id:"0000-0099/search-in-rotated-sorted-array-medium",title:"0033 - Search in Rotated Sorted Array (Medium)",description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/search-in-rotated-sorted-array/",source:"@site/solutions/0000-0099/0033-search-in-rotated-sorted-array-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/search-in-rotated-sorted-array-medium",permalink:"/solutions/0000-0099/search-in-rotated-sorted-array-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0033-search-in-rotated-sorted-array-medium.md",tags:[],version:"current",sidebarPosition:33,frontMatter:{description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/search-in-rotated-sorted-array/"},sidebar:"tutorialSidebar",previous:{title:"0028 - Find the Index of the First Occurrence in a String (Easy)",permalink:"/solutions/0000-0099/find-the-index-of-the-first-occurrence-in-a-string-easy"},next:{title:"0034 - Find First and Last Position of Element in Sorted Array (Medium)",permalink:"/solutions/0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium"}},s={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},u=d("Tabs"),p=d("TabItem"),h=d("SolutionAuthor"),c={toc:m},g="wrapper";function f(e){let{components:n,...t}=e;return(0,i.kt)(g,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0033---search-in-rotated-sorted-array-medium"},"0033 - Search in Rotated Sorted Array (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/search-in-rotated-sorted-array/"},"https://leetcode.com/problems/search-in-rotated-sorted-array/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"There is an integer array nums sorted in ascending order (with ",(0,i.kt)("inlineCode",{parentName:"p"},"distinct")," values)."),(0,i.kt)("p",null,"Prior to being passed to your function, nums is possibly rotated at an unknown pivot index $k (1 <= k < nums.length)$ such that the resulting array is ",(0,i.kt)("inlineCode",{parentName:"p"},"[nums[k]$ nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]")," (0-indexed). For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"[0,1,2,4,5,6,7]")," might be rotated at pivot index $3$ and become ",(0,i.kt)("inlineCode",{parentName:"p"},"[4,5,6,7,0,1,2]"),"."),(0,i.kt)("p",null,"Given the array ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," ",(0,i.kt)("strong",{parentName:"p"},"after")," the possible rotation and an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"target"),", return the index of ",(0,i.kt)("inlineCode",{parentName:"p"},"target")," if it is in ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),", or $-1$ if it is not in ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,i.kt)("p",null,"You must write an algorithm with $O(log n)$ runtime complexity."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1], target = 0\nOutput: -1\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 5000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-10^4 <= nums[i] <= 10^4")),(0,i.kt)("li",{parentName:"ul"},"All values of ",(0,i.kt)("inlineCode",{parentName:"li"},"nums")," are ",(0,i.kt)("strong",{parentName:"li"},"unique"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nums")," is a non-decreasing array."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-10^4 <= target <= 10^4"))),(0,i.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,i.kt)("admonition",{title:"Prerequisite",type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../tutorials/basic-topics/binary-search"},"Binary Search")))),(0,i.kt)("p",null,"As a problem stated, the array is rotated, How do we apply a binary search?"),(0,i.kt)("p",null,"Since the array is rotated in ",(0,i.kt)("inlineCode",{parentName:"p"},"Example #1")," assume first half from index $0-3$ is in ascending order, the second half is decending order from the first half."),(0,i.kt)("p",null,"With this approach we can solve the problem by finding the pivot index. Here, pivot is the maximum element in the array."),(0,i.kt)("p",null,"If the given target is greater than the start index element, then the element must be with in the highest element. So reduce the space of the array to $0$ to $pivot-1$, otherwise search in $pivot+1$ to $nums.length - 1$."),(0,i.kt)(u,{mdxType:"Tabs"},(0,i.kt)(p,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(h,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int search(int[] nums, int target) {\n        // Base case\n        if (Objects.isNull(nums) || nums.length == 0) {\n            return -1;\n        }\n        if (nums.length == 1) {\n            return nums[0] == target ? 0 : -1;\n        }\n        int pivot = findPivot(nums);\n        // If pivot not found, Do a normal binary search\n        if (pivot == -1) {\n            return binarySearch(nums, target, 0, nums.length - 1);\n        }\n        if (nums[pivot] == target) {\n            return pivot;\n        }\n        if (target >= nums[0]) {\n            return binarySearch(nums, target, 0, pivot - 1);\n        }\n        return binarySearch(nums, target, pivot + 1, nums.length - 1);\n    }\n\n\n    public int findPivot(int[] nums) {\n        int low = 0, high = nums.length - 1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            // 1. if middle element is greater than next element, which means middle element is the highest,\n            // and next element starts in ascending order\n            if (mid < high && nums[mid] > nums[mid + 1]) {\n                return mid;\n            }\n            // 2. if middle element is smaller than the previous element, which means from middle element,\n            // elements are placed in ascending order, and previous element is the highest\n            if (mid > low && nums[mid] < nums[mid - 1]) {\n                return mid - 1;\n            }\n            // 3. If middle element less than the start element, the highest element or arrays are the left side\n            if (nums[mid] <= nums[low]) {\n                high = mid - 1;\n            } else {\n                // 4. Search after middle element, to find the pivot which is the highest element\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n\n    public int binarySearch(int[] nums, int target, int low, int high) {\n        int mid = 0;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (target < nums[mid]) {\n                high = mid - 1;\n            } else if (target > nums[mid]) {\n                low = mid + 1;\n            } else {\n                return mid;\n            }\n        }\n        return -1;\n    }\n}\n"))),(0,i.kt)(p,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        l, r = 0, len(nums) - 1\n\n        while l <= r:\n            # mid value\n            mid = (l + r) // 2\n            # if mid is target\n            if target == nums[mid]:\n                return mid\n\n            # are we in left sorted portion or right sorted portion\n            if nums[mid] >= nums[l]:\n                # we are in right sorted portion in this case\n                if target > nums[mid] or target < nums[l]:\n                    l = mid + 1\n                # we are in left sorted portion in this case\n                else:\n                    r = mid - 1\n            else:\n                # we are in left sorted portion in this case\n                if target < nums[mid] or target > nums[r]:\n                    r = mid - 1\n                # we are in right sorted portion in this case\n                else:\n                    l = mid + 1\n\n        return -1\n"))),(0,i.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function (nums, target) {\n  let l = 0;\n  let r = nums.length - 1;\n  while (l <= r) {\n    //mid value\n    let mid = Math.floor((l + r) / 2);\n    // if mid is target -> return mid index\n    if (nums[mid] == target) return mid;\n    // are we in left or right sorted portion\n    if (nums[mid] >= nums[l]) {\n      // we are in right sorted portion\n      if (target > nums[mid] || target < nums[l]) {\n        l = mid + 1;\n        // we are in left sorted portion\n      } else {\n        r = mid - 1;\n      }\n    } else {\n      // we are in left sorted portion\n      if (target < nums[mid] || target > nums[r]) {\n        r = mid - 1;\n        // we are in right sorted portion\n      } else {\n        l = mid + 1;\n      }\n    }\n  }\n  return -1;\n};\n"))),(0,i.kt)(p,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int l = 0;\n        int r = nums.size() - 1;\n        while (l <= r) {\n            // mid value\n            int mid = l + (r - l) / 2;\n            // if mid is target return mid index\n            if (nums[mid] == target) {\n                return mid;\n            }\n            // are we in right or left sorted portion\n            if (nums[mid] >= nums[l]) {\n                // we are in right sorted portion\n                if (target > nums[mid] || target < nums[l]) {\n                    l = mid + 1;\n                // we are in left sorted portion\n                } else {\n                    r = mid - 1;\n                }\n            } else {\n                // we are in left sorted portion \n                if (target < nums[mid] || target > nums[r]) {\n                    r = mid - 1;\n                // we are in right sorted portion\n                } else {\n                    l = mid + 1;\n                }\n            }\n        }\n        return -1;\n    }\n};\n")))))}f.isMDXComponent=!0}}]);