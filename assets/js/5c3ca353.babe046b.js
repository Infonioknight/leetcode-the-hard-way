"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[19232],{3905:(e,t,r)=>{r.d(t,{Zo:()=>h,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},h=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),p=u(r),d=o,f=p["".concat(s,".").concat(d)]||p[d]||c[d]||a;return r?n.createElement(f,l(l({ref:t},h),{},{components:r})):n.createElement(f,l({ref:t},h))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},61577:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>v,frontMatter:()=>a,metadata:()=>i,suggestedProblems:()=>h,toc:()=>u});var n=r(87462),o=(r(67294),r(3905));const a={title:"Breadth First Search (BFS)",description:"In BFS, we explore all the closest nodes first before going one step further.",hide_table_of_contents:!0,keywords:["leetcode","tutorial","breadth first search","bfs","algorithm"]},l=void 0,i={unversionedId:"graph-theory/breadth-first-search",id:"graph-theory/breadth-first-search",title:"Breadth First Search (BFS)",description:"In BFS, we explore all the closest nodes first before going one step further.",source:"@site/tutorials/graph-theory/breadth-first-search.md",sourceDirName:"graph-theory",slug:"/graph-theory/breadth-first-search",permalink:"/tutorials/graph-theory/breadth-first-search",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/tutorials/graph-theory/breadth-first-search.md",tags:[],version:"current",frontMatter:{title:"Breadth First Search (BFS)",description:"In BFS, we explore all the closest nodes first before going one step further.",hide_table_of_contents:!0,keywords:["leetcode","tutorial","breadth first search","bfs","algorithm"]},sidebar:"tutorialSidebar",previous:{title:"Binary Tree",permalink:"/tutorials/graph-theory/binary-tree"},next:{title:"Depth First Search (DFS)",permalink:"/tutorials/graph-theory/depth-first-search"}},s={},u=[{value:"Overview",id:"overview",level:2}],h=[{problemName:"0199 -  Binary Tree Right Side View",difficulty:"Medium",leetCodeLink:"https://leetcode.com/problems/binary-tree-right-side-view/",solutionLink:"../../solutions/0100-0199/binary-tree-right-side-view-medium"},{problemName:"0103 - Binary Tree Zigzag Level Order Traversal",difficulty:"Medium",leetCodeLink:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/",solutionLink:"../../solutions/0100-0199/binary-tree-zigzag-level-order-traversal-medium"},{problemName:"0101 - Symmetric Tree",difficulty:"Easy",leetCodeLink:"https://leetcode.com/problems/symmetric-tree/",solutionLink:"../../solutions/0100-0199/symmetric-tree-easy"}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},c=p("TutorialAuthors"),d=p("Table"),f={toc:u,suggestedProblems:h},m="wrapper";function v(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(c,{names:"@heiheihang",mdxType:"TutorialAuthors"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"In Breadth-First Search (BFS), we explore ",(0,o.kt)("strong",{parentName:"p"},"all")," the closest nodes first before going one step further. A good example would be:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Given a binary tree, find the ",(0,o.kt)("strong",{parentName:"p"},"closest node")," from ",(0,o.kt)("strong",{parentName:"p"},"root")," that has the ",(0,o.kt)("strong",{parentName:"p"},"value 3"))),(0,o.kt)("p",null,"Of course, you may use DFS to find the solution by iterating all nodes. However, as you can imagine, if the target node is the right child of the root, we have wasted so much time iterating the entire left branch of the root!"),(0,o.kt)("p",null,"BFS would immediately locate the closest target node without wasting time iterating deeper nodes."),(0,o.kt)("p",null,"We will introduce the following template for BFS:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def findTargetNode(root, targetValue):\n    if(root is None):\n        return None\n    \n    #currentLevel contains the nodes with the same distance to root (closest so far)\n    currentLevel = [root]\n    \n    #we increase our depth one by one as long as there is still node\n    while(len(level) > 0):\n    \n        #we store the current level node's children in nextLevel\n        nextLevel = []\n        \n        for node in currentLevel:\n            #skip if the node is None\n            if(node is None):\n                continue\n            #we can be sure the target node is the CLOSEST so we can return\n            #because we are traversing the tree level by level\n            if(node.val == targetValue):\n                return node\n                \n            #add the children to nextLevel\n            nextLevel.append(node.left)\n            nextLevel.append(node.right)\n        #change the currentLevel to nextLevel (no target node in this level, go next)\n        currentLevel = nextLevel\n    \n    #if no target node has been returned    \n    return None\n    \n    \n")),(0,o.kt)("p",null,"In general, we use a ",(0,o.kt)("strong",{parentName:"p"},"queue")," to model ",(0,o.kt)("strong",{parentName:"p"},"BFS.")," As the head of the queue represents the closest nodes, and the tail of the queue represents the furthest nodes. We look at the head of the queue, and add new nodes to the end of the queue."),(0,o.kt)("p",null,"We can start applying this template to the following problem (",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/average-of-levels-in-binary-tree/"},"LeetCode Link"),")."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Given the ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," of a binary tree, return ",(0,o.kt)("em",{parentName:"p"},"the average value of the nodes on each level in the form of an array"),". Answers within ",(0,o.kt)("inlineCode",{parentName:"p"},"10-5")," of the actual answer will be accepted.")),(0,o.kt)("p",null,"In this problem, our primary goal is to separate the tree into different levels. For example, we have these following levels:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"[1]")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"[2,3]")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"[4, _, 3, 5]"))),(0,o.kt)("p",null,"When we can separate the tree into different levels, we are just one step before obtaining the solution (which is just getting the averages of each list)"),(0,o.kt)("p",null,"The challenge here is how can we separate the tree into different levels. We can use the template above with ",(0,o.kt)("inlineCode",{parentName:"p"},"currentLevel")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"nextLevel"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def averageOfLevels(self, root: Optional[TreeNode]) -> List[float]:\n        answer = []\n\n        #saves the nodes in the currentLevel\n        currentLevel = [root]\n\n        #continue traversing as long as there is still unexplored nodes\n        while(len(currentLevel) > 0):\n\n            #stores the children of the nodes in the currentLevel\n            nextLevel = []\n\n            #stores the total sum of the currentLevel nodes\n            currentLevelNodeCount = 0\n            \n            currentLevelSum = 0\n            for node in currentLevel:\n                if(node is None):\n                    continue\n                currentLevelSum += node.val\n                nextLevel.append(node.left)\n                nextLevel.append(node.right)\n                currentLevelNodeCount += 1\n            #calculate the level average\n            if currentLevelNodeCount:\n                currentLevelAverage = currentLevelSum / currentLevelNodeCount\n                \n                answer.append(currentLevelAverage)\n\n            #explore the nextLevel\n            currentLevel = nextLevel\n        return answer\n")),(0,o.kt)("p",null,"We should keep practising the this template of BFS in these similar problems."),(0,o.kt)(d,{title:"Suggested Problems",data:h,mdxType:"Table"}))}v.isMDXComponent=!0}}]);