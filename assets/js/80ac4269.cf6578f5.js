"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[61400],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>$});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=m(n),d=i,$=c["".concat(l,".").concat(d)]||c[d]||p[d]||a;return n?r.createElement($,o(o({ref:t},u),{},{components:n})):r.createElement($,o({ref:t},u))}));function $(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var m=2;m<a;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},95718:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>$,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var r=n(87462),i=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/arithmetic-slices/"},o="0413 - Arithmetic Slices (Medium)",s={unversionedId:"0400-0499/arithmetic-slices-medium",id:"0400-0499/arithmetic-slices-medium",title:"0413 - Arithmetic Slices (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/arithmetic-slices/",source:"@site/solutions/0400-0499/0413-arithmetic-slices-medium.md",sourceDirName:"0400-0499",slug:"/0400-0499/arithmetic-slices-medium",permalink:"/solutions/0400-0499/arithmetic-slices-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0413-arithmetic-slices-medium.md",tags:[],version:"current",sidebarPosition:413,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/arithmetic-slices/"},sidebar:"tutorialSidebar",previous:{title:"0404 - Sum of Left Leaves (Easy)",permalink:"/solutions/0400-0499/sum-of-left-leaves-easy"},next:{title:"0416 - Partition Equal Subset Sum (Medium)",permalink:"/solutions/0400-0499/partition-equal-subset-sum-medium"}},l={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DP",id:"approach-1-dp",level:2}],u=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var c;const p={toc:m},d="wrapper";function $(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0413---arithmetic-slices-medium"},"0413 - Arithmetic Slices (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/arithmetic-slices/"},"https://leetcode.com/problems/arithmetic-slices/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"An integer array is called arithmetic if it consists of ",(0,i.kt)("strong",{parentName:"p"},"at least three elements")," and if the difference between any two consecutive elements is the same."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example, ",(0,i.kt)("inlineCode",{parentName:"li"},"[1,3,5,7,9]"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"[7,7,7,7]"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"[3,-1,-5,-9]")," are arithmetic sequences.")),(0,i.kt)("p",null,"Given an integer array ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),", return ",(0,i.kt)("em",{parentName:"p"},"the number of arithmetic ",(0,i.kt)("strong",{parentName:"em"},"subarrays")," of")," ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"subarray")," is a contiguous subsequence of the array."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3,4]\nOutput: 3\nExplanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [1]\nOutput: 0 \n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 5000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-1000 <= nums[i] <= 1000"))),(0,i.kt)("h2",{id:"approach-1-dp"},"Approach 1: DP"),(0,i.kt)("p",null,"Let's say we have the input $$nums = ","[1,2,3,4,5,6,7]","$$. Starting the third element, we know that $$","[1,2,3]","$$ is an arithmetic subarrays. If we process the next number $$4$$, we can have a new one $$","[2,3,4]","$$. Also we can add $$4$$ to previous result $$","[1,2,3]","$$ to form $$","[1,2,3,4]","$$. In total, we got $$3$$arithmetic subarrays if we end at number $$4$$. What about ending at number $$5$$? Similarly, we could have a new one $$","[3,4,5]","$$. It extends the previous results $$","[1,2,3]","$$, $$","[2,3,4]","$$,$$","[1,2,3,4]","$$ and we can add $$5$$to form $$","[1,2,3,4,5]","$$ and $$","[2,3,4,5]","$$. We can see that the number of arithmetic subarrays at $$i$$ won't be affected by the indices beyond. Hence, we can use DP to solve it."),(0,i.kt)("p",null,"Let $$dp","[i]","$$ be the number of arithmetic subarrays that end at $$i$$. If it can form an arithmetic subarray, then $$dp","[i]"," = dp","[i - 1]"," + 1$$. "),(0,i.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int numberOfArithmeticSlices(vector<int>& nums) {\n        int ans = 0, n = nums.size();\n        vector<int> dp(n);\n        for(int i = 2; i < n; i++) {\n            // it can form an arithmetic subarray\n            if(nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]) {\n                dp[i] = dp[i - 1] + 1;\n            } \n            ans += dp[i];\n        }\n        return ans;\n    }\n};\n")),(0,i.kt)("p",null,"As we can see that, the transition is based on the previous result. Hence we can optimize the space by using a variable $$dp$$ to track the number of arithmetic subarrays. If it is found, we increase it by $$1$$ and add $$dp$$ to $$ans$$. If at some point we find it is not arithmetic, then we can simply reset $$dp$$ to $$0$$."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int numberOfArithmeticSlices(vector<int>& nums) {\n        int dp = 0, ans = 0;\n        for(int i = 2; i < nums.size(); i++) {\n            // it can form an arithmetic subarray\n            if(nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]) {\n                dp += 1, ans += dp;\n            } else {\n                dp = 0;\n            }\n        }\n        return ans;\n    }\n};\n")))}$.isMDXComponent=!0}}]);