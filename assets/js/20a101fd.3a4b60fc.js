"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[20735],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},c=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),l=o(n),d=r,h=l["".concat(p,".").concat(d)]||l[d]||u[d]||i;return n?a.createElement(h,m(m({ref:t},c),{},{components:n})):a.createElement(h,m({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,m=new Array(i);m[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[l]="string"==typeof e?e:r,m[1]=s;for(var o=2;o<i;o++)m[o]=n[o];return a.createElement.apply(null,m)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},87829:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>m,default:()=>N,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var a=n(87462),r=(n(67294),n(3905));const i={description:"Author: @wingkwong, @dhanu084 | https://leetcode.com/problems/minimum-consecutive-cards-to-pick-up/"},m="2260 - Minimum Consecutive Cards to Pick Up (Medium)",s={unversionedId:"2200-2299/minimum-consecutive-cards-to-pick-up-medium",id:"2200-2299/minimum-consecutive-cards-to-pick-up-medium",title:"2260 - Minimum Consecutive Cards to Pick Up (Medium)",description:"Author: @wingkwong, @dhanu084 | https://leetcode.com/problems/minimum-consecutive-cards-to-pick-up/",source:"@site/solutions/2200-2299/2260-minimum-consecutive-cards-to-pick-up-medium.md",sourceDirName:"2200-2299",slug:"/2200-2299/minimum-consecutive-cards-to-pick-up-medium",permalink:"/solutions/2200-2299/minimum-consecutive-cards-to-pick-up-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2260-minimum-consecutive-cards-to-pick-up-medium.md",tags:[],version:"current",sidebarPosition:2260,frontMatter:{description:"Author: @wingkwong, @dhanu084 | https://leetcode.com/problems/minimum-consecutive-cards-to-pick-up/"},sidebar:"tutorialSidebar",previous:{title:"2259 - Remove Digit From Number to Maximize Result (Easy)",permalink:"/solutions/2200-2299/remove-digit-from-number-to-maximize-result-easy"},next:{title:"2261 - K Divisible Elements Subarrays (Medium)",permalink:"/solutions/2200-2299/k-divisible-elements-subarrays-medium"}},p={},o=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Hash Map",id:"approach-1-hash-map",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},l=c("Tabs"),u=c("TabItem"),d=c("SolutionAuthor"),h={toc:o},k="wrapper";function N(e){let{components:t,...n}=e;return(0,r.kt)(k,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2260---minimum-consecutive-cards-to-pick-up-medium"},"2260 - Minimum Consecutive Cards to Pick Up (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-consecutive-cards-to-pick-up/"},"https://leetcode.com/problems/minimum-consecutive-cards-to-pick-up/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given an integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"cards")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"cards[i]")," represents the ",(0,r.kt)("strong",{parentName:"p"},"value")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," card. A pair of cards are ",(0,r.kt)("strong",{parentName:"p"},"matching")," if the cards have the ",(0,r.kt)("strong",{parentName:"p"},"same")," value."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the ",(0,r.kt)("strong",{parentName:"em"},"minimum")," number of ",(0,r.kt)("strong",{parentName:"em"},"consecutive")," cards you have to pick up to have a pair of ",(0,r.kt)("strong",{parentName:"em"},"matching")," cards among the picked cards.")," If it is impossible to have matching cards, return ",(0,r.kt)("inlineCode",{parentName:"p"},"-1"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: cards = [3,4,2,3,4,7]\nOutput: 4\nExplanation: We can pick up the cards [3,4,2,3] which contain a matching pair of cards with value 3. Note that picking up the cards [4,2,3,4] is also optimal.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: cards = [1,0,5,3]\nOutput: -1\nExplanation: There is no way to pick up a set of consecutive cards that contain a pair of matching cards.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= cards.length <= 10^5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= cards[i] <= 10^6"))),(0,r.kt)("h2",{id:"approach-1-hash-map"},"Approach 1: Hash Map"),(0,r.kt)("p",null,"Time complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,r.kt)("p",null,"Space complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))," if there are no pairs"),(0,r.kt)("p",null,"Store the index for each number, check each element with size > 1 and find out the minimum gap between them."),(0,r.kt)(l,{mdxType:"Tabs"},(0,r.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int minimumCardPickup(vector<int>& cards) {\n        int n = cards.size(), ans = INT_MAX;\n        unordered_map<int, vector<int>> m;\n        // store the indices for each number\n        for (int i = 0; i < n; i++) m[cards[i]].push_back(i);\n        for (auto& x : m) {\n            // a pair needs to have at least 2 elements with same value\n            for (int i = 1; i < x.second.size(); i++) {\n                // calculate the min gap\n                ans = min(ans, x.second[i] - x.second[i - 1] + 1);\n            }\n        }\n        return ans == INT_MAX ? -1 : ans;\n    }\n};\n"))),(0,r.kt)(u,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)(d,{name:"@dhanu084",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def minimumCardPickup(self, cards: List[int]) -> int:\n        seen = {}\n        length = inf\n        n = len(cards)\n\n        for i in range(n):\n            # check if there exists a card with same number\n            if cards[i] in seen:\n                # if present, then it represents a pair\n                # calculate the current lenth and update min length\n                length = min(length, i - seen.get(cards[i]) + 1)\n            # add the card with the index in the dictionary\n            seen[cards[i]] = i\n\n        # if no pair is found length will be inf so return -1\n        return length if length != inf else -1\n")))))}N.isMDXComponent=!0}}]);