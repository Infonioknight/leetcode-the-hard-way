"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[60392],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,h=p["".concat(s,".").concat(m)]||p[m]||c[m]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},91475:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>b,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/valid-sudoku/"},i="0036 - Valid Sudoku (Easy)",l={unversionedId:"0000-0099/valid-sudoku-easy",id:"0000-0099/valid-sudoku-easy",title:"0036 - Valid Sudoku (Easy)",description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/valid-sudoku/",source:"@site/solutions/0000-0099/0036-valid-sudoku-easy.md",sourceDirName:"0000-0099",slug:"/0000-0099/valid-sudoku-easy",permalink:"/solutions/0000-0099/valid-sudoku-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0036-valid-sudoku-easy.md",tags:[],version:"current",sidebarPosition:36,frontMatter:{description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/valid-sudoku/"},sidebar:"tutorialSidebar",previous:{title:"0035 - Search Insert Position (Easy)",permalink:"/solutions/0000-0099/search-insert-position-easy"},next:{title:"0037 - Sudoku Solver (Hard)",permalink:"/solutions/0000-0099/sudoku-solver-hard"}},s={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: HashSet",id:"approach-1-hashset",level:2},{value:"Approach 2: Standard",id:"approach-2-standard",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},p=u("Tabs"),c=u("TabItem"),m=u("SolutionAuthor"),h={toc:d},k="wrapper";function b(e){let{components:t,...n}=e;return(0,o.kt)(k,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0036---valid-sudoku-easy"},"0036 - Valid Sudoku (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/valid-sudoku/"},"https://leetcode.com/problems/valid-sudoku/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Determine if a ",(0,o.kt)("inlineCode",{parentName:"p"},"9 x 9")," Sudoku board is valid. Only the filled cells need to be validated ",(0,o.kt)("strong",{parentName:"p"},"according to the following rules:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Each row must contain the digits ",(0,o.kt)("inlineCode",{parentName:"li"},"1-9")," without repetition."),(0,o.kt)("li",{parentName:"ol"},"Each column must contain the digits ",(0,o.kt)("inlineCode",{parentName:"li"},"1-9")," without repetition."),(0,o.kt)("li",{parentName:"ol"},"Each of the nine ",(0,o.kt)("inlineCode",{parentName:"li"},"3 x 3")," sub-boxes of the grid must contain the digits ",(0,o.kt)("inlineCode",{parentName:"li"},"1-9")," without repetition.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A Sudoku board (partially filled) could be valid but is not necessarily solvable."),(0,o.kt)("li",{parentName:"ul"},"Only the filled cells need to be validated according to the mentioned rules.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"5 3 .  . 7 .  . . .  \n6 . .  1 9 5  . . .  \n. 9 8  . . .  . 6 .  \n\n8 . .  . 6 .  . . 3  \n4 . .  8 . 3  . . 1  \n7 . .  . 2 .  . . 6  \n\n. 6 .  . . .  2 8 .  \n. . .  4 1 9  . . 5  \n. . .  . 8 .  . 7 9 \n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: board = \n[["5","3",".",".","7",".",".",".","."]\n,["6",".",".","1","9","5",".",".","."]\n,[".","9","8",".",".",".",".","6","."]\n,["8",".",".",".","6",".",".",".","3"]\n,["4",".",".","8",".","3",".",".","1"]\n,["7",".",".",".","2",".",".",".","6"]\n,[".","6",".",".",".",".","2","8","."]\n,[".",".",".","4","1","9",".",".","5"]\n,[".",".",".",".","8",".",".","7","9"]]\nOutput: true\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: board = \n[["8","3",".",".","7",".",".",".","."]\n,["6",".",".","1","9","5",".",".","."]\n,[".","9","8",".",".",".",".","6","."]\n,["8",".",".",".","6",".",".",".","3"]\n,["4",".",".","8",".","3",".",".","1"]\n,["7",".",".",".","2",".",".",".","6"]\n,[".","6",".",".",".",".","2","8","."]\n,[".",".",".","4","1","9",".",".","5"]\n,[".",".",".",".","8",".",".","7","9"]]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8\'s in the top left 3x3 sub-box, it is invalid.\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"board.length == 9")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"board[i].length == 9")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"board[i][j]")," is a digit ",(0,o.kt)("inlineCode",{parentName:"li"},"1-9")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"'.'"),".")),(0,o.kt)("h2",{id:"approach-1-hashset"},"Approach 1: HashSet"),(0,o.kt)("p",null,"Every value in the row or column or ",(0,o.kt)("inlineCode",{parentName:"p"},"3 x 3")," block, the value is unique, With the help of this simple logic, add the Numbers in the HashSet, Add ",(0,o.kt)("inlineCode",{parentName:"p"},"num")," value for ",(0,o.kt)("inlineCode",{parentName:"p"},"m"),"th row and for ",(0,o.kt)("inlineCode",{parentName:"p"},"n"),"th column and the same for ",(0,o.kt)("inlineCode",{parentName:"p"},"3 x 3")," matrix. "),(0,o.kt)("p",null,"If the same value repeat again for the same row or column or ",(0,o.kt)("inlineCode",{parentName:"p"},"3 x 3")," block, then the given sudoku is not valid, otherwise is valid."),(0,o.kt)("p",null,"Time Complexity: $O(m * n)$, where $m$ - # of rows, $n$ - # of columns, "),(0,o.kt)("p",null,"Space complexity: $O(1)$, since the values are fixed for ",(0,o.kt)("inlineCode",{parentName:"p"},"9 x 9")," board"),(0,o.kt)(p,{mdxType:"Tabs"},(0,o.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(m,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'class Solution {\n    public boolean isValidSudoku(char[][] board) {\n        Set<String> seen = new HashSet<>();\n        for (int r = 0; r < 9; r++) {\n            for (int c = 0; c < 9; c++) {\n                int num = board[r][c];\n                if (num != \'.\') {\n                    if (!seen.add(num + " in row " + r) || !seen.add(num + " in column " + c)\n                            || !seen.add(num + " in block " + (r / 3) + "-" + (c / 3))) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n}\n'))),(0,o.kt)(c,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(m,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Solution:\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\n        cols = collections.defaultdict(set)\n        rows = collections.defaultdict(set)\n        squares = collections.defaultdict(set)\n        \n        for r in range(9):\n            for c in range(9):\n                # if it\'s empty skip it\n                if board[r][c] == ".":\n                    continue\n                # have we found a duplicate \n                if (board[r][c] in rows[r] or \n                    board[r][c] in cols[c] or \n                    board[r][c] in squares[(r // 3, c // 3)]):\n                    return False\n                # if it is valid\n                cols[c].add(board[r][c])\n                rows[r].add(board[r][c])\n                squares[(r // 3, c // 3)].add(board[r][c])\n        # if we never detect duplicates\n        return True\n')))),(0,o.kt)("h2",{id:"approach-2-standard"},"Approach 2: Standard"),(0,o.kt)("p",null,"Iterate over rows and columns and ",(0,o.kt)("inlineCode",{parentName:"p"},"3 x 3")," block to check if the number is repeats. "),(0,o.kt)("p",null,"Since, it's easier to find the duplicate number on the same row or column. But how to find the ",(0,o.kt)("inlineCode",{parentName:"p"},"3 x 3")," block for any given index in the grid. "),(0,o.kt)("p",null,"For example, first ",(0,o.kt)("inlineCode",{parentName:"p"},"3 x 3")," starts and end in the range of $(0, 0)$ to $(2, 2)$. Suppose, if we are in the cell of $(1, 2)$, how to find the start range of this cell which is same above mentioned. "),(0,o.kt)("p",null,"It's simple, just ",(0,o.kt)("inlineCode",{parentName:"p"},"row - row % sqrt(board.length)"),", Either we can use $sqrt$ approach or just use 3, since we know here Sudoku is ",(0,o.kt)("inlineCode",{parentName:"p"},"9 x 9")," matrix. "),(0,o.kt)("p",null,"For the above said cell $(1, 2)$, start range of this block is $(0, 0)$, since the start is clear, end is always within ",(0,o.kt)("inlineCode",{parentName:"p"},"3 x 3")," from the start index. "),(0,o.kt)("p",null,"Time complexity: $O(n^2)$"),(0,o.kt)("p",null,"Space complexity: $O(n)$"),(0,o.kt)(p,{mdxType:"Tabs"},(0,o.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(m,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean isValidSudoku(char[][] board) {\n        for (int row = 0; row < board.length; row++) {\n            for (int col = 0; col < board[0].length; col++) {\n                if (board[row][col] != '.' && !isValid(board, row, col, board[row][col])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    \n    public boolean isValid(char[][] board, int row, int col, int num) {\n        // Check the row, from col 0 to 8\n        for (int i = 0; i < board.length; i++) {\n            if (i != col && board[row][i] == num) {\n                return false;\n            }\n        }\n        // Check the column, from row 0 to row 8\n        for (int i = 0; i < board[0].length; i++) {\n            if (i != row && board[i][col] == num) {\n                return false;\n            }\n        }\n        //\n        int sqrt = (int) Math.sqrt(board.length);\n        int rowStart = row - row % sqrt;\n        int colStart = col - col % sqrt;\n        for (int r = rowStart; r < rowStart + sqrt; r++) {\n            for (int c = colStart; c < colStart + sqrt; c++) {\n                if (row != r && col != c && board[r][c] == num) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n")))))}b.isMDXComponent=!0}}]);