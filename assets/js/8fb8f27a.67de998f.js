"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[94702],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>g});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(r),d=o,g=c["".concat(l,".").concat(d)]||c[d]||u[d]||s;return r?n.createElement(g,a(a({ref:t},m),{},{components:r})):n.createElement(g,a({ref:t},m))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},73229:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>k,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const s={description:"Author: @wingkwong | https://leetcode.com/problems/greatest-common-divisor-of-strings/",tags:["Math","String"]},a="1071 - Greatest Common Divisor of Strings (Easy)",i={unversionedId:"1000-1099/greatest-common-divisor-of-strings-easy",id:"1000-1099/greatest-common-divisor-of-strings-easy",title:"1071 - Greatest Common Divisor of Strings (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/greatest-common-divisor-of-strings/",source:"@site/solutions/1000-1099/1071-greatest-common-divisor-of-strings-easy.md",sourceDirName:"1000-1099",slug:"/1000-1099/greatest-common-divisor-of-strings-easy",permalink:"/solutions/1000-1099/greatest-common-divisor-of-strings-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1000-1099/1071-greatest-common-divisor-of-strings-easy.md",tags:[{label:"Math",permalink:"/solutions/tags/math"},{label:"String",permalink:"/solutions/tags/string"}],version:"current",sidebarPosition:1071,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/greatest-common-divisor-of-strings/",tags:["Math","String"]},sidebar:"tutorialSidebar",previous:{title:"1066 - Campus Bikes II (Medium)",permalink:"/solutions/1000-1099/campus-bikes-ii-medium"},next:{title:"1100 - 1199",permalink:"/solutions/category/1100---1199"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: TBC",id:"approach-1-tbc",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},c=m("Tabs"),u=m("TabItem"),d=m("SolutionAuthor"),g={toc:p},f="wrapper";function k(e){let{components:t,...r}=e;return(0,o.kt)(f,(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1071---greatest-common-divisor-of-strings-easy"},"1071 - Greatest Common Divisor of Strings (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/greatest-common-divisor-of-strings/"},"https://leetcode.com/problems/greatest-common-divisor-of-strings/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"For two strings ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"t"),', we say "',(0,o.kt)("inlineCode",{parentName:"p"},"t")," divides ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),'" if and only if ',(0,o.kt)("inlineCode",{parentName:"p"},"s = t + ... + t")," (i.e., ",(0,o.kt)("inlineCode",{parentName:"p"},"t")," is concatenated with itself one or more times)."),(0,o.kt)("p",null,"Given two strings ",(0,o.kt)("inlineCode",{parentName:"p"},"str1")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"str2"),", return ",(0,o.kt)("em",{parentName:"p"},"the largest string"),(0,o.kt)("inlineCode",{parentName:"p"},"x"),(0,o.kt)("em",{parentName:"p"},"such that"),(0,o.kt)("inlineCode",{parentName:"p"},"x"),(0,o.kt)("em",{parentName:"p"},"divides both"),(0,o.kt)("inlineCode",{parentName:"p"},"str1"),(0,o.kt)("em",{parentName:"p"},"and"),(0,o.kt)("inlineCode",{parentName:"p"},"str2"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: str1 = "ABCABC", str2 = "ABC"\nOutput: "ABC"\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: str1 = "ABABAB", str2 = "ABAB"\nOutput: "AB"\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: str1 = "LEET", str2 = "CODE"\nOutput: ""\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= str1.length, str2.length <= 1000")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"str1")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"str2")," consist of English uppercase letters.")),(0,o.kt)("h2",{id:"approach-1-tbc"},"Approach 1: TBC"),(0,o.kt)(c,{mdxType:"Tabs"},(0,o.kt)(u,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'class Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        # if str1 + str2 == str2 + str1 is true, that means they have the same divisor\n        # see example 1: "ABCABC" + "ABC" = "ABC" + "ABCABC"\n        # if there is no such divisor, then return ""\n        # otherwise, we can use gcd to find the lengths\n        # the answer is either \n        # - str1[0 .. g] or \n        # - str2[0 .. g]\n        # where g is the gcd of their length\n        return "" if str1 + str2 != str2 + str1 else str1[:gcd(len(str1), len(str2))]\n')))))}k.isMDXComponent=!0}}]);