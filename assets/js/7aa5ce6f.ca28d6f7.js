"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[59430],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(t),d=i,h=p["".concat(l,".").concat(d)]||p[d]||m[d]||r;return t?a.createElement(h,s(s({ref:n},u),{},{components:t})):a.createElement(h,s({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[p]="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},17746:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>b,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=t(87462),i=(t(67294),t(3905));const r={description:"Author: @wingkwong, @ColeB2 | https://leetcode.com/problems/distinct-subsequences/",tags:["String","Dynamic Programming"]},s="0115 - Distinct Subsequences (Hard)",o={unversionedId:"0100-0199/distinct-subsequences-hard",id:"0100-0199/distinct-subsequences-hard",title:"0115 - Distinct Subsequences (Hard)",description:"Author: @wingkwong, @ColeB2 | https://leetcode.com/problems/distinct-subsequences/",source:"@site/solutions/0100-0199/0115-distinct-subsequences-hard.md",sourceDirName:"0100-0199",slug:"/0100-0199/distinct-subsequences-hard",permalink:"/solutions/0100-0199/distinct-subsequences-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0115-distinct-subsequences-hard.md",tags:[{label:"String",permalink:"/solutions/tags/string"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"}],version:"current",sidebarPosition:115,frontMatter:{description:"Author: @wingkwong, @ColeB2 | https://leetcode.com/problems/distinct-subsequences/",tags:["String","Dynamic Programming"]},sidebar:"tutorialSidebar",previous:{title:"0113 - Path Sum II (Medium)",permalink:"/solutions/0100-0199/path-sum-ii-medium"},next:{title:"0121 - Best Time to Buy and Sell Stock (Easy)",permalink:"/solutions/0100-0199/best-time-to-buy-and-sell-stock-easy"}},l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2},{value:"Approach 2: Dynamic Programming (Space Optimised)",id:"approach-2-dynamic-programming-space-optimised",level:2},{value:"Approach 3: Dynamic Programming - Memoization",id:"approach-3-dynamic-programming---memoization",level:2}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},p=u("Tabs"),m=u("TabItem"),d=u("SolutionAuthor"),h={toc:c},$="wrapper";function b(e){let{components:n,...t}=e;return(0,i.kt)($,(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0115---distinct-subsequences-hard"},"0115 - Distinct Subsequences (Hard)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/distinct-subsequences/"},"https://leetcode.com/problems/distinct-subsequences/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given two strings ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),", return ",(0,i.kt)("em",{parentName:"p"},"the number of distinct subsequences of ",(0,i.kt)("inlineCode",{parentName:"em"},"s")," which equals ",(0,i.kt)("inlineCode",{parentName:"em"},"t")),"."),(0,i.kt)("p",null,"A string's ",(0,i.kt)("strong",{parentName:"p"},"subsequence")," is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. (i.e., ",(0,i.kt)("inlineCode",{parentName:"p"},'"ACE"')," is a subsequence of ",(0,i.kt)("inlineCode",{parentName:"p"},'"ABCDE"')," while ",(0,i.kt)("inlineCode",{parentName:"p"},'"AEC"')," is not)."),(0,i.kt)("p",null,"The test cases are generated so that the answer fits on a 32-bit signed integer."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "rabbbit", t = "rabbit"\nOutput: 3\nExplanation:\nAs shown below, there are 3 ways you can generate "rabbit" from S.\nrabbbit\nrabbbit\nrabbbit\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "babgbag", t = "bag"\nOutput: 5\nExplanation:\nAs shown below, there are 5 ways you can generate "bag" from S.\nbabgbag\nbabgbag\nbabgbag\nbabgbag\nbabgbag\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= s.length, t.length <= 1000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"s")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"t")," consist of English letters.")),(0,i.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,i.kt)("p",null,"Let $$dp","[i][j]","$$ be the number of distinct subsequences if $$s[0 .. i)$$contains $$t[0 .. j)$$. The base case is when $$t$$ is empty, there is one valid subsequence for each $$i$$. If the subsequence doesn't contain $$s","[i - 1]","$$, then we take $$dp","[i - 1][j]","$$. If $$s","[i - 1]"," == t","[j - 1]","$$, then we need to include $$dp","[i - 1][j - 1]","$$ as well as $$dp","[i - 1][j]","$$."),(0,i.kt)(p,{mdxType:"Tabs"},(0,i.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int numDistinct(string s, string t) {\n        int n = s.size(), m = t.size();\n        unsigned long long dp[n + 1][m + 1];\n        memset(dp, 0, sizeof(dp));\n        for(int i = 0; i <= n; i++) dp[i][0] = 1;\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= m; j++) {\n                dp[i][j] = dp[i - 1][j];\n                if(s[i - 1] == t[j - 1]) {\n                    dp[i][j] += dp[i - 1][j - 1];\n                }\n            }\n        }\n        return dp[n][m];\n    }\n};\n"))),(0,i.kt)(m,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(d,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    # Time Complexity: O(S*T) where s is length of S and t is the\n    # length of T, we must loop through values of s and t.\n    # Space Complexity: O(S*T) to maintain our dp array.\n    def numDistinct(self, s: str, t: str) -> int:\n        # initialize dp array.\n        # T + 1 columns to handle empty string case\n        # S + 1 rows to handle empty string case.\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        # base case: for every subsequence in s, only 1, the empty \n        # string matches up to empty string of t.\n        for i in range(0, len(s) + 1):\n            dp[i][0] = 1\n        # loop through our dp table, skipping the empty string parts.\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                # We should have at least the same amount of matches in \n                # matches in our string s[:i] as we did on s[:i - 1]\n                # matching against t[:j]\n                dp[i][j] = dp[i - 1][j]\n                if s[i - 1] == t[j - 1]:\n                    # Current character does match for s[:i-1] t[j-1]\n                    # then we need to add all the values from the dp\n                    # table of [i-1][j-1]\n                    dp[i][j] += dp[i - 1][j - 1]\n        \n        return dp[len(s)][len(t)]\n")))),(0,i.kt)("h2",{id:"approach-2-dynamic-programming-space-optimised"},"Approach 2: Dynamic Programming (Space Optimised)"),(0,i.kt)("p",null,"In Approach 1, we calculate $$dp","[i][j]","$$ based on the previous row. We can simplify it by using a one dimensional array of size $m$ where $$m$$ is the length of $$t$$ Then we calculate $$dp$$ backwards so that the new value won't affect the calculate of the next value."),(0,i.kt)(p,{mdxType:"Tabs"},(0,i.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int numDistinct(string s, string t) {\n        int n = s.size(), m = t.size();\n        unsigned long long dp[m + 1];\n        memset(dp, 0, sizeof(dp));\n        dp[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = min(i, m); j >= 1; j--) {\n                if (s[i - 1] == t[j - 1]) {\n                    dp[j] += dp[j - 1];\n                }\n            }\n        }\n        return dp[m];\n    }\n};\n")))),(0,i.kt)("h2",{id:"approach-3-dynamic-programming---memoization"},"Approach 3: Dynamic Programming - Memoization"),(0,i.kt)("p",null,"We can also do the problem recursively, going depth-first, and saving all the data on each iteration in case we run into it again. We can again use $$i$$ and $$j$$ to handle checking the characters of $$s","[:i]","$$ to $$t","[:j]","$$. We will have 3 main base cases in our dfs."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"We calculated the subproblem of current $$i$$ and $$j$$ before, so we can return that cached value."),(0,i.kt)("li",{parentName:"ol"},"$$j$$ has reached $$t.length$$. Meaning we reached a subsequence that matches the target string and can return 1."),(0,i.kt)("li",{parentName:"ol"},"$$i$$ has reached $$s.length$$. Meaning we reached the end of string $$s$$ and have not yet found a subsequence that makes the target so we can return 0.")),(0,i.kt)("p",null,"Know those 3 base cases, all we have to do is initialize our subsequence count to be the recursive call at $$i + 1$$ and $$j$$, then once we have that value, check if the characters of $$s,t$$ match at the current $$i,j$$ and if they do we can add the number of subsequences that match our recursive call at $$i + 1$$, $$j + 1$$."),(0,i.kt)("p",null,"Finally remember to cache the subsequence count in our cache using the key of $$(i,j)$$, and returning the subsequence value."),(0,i.kt)("p",null,"Time Complexity: $$O(S*T)$$ where $$S$$ is $$s.length$$ and $$T$$ is $$t.length$$. For each $$i$$ and $$j$$ up to $$s$$ and $$t$$ we make a recursive call to explore all possibilities either including or excluding the $$ith$$ character in $$s$$. By caching the answer to the subproblems, we don't have to do the repeated work."),(0,i.kt)("p",null,"Space Complexity: $$O(S*T)$$, as we have to store the answers to each subproblem inside our hash map cache."),(0,i.kt)(p,{mdxType:"Tabs"},(0,i.kt)(m,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(d,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        # initialize our cache\n        cache = {}\n        # dfs, i, j where i is position in s, j position in t.\n        def dfs(i, j):\n            # if we have calculated s[:i] and t[:j] before:\n            if (i, j) in cache:\n                # return that value\n                return cache[(i, j)]\n            # base case, j reached length t, meaning we found a subsequence\n            if j == len(t):\n                return 1\n            # if i reached the end of s, and we haven't created j isn't\n            # len(t) yet, meaning we haven't created t using s.\n            # We have no subsequences -> return 0\n            if i == len(s):\n                return 0\n            # set current subsequence == subsequences of subproblem where\n            # s[:i + 1] is matched against current t[:j]\n            subseq = dfs(i + 1, j)\n            # check if current ch in subsequence matches target = t[j]\n            if s[i] == t[j]:\n                # then we can add the values from the subsequence of the\n                # next iteration, where s[:i + 1] matched to t[i + 1]\n                subseq += dfs(i + 1, j + 1)\n            # cache our current subsequence value for the i,j for\n            # future subproblems use.\n            cache[(i, j)] = subseq\n            # return that value\n            return subseq\n        # call our algorithm starting with empty strings\n        # s[:0] and t[:0]\n        return dfs(0, 0)\n")))))}b.isMDXComponent=!0}}]);