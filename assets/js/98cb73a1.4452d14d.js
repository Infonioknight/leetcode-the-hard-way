"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[98305],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(r),d=a,g=u["".concat(s,".").concat(d)]||u[d]||c[d]||i;return r?n.createElement(g,o(o({ref:t},m),{},{components:r})):n.createElement(g,o({ref:t},m))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},74897:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>b,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/largest-perimeter-triangle/"},o="0976 - Largest Perimeter Triangle (Easy)",l={unversionedId:"0900-0999/largest-perimeter-triangle-easy",id:"0900-0999/largest-perimeter-triangle-easy",title:"0976 - Largest Perimeter Triangle (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/largest-perimeter-triangle/",source:"@site/solutions/0900-0999/0976-largest-perimeter-triangle-easy.md",sourceDirName:"0900-0999",slug:"/0900-0999/largest-perimeter-triangle-easy",permalink:"/solutions/0900-0999/largest-perimeter-triangle-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0976-largest-perimeter-triangle-easy.md",tags:[],version:"current",sidebarPosition:976,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/largest-perimeter-triangle/"},sidebar:"tutorialSidebar",previous:{title:"0974 - Subarray Sums Divisible by K (Medium)",permalink:"/solutions/0900-0999/subarray-sums-divisible-by-k-medium"},next:{title:"0981 - Time Based Key-Value Store (Medium)",permalink:"/solutions/0900-0999/time-based-key-value-store-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sort",id:"approach-1-sort",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=m("Tabs"),c=m("TabItem"),d=m("SolutionAuthor"),g={toc:p},f="wrapper";function b(e){let{components:t,...r}=e;return(0,a.kt)(f,(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0976---largest-perimeter-triangle-easy"},"0976 - Largest Perimeter Triangle (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/largest-perimeter-triangle/"},"https://leetcode.com/problems/largest-perimeter-triangle/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums"),", return ",(0,a.kt)("em",{parentName:"p"},"the largest perimeter of a triangle with a non-zero area, formed from three of these lengths"),". If it is impossible to form any triangle of a non-zero area, return ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [2,1,2]\nOutput: 5\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,2,1]\nOutput: 0\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"3 <= nums.length <= 10^4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 10^6"))),(0,a.kt)("h2",{id:"approach-1-sort"},"Approach 1: Sort"),(0,a.kt)("p",null,"In order to form a valid triangle, the side lengths of the triangle must satisfy $$a + b > c$$ where $$a \\leq b \\leq c$$. Therefore, we can sort the array and try each $$(a,b,c)$$ tuples to see if it is satisfied. If so, return the sum of three lengths. Else return 0 at the end."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int largestPerimeter(vector<int>& nums) {\n        // sort it first\n        sort(nums.begin(), nums.end());\n        // try the largest one\n        for (int i = nums.size() - 1; i >= 2; i--) {\n            // check if a + b > c is satisfied\n            if (nums[i - 2] + nums[i - 1] > nums[i]) {\n                // valid! non-zero area\n                return nums[i] + nums[i - 1] + nums[i - 2];\n            }\n        }\n        return 0;\n    }\n};\n"))),(0,a.kt)(c,{value:"rs",label:"Rust",mdxType:"TabItem"},(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"impl Solution {\n    pub fn largest_perimeter(mut nums: Vec<i32>) -> i32 {\n        nums.sort_unstable();\n        for i in (2 .. nums.len()).rev() {\n            if (nums[i - 2] + nums[i - 1] > nums[i]) {\n                return nums[i - 2] + nums[i - 1] + nums[i];\n            }\n        }\n        0\n    }\n}\n")),(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"impl Solution {\n    pub fn largest_perimeter(mut nums: Vec<i32>) -> i32 {\n        nums.sort_unstable();\n        for w in nums.windows(3).rev() {\n            if (w[0] + w[1] > w[2]) {\n                return w[0] + w[1] + w[2];\n            }\n        }\n        0\n    }\n}\n")))))}b.isMDXComponent=!0}}]);