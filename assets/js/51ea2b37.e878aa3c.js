"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[82981],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(n),f=r,d=m["".concat(l,".").concat(f)]||m[f]||h[f]||a;return n?i.createElement(d,o(o({ref:t},p),{},{components:n})):i.createElement(d,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<a;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},14786:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return w},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return h}});var i=n(87462),r=n(63366),a=(n(67294),n(3905)),o=["components"],c={description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/pacific-atlantic-water-flow/",tags:["Array","Depth-First Search","Breadth-First Search","Matrix"]},l="0417 - Pacific Atlantic Water Flow (Medium)",s={unversionedId:"0400-0499/pacific-atlantic-water-flow-medium",id:"0400-0499/pacific-atlantic-water-flow-medium",title:"0417 - Pacific Atlantic Water Flow (Medium)",description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/pacific-atlantic-water-flow/",source:"@site/solutions/0400-0499/0417-pacific-atlantic-water-flow-medium.md",sourceDirName:"0400-0499",slug:"/0400-0499/pacific-atlantic-water-flow-medium",permalink:"/leetcode-the-hard-way/solutions/0400-0499/pacific-atlantic-water-flow-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0417-pacific-atlantic-water-flow-medium.md",tags:[{label:"Array",permalink:"/leetcode-the-hard-way/solutions/tags/array"},{label:"Depth-First Search",permalink:"/leetcode-the-hard-way/solutions/tags/depth-first-search"},{label:"Breadth-First Search",permalink:"/leetcode-the-hard-way/solutions/tags/breadth-first-search"},{label:"Matrix",permalink:"/leetcode-the-hard-way/solutions/tags/matrix"}],version:"current",sidebarPosition:417,frontMatter:{description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/pacific-atlantic-water-flow/",tags:["Array","Depth-First Search","Breadth-First Search","Matrix"]},sidebar:"tutorialSidebar",previous:{title:"0413 - Arithmetic Slices (Medium)",permalink:"/leetcode-the-hard-way/solutions/0400-0499/arithmetic-slices-medium"},next:{title:"0421 - Maximum XOR of Two Numbers in an Array",permalink:"/leetcode-the-hard-way/solutions/0400-0499/maximum-xor-of-two-numbers-in-an-array"}},p={},h=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}],m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)}},f=m("Tabs"),d=m("TabItem"),u=m("SolutionAuthor"),g={toc:h};function w(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0417---pacific-atlantic-water-flow-medium"},"0417 - Pacific Atlantic Water Flow (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"There is an ",(0,a.kt)("inlineCode",{parentName:"p"},"m x n")," rectangular island that borders both the ",(0,a.kt)("strong",{parentName:"p"},"Pacific Ocean")," and ",(0,a.kt)("strong",{parentName:"p"},"Atlantic Ocean"),". The ",(0,a.kt)("strong",{parentName:"p"},"Pacific Ocean")," touches the island's left and top edges, and the ",(0,a.kt)("strong",{parentName:"p"},"Atlantic Ocean")," touches the island's right and bottom edges."),(0,a.kt)("p",null,"The island is partitioned into a grid of square cells. You are given an ",(0,a.kt)("inlineCode",{parentName:"p"},"m x n")," integer matrix ",(0,a.kt)("inlineCode",{parentName:"p"},"heights")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"heights[r][c]")," represents the ",(0,a.kt)("strong",{parentName:"p"},"height above sea level")," of the cell at coordinate ",(0,a.kt)("inlineCode",{parentName:"p"},"(r, c)"),"."),(0,a.kt)("p",null,"The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is ",(0,a.kt)("strong",{parentName:"p"},"less than or equal to")," the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"a ",(0,a.kt)("strong",{parentName:"em"},"2D list")," of grid coordinates"),(0,a.kt)("inlineCode",{parentName:"p"},"result"),(0,a.kt)("em",{parentName:"p"},"where"),(0,a.kt)("inlineCode",{parentName:"p"},"result[i] = [ri, ci]"),(0,a.kt)("em",{parentName:"p"},"denotes that rain water can flow from cell"),(0,a.kt)("inlineCode",{parentName:"p"},"(ri, ci)"),(0,a.kt)("em",{parentName:"p"},"to ",(0,a.kt)("strong",{parentName:"em"},"both")," the Pacific and Atlantic oceans"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\nOutput: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\nExplanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:\n[0,4]: [0,4] -> Pacific Ocean \n\xa0      [0,4] -> Atlantic Ocean\n[1,3]: [1,3] -> [0,3] -> Pacific Ocean \n\xa0      [1,3] -> [1,4] -> Atlantic Ocean\n[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean \n\xa0      [1,4] -> Atlantic Ocean\n[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean \n\xa0      [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean\n[3,0]: [3,0] -> Pacific Ocean \n\xa0      [3,0] -> [4,0] -> Atlantic Ocean\n[3,1]: [3,1] -> [3,0] -> Pacific Ocean \n\xa0      [3,1] -> [4,1] -> Atlantic Ocean\n[4,0]: [4,0] -> Pacific Ocean \n       [4,0] -> Atlantic Ocean\nNote that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: heights = [[1]]\nOutput: [[0,0]]\nExplanation: The water can flow from the only cell to the Pacific and Atlantic oceans.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"m == heights.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == heights[r].length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 200")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= heights[r][c] <= 10^5"))),(0,a.kt)("h2",{id:"approach-1-dfs"},"Approach 1: DFS"),(0,a.kt)(f,{mdxType:"Tabs"},(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(u,{name:"@wingkwonmg",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void dfs(vector<vector<int>>& M, vector<vector<int>>& vis, int i, int j) {\n        int m = M.size(), n = M[0].size();\n        // marked this cell (i, j) as visited\n        // so that we won't visit it again\n        vis[i][j] = 1;\n        // perform DFS on the left cell\n        if (i - 1 >= 0 && !vis[i - 1][j] && M[i - 1][j] >= M[i][j]) dfs(M, vis, i - 1, j);\n        // perform DFS on the right cell\n        if (i + 1 < m && !vis[i + 1][j] && M[i + 1][j] >= M[i][j]) dfs(M, vis, i + 1, j);\n        // perform DFS on the top cell\n        if (j - 1 >= 0 && !vis[i][j - 1] && M[i][j - 1] >= M[i][j]) dfs(M, vis, i, j - 1);\n        // perform DFS on the bottom cell\n        if (j + 1 < n && !vis[i][j + 1] && M[i][j + 1] >= M[i][j]) dfs(M, vis, i, j + 1);\n    }\n    \n    vector<vector<int>> pacificAtlantic(vector<vector<int>>& M) {\n        vector<vector<int>> ans;\n        int m = M.size(), n = M[0].size();\n        // P[i][j] = 1 means it is able to flow to pacific ocean\n        vector<vector<int>> P(m, vector<int>(n));\n        // A[i][j] = 1 means it is able to flow to atlantic ocean\n        vector<vector<int>> A(m, vector<int>(n));\n        for(int i = 0; i < m; i++) {\n            // perform dfs starting from the left-most column \n            dfs(M, P, i, 0);\n            // perform dfs starting from the right-most column \n            dfs(M, A, i, n - 1);\n        }\n        for(int i = 0; i < n; i++) {\n            // perform dfs starting from the top-most row\n            dfs(M, P, 0, i);\n            // perform dfs starting from the bottom-most row\n            dfs(M, A, m - 1, i);\n        }\n        // iterate each row\n        for(int i = 0; i < m; i++) {\n            // iterate each column\n            for(int j = 0; j < n; j++) {\n                // if both P[i][j] & A[i][j] are visited\n                // that means this cell can flow to both ocean\n                if(P[i][j] && A[i][j]) {\n                    // then put the coordinate (i, j) to answer\n                    ans.push_back(vector<int>{i, j});\n                }\n            }\n        }\n        return ans;\n    }\n};\n"))),(0,a.kt)(d,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(u,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        rows, cols = len(heights), len(heights[0]) \n        # 2 hashsets to maintain all the positions that can reach two oceans\n        pac, atl = set(), set() \n        \n        def dfs(r, c, visit, prev_height):\n            # if position is already been visited or \n            # if it's out of bounds or if height is to small\n            if ((r, c) in visit or \n                r < 0 or c < 0 or r == rows or c == cols or\n                heights[r][c] < prev_height): \n                return\n            # visit new cell\n            visit.add((r, c)) \n            # run dfs on all four of those neighbours\n            dfs(r + 1, c, visit, heights[r][c])\n            dfs(r - 1, c, visit, heights[r][c])\n            dfs(r, c + 1, visit, heights[r][c])   \n            dfs(r, c - 1, visit, heights[r][c])         \n        \n        # go through every single column in the first row\n        # for the first row and the last row\n        for c in range(cols): \n            dfs(0, c, pac, heights[0][c])\n            dfs(rows - 1, c, atl, heights[rows - 1][c])\n        # for the first column and the last column\n        for r in range(rows): \n            dfs(r, 0, pac, heights[r][0])\n            dfs(r, cols - 1, atl, heights[r][cols - 1])\n        \n        res = []\n        for r in range(rows):\n            for c in range(cols):\n                if (r, c) in pac and (r, c) in atl:\n                    res.append([r, c])\n        return res\n")))))}w.isMDXComponent=!0}}]);