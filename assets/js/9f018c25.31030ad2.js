"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[7446],{3905:function(a,e,t){t.d(e,{Zo:function(){return o},kt:function(){return k}});var n=t(67294);function s(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function m(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function p(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?m(Object(t),!0).forEach((function(e){s(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):m(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function r(a,e){if(null==a)return{};var t,n,s=function(a,e){if(null==a)return{};var t,n,s={},m=Object.keys(a);for(n=0;n<m.length;n++)t=m[n],e.indexOf(t)>=0||(s[t]=a[t]);return s}(a,e);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(a);for(n=0;n<m.length;n++)t=m[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(s[t]=a[t])}return s}var i=n.createContext({}),l=function(a){var e=n.useContext(i),t=e;return a&&(t="function"==typeof a?a(e):p(p({},e),a)),t},o=function(a){var e=l(a.components);return n.createElement(i.Provider,{value:e},a.children)},N={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(a,e){var t=a.components,s=a.mdxType,m=a.originalType,i=a.parentName,o=r(a,["components","mdxType","originalType","parentName"]),c=l(t),k=s,h=c["".concat(i,".").concat(k)]||c[k]||N[k]||m;return t?n.createElement(h,p(p({ref:e},o),{},{components:t})):n.createElement(h,p({ref:e},o))}));function k(a,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof a||s){var m=t.length,p=new Array(m);p[0]=c;var r={};for(var i in e)hasOwnProperty.call(e,i)&&(r[i]=e[i]);r.originalType=a,r.mdxType="string"==typeof a?a:s,p[1]=r;for(var l=2;l<m;l++)p[l]=t[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6059:function(a,e,t){t.r(e),t.d(e,{assets:function(){return N},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return c}});var n,s=t(87462),m=t(63366),p=(t(67294),t(3905)),r=["components"],i={description:"Author: @wingkwong | https://leetcode.com/problems/counting-bits/"},l="0338 - Counting Bits (Easy)",o={unversionedId:"0300-0399/counting-bits-easy",id:"0300-0399/counting-bits-easy",title:"0338 - Counting Bits (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/counting-bits/",source:"@site/solutions/0300-0399/0338-counting-bits-easy.md",sourceDirName:"0300-0399",slug:"/0300-0399/counting-bits-easy",permalink:"/solutions/0300-0399/counting-bits-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0300-0399/0338-counting-bits-easy.md",tags:[],version:"current",sidebarPosition:338,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/counting-bits/"},sidebar:"tutorialSidebar",previous:{title:"0334 - Increasing Triplet Subsequence (Medium)",permalink:"/solutions/0300-0399/increasing-triplet-subsequence-medium"},next:{title:"0342 - Power of Four (Easy)",permalink:"/solutions/0300-0399/power-of-four-easy"}},N={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: (n + 1) hammingWeight",id:"approach-1-n--1-hammingweight",level:2},{value:"Approach 2: One Pass",id:"approach-2-one-pass",level:2}],k=(n="SolutionAuthor",function(a){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,p.kt)("div",a)}),h={toc:c};function u(a){var e=a.components,t=(0,m.Z)(a,r);return(0,p.kt)("wrapper",(0,s.Z)({},h,t,{components:e,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"0338---counting-bits-easy"},"0338 - Counting Bits (Easy)"),(0,p.kt)("h2",{id:"problem-link"},"Problem Link"),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/counting-bits/"},"https://leetcode.com/problems/counting-bits/")),(0,p.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,p.kt)("p",null,"Given an integer ",(0,p.kt)("inlineCode",{parentName:"p"},"n"),", return ",(0,p.kt)("em",{parentName:"p"},"an array")," ",(0,p.kt)("inlineCode",{parentName:"p"},"ans")," ",(0,p.kt)("em",{parentName:"p"},"of length")," ",(0,p.kt)("inlineCode",{parentName:"p"},"n + 1")," ",(0,p.kt)("em",{parentName:"p"},"such that for each")," ",(0,p.kt)("inlineCode",{parentName:"p"},"i")," _",(0,p.kt)("em",{parentName:"p"}," (",(0,p.kt)("inlineCode",{parentName:"em"},"0 <= i <= n"),")"),",",(0,p.kt)("em",{parentName:"p"}," ",(0,p.kt)("inlineCode",{parentName:"em"},"ans[i]")," _is the ",(0,p.kt)("strong",{parentName:"em"},"number of"))," ",(0,p.kt)("inlineCode",{parentName:"p"},"1"),(0,p.kt)("em",{parentName:"p"},(0,p.kt)("strong",{parentName:"em"},"'s")," in the binary representation of")," ",(0,p.kt)("inlineCode",{parentName:"p"},"i"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example 1:")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"Input: n = 2\nOutput: [0,1,1]\nExplanation:\n0 --\x3e 0\n1 --\x3e 1\n2 --\x3e 10\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Example 2:")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"Input: n = 5\nOutput: [0,1,1,2,1,2]\nExplanation:\n0 --\x3e 0\n1 --\x3e 1\n2 --\x3e 10\n3 --\x3e 11\n4 --\x3e 100\n5 --\x3e 101 \n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Constraints:")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"0 <= n <= 10^5"))),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Follow up:")),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"It is very easy to come up with a solution with a runtime of ",(0,p.kt)("inlineCode",{parentName:"li"},"O(n log n)"),". Can you do it in linear time ",(0,p.kt)("inlineCode",{parentName:"li"},"O(n)")," and possibly in a single pass?"),(0,p.kt)("li",{parentName:"ul"},"Can you do it without using any built-in function (i.e., like ",(0,p.kt)("inlineCode",{parentName:"li"},"__builtin_popcount")," in C++)?")),(0,p.kt)("h2",{id:"approach-1-n--1-hammingweight"},"Approach 1: (n + 1) hammingWeight"),(0,p.kt)("p",null,"If you've solved ",(0,p.kt)("a",{parentName:"p",href:"../0100-0199/number-of-1-bits-easy"},"0191 - Number of 1 Bits (Easy)"),", then you can use that solution in this problem. The time complexity is ",(0,p.kt)("span",{parentName:"p",className:"math math-inline"},(0,p.kt)("span",{parentName:"span",className:"katex"},(0,p.kt)("span",{parentName:"span",className:"katex-mathml"},(0,p.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,p.kt)("semantics",{parentName:"math"},(0,p.kt)("mrow",{parentName:"semantics"},(0,p.kt)("mi",{parentName:"mrow"},"O"),(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,p.kt)("mi",{parentName:"mrow"},"n"),(0,p.kt)("mi",{parentName:"mrow"},"l"),(0,p.kt)("mi",{parentName:"mrow"},"o"),(0,p.kt)("mi",{parentName:"mrow"},"g"),(0,p.kt)("mi",{parentName:"mrow"},"n"),(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,p.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n logn)")))),(0,p.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,p.kt)("span",{parentName:"span",className:"mopen"},"("),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,p.kt)("span",{parentName:"span",className:"mclose"},")"))))),"."),(0,p.kt)(k,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    // Check out 0191 - Number of 1 Bits (Easy) - Approach 3 \n    // for detailed explanation\n    int hammingWeight(int n) {\n        int ans = 0;\n        for (; n; n = n & (n - 1)) ans++;\n        return ans;\n    }\n    \n    vector<int> countBits(int n) {\n        vector<int> ans;\n        for (int i = 0; i <= n; i++) {\n            ans.push_back(hammingWeight(i));\n        }\n        return ans;\n    }\n};\n")),(0,p.kt)("h2",{id:"approach-2-one-pass"},"Approach 2: One Pass"),(0,p.kt)("p",null,(0,p.kt)("span",{parentName:"p",className:"math math-inline"},(0,p.kt)("span",{parentName:"span",className:"katex"},(0,p.kt)("span",{parentName:"span",className:"katex-mathml"},(0,p.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,p.kt)("semantics",{parentName:"math"},(0,p.kt)("mrow",{parentName:"semantics"},(0,p.kt)("mi",{parentName:"mrow"},"i")),(0,p.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"i")))),(0,p.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6595em"}}),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"i")))))," & ",(0,p.kt)("span",{parentName:"p",className:"math math-inline"},(0,p.kt)("span",{parentName:"span",className:"katex"},(0,p.kt)("span",{parentName:"span",className:"katex-mathml"},(0,p.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,p.kt)("semantics",{parentName:"math"},(0,p.kt)("mrow",{parentName:"semantics"},(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,p.kt)("mi",{parentName:"mrow"},"i"),(0,p.kt)("mo",{parentName:"mrow"},"\u2212"),(0,p.kt)("mn",{parentName:"mrow"},"1"),(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,p.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(i - 1)")))),(0,p.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,p.kt)("span",{parentName:"span",className:"mopen"},"("),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,p.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,p.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,p.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,p.kt)("span",{parentName:"span",className:"mord"},"1"),(0,p.kt)("span",{parentName:"span",className:"mclose"},")")))))," is a common trick to turn the rightmost set bit to ",(0,p.kt)("span",{parentName:"p",className:"math math-inline"},(0,p.kt)("span",{parentName:"span",className:"katex"},(0,p.kt)("span",{parentName:"span",className:"katex-mathml"},(0,p.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,p.kt)("semantics",{parentName:"math"},(0,p.kt)("mrow",{parentName:"semantics"},(0,p.kt)("mn",{parentName:"mrow"},"0")),(0,p.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0")))),(0,p.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,p.kt)("span",{parentName:"span",className:"mord"},"0"))))),". For example, if ",(0,p.kt)("span",{parentName:"p",className:"math math-inline"},(0,p.kt)("span",{parentName:"span",className:"katex"},(0,p.kt)("span",{parentName:"span",className:"katex-mathml"},(0,p.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,p.kt)("semantics",{parentName:"math"},(0,p.kt)("mrow",{parentName:"semantics"},(0,p.kt)("mi",{parentName:"mrow"},"i"),(0,p.kt)("mo",{parentName:"mrow"},"="),(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,p.kt)("mn",{parentName:"mrow"},"1000100"),(0,p.kt)("msub",{parentName:"mrow"},(0,p.kt)("mo",{parentName:"msub",stretchy:"false"},")"),(0,p.kt)("mn",{parentName:"msub"},"2"))),(0,p.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"i = (1000100)_2")))),(0,p.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6595em"}}),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,p.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,p.kt)("span",{parentName:"span",className:"mrel"},"="),(0,p.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,p.kt)("span",{parentName:"span",className:"mopen"},"("),(0,p.kt)("span",{parentName:"span",className:"mord"},"1000100"),(0,p.kt)("span",{parentName:"span",className:"mclose"},(0,p.kt)("span",{parentName:"span",className:"mclose"},")"),(0,p.kt)("span",{parentName:"span",className:"msupsub"},(0,p.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,p.kt)("span",{parentName:"span",className:"vlist-r"},(0,p.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,p.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,p.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,p.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,p.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,p.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,p.kt)("span",{parentName:"span",className:"vlist-r"},(0,p.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,p.kt)("span",{parentName:"span"})))))))))),", then ",(0,p.kt)("span",{parentName:"p",className:"math math-inline"},(0,p.kt)("span",{parentName:"span",className:"katex"},(0,p.kt)("span",{parentName:"span",className:"katex-mathml"},(0,p.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,p.kt)("semantics",{parentName:"math"},(0,p.kt)("mrow",{parentName:"semantics"},(0,p.kt)("mi",{parentName:"mrow"},"i")),(0,p.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"i")))),(0,p.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6595em"}}),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"i")))))," & ",(0,p.kt)("span",{parentName:"p",className:"math math-inline"},(0,p.kt)("span",{parentName:"span",className:"katex"},(0,p.kt)("span",{parentName:"span",className:"katex-mathml"},(0,p.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,p.kt)("semantics",{parentName:"math"},(0,p.kt)("mrow",{parentName:"semantics"},(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,p.kt)("mi",{parentName:"mrow"},"i"),(0,p.kt)("mo",{parentName:"mrow"},"\u2212"),(0,p.kt)("mn",{parentName:"mrow"},"1"),(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,p.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(i - 1)")))),(0,p.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,p.kt)("span",{parentName:"span",className:"mopen"},"("),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,p.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,p.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,p.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,p.kt)("span",{parentName:"span",className:"mord"},"1"),(0,p.kt)("span",{parentName:"span",className:"mclose"},")")))))," would be ",(0,p.kt)("span",{parentName:"p",className:"math math-inline"},(0,p.kt)("span",{parentName:"span",className:"katex"},(0,p.kt)("span",{parentName:"span",className:"katex-mathml"},(0,p.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,p.kt)("semantics",{parentName:"math"},(0,p.kt)("mrow",{parentName:"semantics"},(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,p.kt)("mn",{parentName:"mrow"},"1000000"),(0,p.kt)("msub",{parentName:"mrow"},(0,p.kt)("mo",{parentName:"msub",stretchy:"false"},")"),(0,p.kt)("mn",{parentName:"msub"},"2"))),(0,p.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(1000000)_2")))),(0,p.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,p.kt)("span",{parentName:"span",className:"mopen"},"("),(0,p.kt)("span",{parentName:"span",className:"mord"},"1000000"),(0,p.kt)("span",{parentName:"span",className:"mclose"},(0,p.kt)("span",{parentName:"span",className:"mclose"},")"),(0,p.kt)("span",{parentName:"span",className:"msupsub"},(0,p.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,p.kt)("span",{parentName:"span",className:"vlist-r"},(0,p.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,p.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,p.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,p.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,p.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,p.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,p.kt)("span",{parentName:"span",className:"vlist-r"},(0,p.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,p.kt)("span",{parentName:"span"})))))))))),". We can iterate each number and calculate the number of 1s by adding 1 from the previous state."),(0,p.kt)("p",null,"The transition function is simply ",(0,p.kt)("span",{parentName:"p",className:"math math-inline"},(0,p.kt)("span",{parentName:"span",className:"katex"},(0,p.kt)("span",{parentName:"span",className:"katex-mathml"},(0,p.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,p.kt)("semantics",{parentName:"math"},(0,p.kt)("mrow",{parentName:"semantics"},(0,p.kt)("mi",{parentName:"mrow"},"a"),(0,p.kt)("mi",{parentName:"mrow"},"n"),(0,p.kt)("mi",{parentName:"mrow"},"s"),(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,p.kt)("mi",{parentName:"mrow"},"i"),(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,p.kt)("mo",{parentName:"mrow"},"="),(0,p.kt)("mi",{parentName:"mrow"},"a"),(0,p.kt)("mi",{parentName:"mrow"},"n"),(0,p.kt)("mi",{parentName:"mrow"},"s"),(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,p.kt)("mi",{parentName:"mrow"},"i")),(0,p.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"ans[i] = ans[i")))),(0,p.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"an"),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,p.kt)("span",{parentName:"span",className:"mopen"},"["),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,p.kt)("span",{parentName:"span",className:"mclose"},"]"),(0,p.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,p.kt)("span",{parentName:"span",className:"mrel"},"="),(0,p.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"an"),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,p.kt)("span",{parentName:"span",className:"mopen"},"["),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"i")))))," & ",(0,p.kt)("span",{parentName:"p",className:"math math-inline"},(0,p.kt)("span",{parentName:"span",className:"katex"},(0,p.kt)("span",{parentName:"span",className:"katex-mathml"},(0,p.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,p.kt)("semantics",{parentName:"math"},(0,p.kt)("mrow",{parentName:"semantics"},(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,p.kt)("mi",{parentName:"mrow"},"i"),(0,p.kt)("mo",{parentName:"mrow"},"\u2212"),(0,p.kt)("mn",{parentName:"mrow"},"1"),(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,p.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,p.kt)("mo",{parentName:"mrow"},"+"),(0,p.kt)("mn",{parentName:"mrow"},"1")),(0,p.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(i - 1)] + 1")))),(0,p.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,p.kt)("span",{parentName:"span",className:"mopen"},"("),(0,p.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,p.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,p.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,p.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,p.kt)("span",{parentName:"span",className:"mord"},"1"),(0,p.kt)("span",{parentName:"span",className:"mclose"},")]"),(0,p.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,p.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,p.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,p.kt)("span",{parentName:"span",className:"base"},(0,p.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,p.kt)("span",{parentName:"span",className:"mord"},"1"))))),"."),(0,p.kt)(k,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> countBits(int num) {\n        vector<int> ans(num + 1, 0);\n        for(int i = 1; i <= num; i++) {\n            // no. of 1s in (1000100) = no. of 1s in (1000000) + 1\n            ans[i] = ans[i & (i - 1)] + 1;\n        }\n        return ans; \n    }\n};\n")))}u.isMDXComponent=!0}}]);