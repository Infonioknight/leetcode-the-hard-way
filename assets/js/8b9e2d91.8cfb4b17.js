"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[28515],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=m(n),u=s,h=c["".concat(o,".").concat(u)]||c[u]||d[u]||r;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function u(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,l=new Array(r);l[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:s,l[1]=i;for(var m=2;m<r;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2413:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return f},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return d}});var a=n(87462),s=n(63366),r=(n(67294),n(3905)),l=["components"],i={description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/sort-list/"},o="0148 - Sort List (Medium)",m={unversionedId:"0100-0199/sort-list-medium",id:"0100-0199/sort-list-medium",title:"0148 - Sort List (Medium)",description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/sort-list/",source:"@site/solutions/0100-0199/0148-sort-list-medium.md",sourceDirName:"0100-0199",slug:"/0100-0199/sort-list-medium",permalink:"/solutions/0100-0199/sort-list-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0148-sort-list-medium.md",tags:[],version:"current",sidebarPosition:148,frontMatter:{description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/sort-list/"},sidebar:"tutorialSidebar",previous:{title:"0145 - Binary Tree Postorder Traversal (Easy)",permalink:"/solutions/0100-0199/binary-tree-postorder-traversal-easy"},next:{title:"0150 - Evaluate Reverse Polish Notation (Medium)",permalink:"/solutions/0100-0199/evaluate-reverse-olish-notation-medium"}},p={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Recursive Merge Sort",id:"approach-1-recursive-merge-sort",level:2}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)}},u=c("Tabs"),h=c("TabItem"),N=c("SolutionAuthor"),k={toc:d};function f(e){var t=e.components,n=(0,s.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0148---sort-list-medium"},"0148 - Sort List (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sort-list/"},"https://leetcode.com/problems/sort-list/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given the ",(0,r.kt)("inlineCode",{parentName:"p"},"head")," of a linked list, return ",(0,r.kt)("em",{parentName:"p"},"the list after sorting it in ",(0,r.kt)("strong",{parentName:"em"},"ascending order")),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: head = [4,2,1,3]\nOutput: [1,2,3,4]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: head = []\nOutput: []\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The number of nodes in the list is in the range ",(0,r.kt)("inlineCode",{parentName:"li"},"[0, 5 * 10^4]"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-10^5 <= Node.val <= 10^5"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Follow up:")," Can you sort the linked list in ",(0,r.kt)("inlineCode",{parentName:"p"},"O(n logn)")," time and ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," memory (i.e. constant space)?"),(0,r.kt)("h2",{id:"approach-1-recursive-merge-sort"},"Approach 1: Recursive Merge Sort"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Find the middle node and cut the head reference till middle node"),(0,r.kt)("li",{parentName:"ul"},"Keep reducing the nodes size to smaller for comparison (same as like merge sort)"),(0,r.kt)("li",{parentName:"ul"},"Once we reduce nodes size to 1, merge the nodes in sorted (ascending) order."),(0,r.kt)("li",{parentName:"ul"},"Keep merging the nodes till last, to build the sorted list.")),(0,r.kt)("p",null,"Time Complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mi",{parentName:"mrow"},"l"),(0,r.kt)("mi",{parentName:"mrow"},"o"),(0,r.kt)("mi",{parentName:"mrow"},"g"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n log(n))")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},"))"))))),", where ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"n")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," - # of nodes in the list"),(0,r.kt)("p",null,"Space complexity: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"))))),", ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"n")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," - recursive call stack"),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(N,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        if (Objects.isNull(head) || Objects.isNull(head.next)) {\n            return head;\n        }\n        // Middle node\n        ListNode mid = middleNode(head);\n        // Keep traversing left to get the smallest nodes for comparison (smallest we can get is 1 node)\n        ListNode left = sortList(head);\n        // Starting from middle, to find the smallest nodes for comparison\n        ListNode right = sortList(mid);\n        // Compare the list and return the merged nodes\n        return mergeTwoLists(left, right);\n    }\n    \n    public ListNode middleNode(ListNode head) {\n        ListNode midPrev = null;\n        //\n        while (head != null && head.next != null) {\n            midPrev = (midPrev == null) ? head : midPrev.next;\n            head = head.next.next;\n        }\n        ListNode mid = midPrev.next;\n        // Cut the reference to the next pointer (mid), so that head remains from start to mid.\n        midPrev.next = null;\n        return mid;\n    }\n    \n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        // Base case\n        if (Objects.isNull(list1) && Objects.isNull(list2)) {\n            return list1;\n        }\n        if (Objects.isNull(list1)) {\n            return list2;\n        }\n        if (Objects.isNull(list2)) {\n            return list1;\n        }\n        ListNode head = new ListNode();\n        ListNode node = head;\n        while (Objects.nonNull(list1) && Objects.nonNull(list2)) {\n            if (list1.val <= list2.val) {\n                node.next = list1;\n                list1 = list1.next;\n            } else {\n                node.next = list2;\n                list2 = list2.next;\n            }\n            node = node.next;\n        }\n        // If either of half is not empty then append it\n        node.next = Objects.nonNull(list1) ? list1 : list2;\n        return head.next;\n    }\n}\n"))),(0,r.kt)(h,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(N,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head):\n        # Base case \n        if not head or not head.next:\n            return head\n        \n        # split the list into two halfs\n        slow, fast = head, head.next \n        while fast and fast.next:\n            slow = slow.next \n            fast = fast.next.next\n        start = slow.next \n        slow.next = None \n        \n        # Sort left portion\n        left = self.sortList(head)\n        # Sort right portion\n        right = self.sortList(start)\n        # Merge them and return\n        return self.merge(left, right)\n\n    def merge(self, list1, list2):\n        tail = dummy = ListNode()\n        # while list1 and list2 are not empty\n        while list1 and list2:\n            # Find smaller value \n            if list1.val < list2.val:\n                tail.next = list1\n                list1 = list1.next \n            else:\n                tail.next = list2\n                list2 = list2.next \n            tail = tail.next\n        # it's possible that one of two lists are not empty\n        if list1: \n            tail.next = list1\n        if list2:\n            tail.next = list2\n        \n        return dummy.next\n"))),(0,r.kt)(h,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)(N,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar sortList = function(head) {\n    // base case \n    if (!head || !head.next) return head;\n    // split the list into two halfs\n    // two pointers\n    let slow = head;\n    let fast = head.next;\n    while (fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    let start = slow.next\n    slow.next = null\n    // sort left portion\n    let left = sortList(head);\n    // sort right portion\n    let right = sortList(start);\n    // merge them and return \n    return merge(left, right);\n};\n// merge sort function\nfunction merge(list1, list2) {\n    let tail = dummy = new ListNode;\n    // while list1 and list2 are not empty\n    while (list1 && list2) {\n        // find smaller value \n        if (list1.val < list2.val) {\n            tail.next = list1;\n            list1 = list1.next;\n        } else {\n            tail.next = list2;\n            list2 = list2.next;\n        }\n        tail = tail.next;\n    }\n    // it's possible that one of two lists are not empty\n    if (list1) tail.next = list1;\n    if (list2) tail.next = list2;\n    return dummy.next;\n};\n")))))}f.isMDXComponent=!0}}]);