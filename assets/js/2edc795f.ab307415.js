"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[80566],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),p=m(n),d=a,k=p["".concat(s,".").concat(d)]||p[d]||c[d]||o;return n?r.createElement(k,i(i({ref:t},l),{},{components:n})):r.createElement(k,i({ref:t},l))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[p]="string"==typeof e?e:a,i[1]=u;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},11266:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/continuous-subarray-sum/"},i="0523 - Continuous Subarray Sum (Medium)",u={unversionedId:"0500-0599/continuous-subarray-sum-medium",id:"0500-0599/continuous-subarray-sum-medium",title:"0523 - Continuous Subarray Sum (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/continuous-subarray-sum/",source:"@site/solutions/0500-0599/0523-continuous-subarray-sum-medium.md",sourceDirName:"0500-0599",slug:"/0500-0599/continuous-subarray-sum-medium",permalink:"/solutions/0500-0599/continuous-subarray-sum-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0500-0599/0523-continuous-subarray-sum-medium.md",tags:[],version:"current",sidebarPosition:523,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/continuous-subarray-sum/"},sidebar:"tutorialSidebar",previous:{title:"0520 - Detect Capital (Easy)",permalink:"/solutions/0500-0599/detect-capital-easy"},next:{title:"0525 - Contiguous Array (Medium)",permalink:"/solutions/0500-0599/contiguous-array-medium"}},s={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Hash + Prefix Sum",id:"approach-1-hash--prefix-sum",level:2}],l=(p="SolutionAuthor",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var p;const c={toc:m},d="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0523---continuous-subarray-sum-medium"},"0523 - Continuous Subarray Sum (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/continuous-subarray-sum/"},"https://leetcode.com/problems/continuous-subarray-sum/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," ",(0,a.kt)("em",{parentName:"p"},"if")," ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," ",(0,a.kt)("em",{parentName:"p"},"has a continuous subarray of size ",(0,a.kt)("strong",{parentName:"em"},"at least two")," whose elements sum up to a multiple of")," ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),(0,a.kt)("em",{parentName:"p"},", or")," ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," ",(0,a.kt)("em",{parentName:"p"},"otherwise"),"."),(0,a.kt)("p",null,"An integer ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," is a multiple of ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," if there exists an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," such that ",(0,a.kt)("inlineCode",{parentName:"p"},"x = n * k"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," is ",(0,a.kt)("strong",{parentName:"p"},"always")," a multiple of ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [23,2,4,6,7], k = 6\nOutput: true\nExplanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [23,2,6,4,7], k = 6\nOutput: true\nExplanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [23,2,6,4,7], k = 13\nOutput: false\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= nums[i] <= 10^9")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= sum(nums[i]) <= 2^31 - 1")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= k <= 2^31 - 1"))),(0,a.kt)("h2",{id:"approach-1-hash--prefix-sum"},"Approach 1: Hash + Prefix Sum"),(0,a.kt)("p",null,"A continuous subarray sum can be represented as $$sum_j - sum_i$$ where $$sum_j$$ is the prefix sum till index $$j$$ and $$sum_i$$ is the prefix sum till index $$i$$. We are looking for the subarray sum which can be divisible by $$k$$. That means $$(sum_j - sum_i) \\% k == 0$$. We can further rewrite as $$sum_j \\% k - sum_i \\% k== 0$$ and got $$sum_j \\% k == sum_i \\% k$$."),(0,a.kt)("p",null,"Therefore, we can calculate the prefix sum and store its remainder to a hash map. If we see the same remainder in the hash map, we need to make sure that the length is at least $$2$$. If so, we can return true."),(0,a.kt)(l,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool checkSubarraySum(vector<int>& nums, int k) {\n        int n = nums.size();\n        if (n == 1) return false;\n        // hash map to store the remainders\n        unordered_map<int, int> mod {{0, -1}};\n        int sum = 0, remainder;\n        for (int i = 0; i < n; i++) {\n            // prefix sum\n            sum += nums[i];\n            // calculate the remainder\n            remainder = sum % k; \n            if (mod.count(remainder)) {\n                // if remainder exists in hash map\n                // check the length\n                if (i - mod[remainder] >= 2) return true;\n            } else {\n                // mark the current index to hash map\n                mod[remainder] = i;\n            }\n        }\n        return false;\n    }\n};\n")))}k.isMDXComponent=!0}}]);