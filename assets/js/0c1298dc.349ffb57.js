"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[75433],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=i.createContext({}),l=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=l(e.components);return i.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=l(n),d=r,k=c["".concat(u,".").concat(d)]||c[d]||p[d]||a;return n?i.createElement(k,o(o({ref:t},m),{},{components:n})):i.createElement(k,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7435:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var i=n(87462),r=n(63366),a=(n(67294),n(3905)),o=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/partition-to-k-equal-sum-subsets/",tags:["Array","Dynamic Programming","Backtracking","Bit Manipulation","Memoization","Bitmask"]},u="0698 - Partition to K Equal Sum Subsets (Medium)",l={unversionedId:"0600-0699/partition-to-k-equal-sum-subsets-medium",id:"0600-0699/partition-to-k-equal-sum-subsets-medium",title:"0698 - Partition to K Equal Sum Subsets (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/partition-to-k-equal-sum-subsets/",source:"@site/solutions/0600-0699/0698-partition-to-k-equal-sum-subsets-medium.md",sourceDirName:"0600-0699",slug:"/0600-0699/partition-to-k-equal-sum-subsets-medium",permalink:"/solutions/0600-0699/partition-to-k-equal-sum-subsets-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0600-0699/0698-partition-to-k-equal-sum-subsets-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Backtracking",permalink:"/solutions/tags/backtracking"},{label:"Bit Manipulation",permalink:"/solutions/tags/bit-manipulation"},{label:"Memoization",permalink:"/solutions/tags/memoization"},{label:"Bitmask",permalink:"/solutions/tags/bitmask"}],version:"current",sidebarPosition:698,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/partition-to-k-equal-sum-subsets/",tags:["Array","Dynamic Programming","Backtracking","Bit Manipulation","Memoization","Bitmask"]},sidebar:"tutorialSidebar",previous:{title:"0692 - Top K Frequent Words (Medium)",permalink:"/solutions/0600-0699/top-k-frequent-words-medium"},next:{title:"0700 - 0799",permalink:"/solutions/category/0700---0799"}},m={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DP",id:"approach-1-dp",level:2}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)}},d=c("Tabs"),k=c("TabItem"),b=c("SolutionAuthor"),f={toc:p};function g(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0698---partition-to-k-equal-sum-subsets-medium"},"0698 - Partition to K Equal Sum Subsets (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/partition-to-k-equal-sum-subsets/"},"https://leetcode.com/problems/partition-to-k-equal-sum-subsets/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if it is possible to divide this array into ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," non-empty subsets whose sums are all equal."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [4,3,2,3,5,2,1], k = 4\nOutput: true\nExplanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3,4], k = 3\nOutput: false\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= k <= nums.length <= 16")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 104")),(0,a.kt)("li",{parentName:"ul"},"The frequency of each element is in the range ",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 4]"),".")),(0,a.kt)("h2",{id:"approach-1-dp"},"Approach 1: DP"),(0,a.kt)(d,{mdxType:"Tabs"},(0,a.kt)(k,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(b,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool canPartitionKSubsets(vector<int>& nums, int k) {\n        int n = nums.size();\n        int sum = accumulate(nums.begin(), nums.end(), 0);\n        // if we divide nums into k subsets with equal sum,\n        // then the sum must be divided by k\n        // also each subset requires at least 1 element\n        if (n < k || sum % k) return false;\n        // we need sum / k for each subset\n        int target = sum / k;\n        // bitmask dp\n        vector<int> dp(1 << n, -1);\n        // base case\n        dp[0] = 0;\n        for (int mask = 0; mask < (1 << n); mask++) {\n            // if this mask not used, skip it\n            if (dp[mask] == -1) continue;\n            // iterate each number\n            for (int i = 0; i < n; i++) {\n                // if this number is not used, \n                // then include it if dp[mask] + nums[i] is less than or equal to target\n                if (!(mask & (1 << i)) && dp[mask] + nums[i] <= target) {\n                    // set the i-th bit on mask on dp since we include the i-th number\n                    dp[mask | (1 << i)] = (dp[mask] + nums[i]) % target;\n                }\n            }\n        }\n        return dp[(1 << n) - 1] == 0;\n    }\n};\n"))),(0,a.kt)(k,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(b,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        s = sum(nums)\n        # if we divide nums into k subsets with equal sum,\n        # then the sum must be divided by k\n        # also each subset requires at least 1 element\n        if n < k or s % k: return False\n        # we need sum / k for each subset\n        target = s / k\n        # bitmask dp\n        dp = [-1] * (1 << n)\n        # base case\n        dp[0] = 0\n        for mask in range(1 << n):\n            # if this mask not used, skip it\n            if dp[mask] == -1: continue\n            # iterate each number\n            for i in range(n):\n                # if this number is not used, \n                # then include it if dp[mask] + nums[i] is less than or equal to target\n                if not ((1 << i) & mask) and dp[mask] + nums[i] <= target:\n                    # set the i-th bit on mask on dp since we include the i-th number\n                    dp[(1 << i) | mask] = (dp[mask] + nums[i]) % target\n        return dp[(1 << n) - 1] == 0\n")))))}g.isMDXComponent=!0}}]);