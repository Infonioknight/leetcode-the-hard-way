"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[30006],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=r.createContext({}),s=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(d.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=o,h=p["".concat(d,".").concat(m)]||p[m]||c[m]||a;return t?r.createElement(h,i(i({ref:n},u),{},{components:t})):r.createElement(h,i({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},46720:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const a={description:"Author: @ColeB2 | https://leetcode.com/problems/surrounded-regions/",tags:["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},i="0130 Surrounded Regions (Medium)",l={unversionedId:"0100-0199/surrounded-regions-medium",id:"0100-0199/surrounded-regions-medium",title:"0130 Surrounded Regions (Medium)",description:"Author: @ColeB2 | https://leetcode.com/problems/surrounded-regions/",source:"@site/solutions/0100-0199/0130-surrounded-regions-medium.md",sourceDirName:"0100-0199",slug:"/0100-0199/surrounded-regions-medium",permalink:"/solutions/0100-0199/surrounded-regions-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0130-surrounded-regions-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Depth-First Search",permalink:"/solutions/tags/depth-first-search"},{label:"Breadth-First Search",permalink:"/solutions/tags/breadth-first-search"},{label:"Union Find",permalink:"/solutions/tags/union-find"},{label:"Matrix",permalink:"/solutions/tags/matrix"}],version:"current",sidebarPosition:130,frontMatter:{description:"Author: @ColeB2 | https://leetcode.com/problems/surrounded-regions/",tags:["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},sidebar:"tutorialSidebar",previous:{title:"0127 - Word Ladder (Hard)",permalink:"/solutions/0100-0199/word-ladder-hard"},next:{title:"0131 - Palindrome Partitioning (Medium)",permalink:"/solutions/0100-0199/palindrome-partitioning-medium"}},d={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Breadth-First Search",id:"approach-1-breadth-first-search",level:2}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)},p=u("Tabs"),c=u("TabItem"),m=u("SolutionAuthor"),h={toc:s},b="wrapper";function g(e){let{components:n,...t}=e;return(0,o.kt)(b,(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0130-surrounded-regions-medium"},"0130 Surrounded Regions (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/surrounded-regions/"},"https://leetcode.com/problems/surrounded-regions/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given an ",(0,o.kt)("inlineCode",{parentName:"p"},"m x n")," matrix ",(0,o.kt)("inlineCode",{parentName:"p"},"board")," containing ",(0,o.kt)("inlineCode",{parentName:"p"},"'X'")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"'O'"),", ",(0,o.kt)("em",{parentName:"p"},"capture all regions that are 4-directionally surrounded by")," ",(0,o.kt)("inlineCode",{parentName:"p"},"'X'"),"."),(0,o.kt)("p",null,"A region is ",(0,o.kt)("strong",{parentName:"p"},"captured")," by flipping all ",(0,o.kt)("inlineCode",{parentName:"p"},"'O'"),"s into ",(0,o.kt)("inlineCode",{parentName:"p"},"'X'"),"s in that surrounded region."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg",alt:null})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]\nOutput: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]\nExplanation: Notice that an \'O\' should not be flipped if:\n- It is on the border, or\n- It is adjacent to an \'O\' that should not be flipped.\nThe bottom \'O\' is on the border, so it is not flipped.\nThe other three \'O\' form a surrounded region, so they are flipped.\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: board = [["X"]]\nOutput: [["X"]]\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"m == board.length")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"n == board[i].length")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 200")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"board[i][j]")," is ",(0,o.kt)("inlineCode",{parentName:"li"},"'X'")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"'O'"),".")),(0,o.kt)("h2",{id:"approach-1-breadth-first-search"},"Approach 1: Breadth-First Search"),(0,o.kt)("p",null,"An island can only be converted if it is 4-directionally surrounded. Therefore any island that touches the edge, or comes in contact with an $$'O'$$ that touches the edge can not be converted. Therefore we can simply search for all edge $$'O'$$ values, and run a BFS on them to convert them and any neighbouring $$'O'$$ values to a different value, (we will use $$'P'$$) thus protecting them from being converted to $$'X'$$."),(0,o.kt)("p",null,"After that, we can iterate over the board, convert any remaining $$'O'$$ values into $$'X'$$ values and convert back any $$'P'$$ values to $$'O'$$ values."),(0,o.kt)("p",null,"Time Complexity: $$O(m * n)$$ where m is the number of rows, and n is the number of columns. We are going to be iterating over the board a few times, and running our BFS which in the worst case will cover all values on the board."),(0,o.kt)("p",null,"Space Complexity: $$O(m ",(0,o.kt)("em",{parentName:"p"}," n)$$. We are editing our board in place, but in the worst case, our BFS queue can grow up to $$m ")," n$$."),(0,o.kt)(p,{mdxType:"Tabs"},(0,o.kt)(c,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(m,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        # Track our rows and columns which will be equal to m, n.\n        ROWS, COLS = len(board), len(board[0])\n        # BFS Algorithm, takes parameters of row, col which will be\n        # the position of the starting cell in our 2D array, board.\n        def bfs(row,col):\n            # initialize our queue with the row,col coordinate.\n            q = deque([(row,col)])\n            # while our q is not empty.\n            while q:\n                # pop the row, r and c, col from the queue.\n                r, c = q.popleft()\n                # boundary check, and make sure our cell is an 'O' cell.\n                if (r < 0 or r >= ROWS\n                    or c < 0 or c >= COLS\n                    or board[r][c] != 'O'\n                    ):\n                    continue\n                # In bounds, and an 'O' convert out 'O' to 'P' to 'protect' it.\n                board[r][c] = 'P'\n                # loop through the 4 directions and add them to the queue.\n                for (dr, dc) in ((1,0), (0,1), (-1,0), (0,-1)):\n                    q.append((r + dr, c + dc))\n        # iterate the board\n        for row in range(ROWS):\n            for col in range(COLS):\n                # cell is 'O' and an edge\n                if (board[row][col] == 'O' and \n                    (row == 0 or row == ROWS - 1 or \n                    col == 0 or col == COLS - 1\n                    )):\n                    # run our bfs algorithm\n                    bfs(row, col)\n        # Protected all edge Os and connecting islands.\n        # Convert all non-connecting Os to Xs and Ps back to Os.\n        for row in range(ROWS):\n            for col in range(COLS):\n                if board[row][col] == 'O':\n                    board[row][col] = 'X'\n                elif board[row][col] =='P':\n                    board[row][col] = 'O'\n")))))}g.isMDXComponent=!0}}]);