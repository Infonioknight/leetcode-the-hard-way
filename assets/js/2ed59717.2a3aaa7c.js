"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[78813],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return n?o.createElement(f,s(s({ref:t},c),{},{components:n})):o.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},87831:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=n(87462),r=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/number-of-ways-to-reach-a-position-after-exactly-k-steps/"},s="2400 - Number of Ways to Reach a Position After Exactly k Steps (Medium)",i={unversionedId:"2400-2499/number-of-ways-to-reach-a-position-after-exactly-k-steps-medium",id:"2400-2499/number-of-ways-to-reach-a-position-after-exactly-k-steps-medium",title:"2400 - Number of Ways to Reach a Position After Exactly k Steps (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/number-of-ways-to-reach-a-position-after-exactly-k-steps/",source:"@site/solutions/2400-2499/2400-number-of-ways-to-reach-a-position-after-exactly-k-steps-medium.md",sourceDirName:"2400-2499",slug:"/2400-2499/number-of-ways-to-reach-a-position-after-exactly-k-steps-medium",permalink:"/solutions/2400-2499/number-of-ways-to-reach-a-position-after-exactly-k-steps-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2400-number-of-ways-to-reach-a-position-after-exactly-k-steps-medium.md",tags:[],version:"current",sidebarPosition:2400,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/number-of-ways-to-reach-a-position-after-exactly-k-steps/"},sidebar:"tutorialSidebar",previous:{title:"2400 - 2499",permalink:"/solutions/category/2400---2499"},next:{title:"2401 - Longest Nice Subarray (Medium)",permalink:"/solutions/2400-2499/longest-nice-subarray-medium"}},p={},l=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: nCr",id:"approach-1-ncr",level:2}],c=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const m={toc:l},d="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2400---number-of-ways-to-reach-a-position-after-exactly-k-steps-medium"},"2400 - Number of Ways to Reach a Position After Exactly k Steps (Medium)"),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given two ",(0,r.kt)("strong",{parentName:"p"},"positive")," integers ",(0,r.kt)("inlineCode",{parentName:"p"},"startPos")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"endPos"),". Initially, you are standing at position ",(0,r.kt)("inlineCode",{parentName:"p"},"startPos")," on an ",(0,r.kt)("strong",{parentName:"p"},"infinite")," number line. With one step, you can move either one position to the left, or one position to the right."),(0,r.kt)("p",null,"Given a positive integer ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,r.kt)("em",{parentName:"p"},"the number of ",(0,r.kt)("strong",{parentName:"em"},"different")," ways to reach the position"),(0,r.kt)("inlineCode",{parentName:"p"},"endPos"),(0,r.kt)("em",{parentName:"p"},"starting from"),(0,r.kt)("inlineCode",{parentName:"p"},"startPos"),"*, such that you perform ",(0,r.kt)("strong",{parentName:"p"},"exactly*"),(0,r.kt)("inlineCode",{parentName:"p"},"k"),(0,r.kt)("em",{parentName:"p"},"steps"),". Since the answer may be very large, return it ",(0,r.kt)("strong",{parentName:"p"},"modulo")," ",(0,r.kt)("inlineCode",{parentName:"p"},"109 + 7"),"."),(0,r.kt)("p",null,"Two ways are considered different if the order of the steps made is not exactly the same."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note")," that the number line includes negative integers."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: startPos = 1, endPos = 2, k = 3\nOutput: 3\nExplanation: We can reach position 2 from 1 in exactly 3 steps in three ways:\n- 1 -> 2 -> 3 -> 2.\n- 1 -> 2 -> 1 -> 2.\n- 1 -> 0 -> 1 -> 2.\nIt can be proven that no other way is possible, so we return 3.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: startPos = 2, endPos = 5, k = 10\nOutput: 0\nExplanation: It is impossible to reach position 5 from position 2 in exactly 10 steps.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= startPos, endPos, k <= 1000"))),(0,r.kt)("h2",{id:"approach-1-ncr"},"Approach 1: nCr"),(0,r.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"struct comb {\n public:\n  int MOD = 1e9 + 7;\n  vector<long long> fac, finv, inv;\n  comb(int mxN) {\n    fac.resize(mxN);\n    finv.resize(mxN);\n    inv.resize(mxN);\n    fac[0] = fac[1] = 1;\n    finv[0] = finv[1] = 1;\n    inv[1] = 1;\n    for (int i = 1; i < mxN - 1; i++) {\n      fac[i + 1] = fac[i] * (i + 1) % MOD;\n      inv[i + 1] = MOD - inv[MOD % (i + 1)] * (MOD / (i + 1)) % MOD;\n      finv[i + 1] = finv[i] * inv[i + 1] % MOD;\n    }\n  }\n\n  long long ncr(long long n, long long k) {\n    if (k < 0 || n < k) return 0;\n    long long res = 1;\n    res *= fac[n] * finv[k] % MOD * finv[n - k] % MOD;\n    return res;\n  }\n};\nclass Solution {\npublic:\n    int numberOfWays(int startPos, int endPos, int k) {\n        int MOD = 1e9 + 7;\n        // init comb\n        // see constraints: 1 <= startPos, endPos, k <= 1000\n        comb c = comb(1005);\n        // if (startPos + endPos) and k have different parity, then return 0\n        // otherwise we can use comb to get k choose (endPos - startPos + k) / 2\n        // it can also be k choose k - (endPos - startPos + k) / 2)\n        // assuming endPos >= startPos, and we know\n        // left + right = k -- (1)\n        // right - left = endPos - startPos -- (2)\n        // (1) + (2)\n        // left + right - left + right = k + endPos - startPos\n        // 2 * right = endPos - startPos + k\n        // right = (endPos - startPos + k) / 2\n        // in other word, left would be k - (endPos - startPos + k) / 2)\n        return (((startPos + endPos) ^ k) & 1) ? 0 : c.ncr(k, (endPos - startPos + k) / 2) % MOD;\n    }\n};\n")),(0,r.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def numberOfWays(self, startPos: int, endPos: int, k: int) -> int:\n        MOD = 10 ** 9 + 7\n        # if (startPos + endPos) and k have different parity, then return 0\n        # otherwise we can use comb to get k choose (endPos - startPos + k) / 2\n        # it can also be k choose k - (endPos - startPos + k) / 2)\n        # assuming endPos >= startPos, and we know\n        # left + right = k -- (1)\n        # right - left = endPos - startPos -- (2)\n        # (1) + (2)\n        # left + right - left + right = k + endPos - startPos\n        # 2 * right = endPos - startPos + k\n        # right = (endPos - startPos + k) / 2\n        # in other word, left would be k - (endPos - startPos + k) / 2)\n        if (startPos + endPos) % 2 != k % 2:\n            return 0\n        else:\n            return comb(k, (endPos - startPos + k) // 2) % MOD\n")))}f.isMDXComponent=!0}}]);