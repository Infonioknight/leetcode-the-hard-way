"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[78019],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(n),d=i,f=c["".concat(s,".").concat(d)]||c[d]||u[d]||r;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var m=2;m<r;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},19682:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return u}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),o=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/",tags:["Array","Dynamic Programming"]},s="1335 - Minimum Difficulty of a Job Schedule (Hard)",m={unversionedId:"1300-1399/minimum-difficulty-of-a-job-schedule-hard",id:"1300-1399/minimum-difficulty-of-a-job-schedule-hard",title:"1335 - Minimum Difficulty of a Job Schedule (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/",source:"@site/solutions/1300-1399/1335-minimum-difficulty-of-a-job-schedule-hard.md",sourceDirName:"1300-1399",slug:"/1300-1399/minimum-difficulty-of-a-job-schedule-hard",permalink:"/leetcode-the-hard-way/solutions/1300-1399/minimum-difficulty-of-a-job-schedule-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1300-1399/1335-minimum-difficulty-of-a-job-schedule-hard.md",tags:[{label:"Array",permalink:"/leetcode-the-hard-way/solutions/tags/array"},{label:"Dynamic Programming",permalink:"/leetcode-the-hard-way/solutions/tags/dynamic-programming"}],version:"current",sidebarPosition:1335,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/",tags:["Array","Dynamic Programming"]},sidebar:"tutorialSidebar",previous:{title:"1334 - Find the City With the Smallest Number of Neighbors at a Threshold Distance (Medium)",permalink:"/leetcode-the-hard-way/solutions/1300-1399/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance-medium"},next:{title:"1337 - The K Weakest Rows in a Matrix (Easy)",permalink:"/leetcode-the-hard-way/solutions/1300-1399/the-k-weakest-rows-in-a-matrix-easy"}},p={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)}},d=c("Tabs"),f=c("TabItem"),h=c("SolutionAuthor"),y={toc:u};function k(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1335---minimum-difficulty-of-a-job-schedule-hard"},"1335 - Minimum Difficulty of a Job Schedule (Hard)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/"},"https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You want to schedule a list of jobs in ",(0,r.kt)("inlineCode",{parentName:"p"},"d")," days. Jobs are dependent (i.e To work on the ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," job, you have to finish all the jobs ",(0,r.kt)("inlineCode",{parentName:"p"},"j")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"0 <= j < i"),")."),(0,r.kt)("p",null,"You have to finish ",(0,r.kt)("strong",{parentName:"p"},"at least")," one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the ",(0,r.kt)("inlineCode",{parentName:"p"},"d")," days. The difficulty of a day is the maximum difficulty of a job done on that day."),(0,r.kt)("p",null,"You are given an integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"jobDifficulty")," and an integer ",(0,r.kt)("inlineCode",{parentName:"p"},"d"),". The difficulty of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," job is ",(0,r.kt)("inlineCode",{parentName:"p"},"jobDifficulty[i]"),"."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the minimum difficulty of a job schedule"),". If you cannot find a schedule for the jobs return ",(0,r.kt)("inlineCode",{parentName:"p"},"-1"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: jobDifficulty = [6,5,4,3,2,1], d = 2\nOutput: 7\nExplanation: First day you can finish the first 5 jobs, total difficulty = 6.\nSecond day you can finish the last job, total difficulty = 1.\nThe difficulty of the schedule = 6 + 1 = 7\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: jobDifficulty = [9,9,9], d = 4\nOutput: -1\nExplanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: jobDifficulty = [1,1,1], d = 3\nOutput: 3\nExplanation: The schedule is one job per day. total difficulty will be 3.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= jobDifficulty.length <= 300")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= jobDifficulty[i] <= 1000")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= d <= 10"))),(0,r.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,r.kt)("p",null,"Visualization for ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mn",{parentName:"mrow"},"6"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mi",{parentName:"mrow"},"d"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mn",{parentName:"mrow"},"3")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n = 6, d = 3")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"6"),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"3"))))),". (by @liangyong0411)"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/users/images/73fd2807-5852-40ed-bbdb-ea2850fa5083_1665905141.513028.png",alt:"img"})),(0,r.kt)(d,{mdxType:"Tabs"},(0,r.kt)(f,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def minDifficulty(self, jobDifficulty: List[int], d: int) -> int:\n        n = len(jobDifficulty)\n    \n        @cache\n        # dp(i, k): min difficulty when you start working on i-th job at day `k`\n        def dp(i, k):\n            # reach the last day\n            # we put all the remaining jobs on this day\n            # so we return the one with max difficulty\n            if k == d: return max(jobDifficulty[i:])\n            # init min difficulty with inf \n            res = float('inf')\n            # cur is the max difficulty we've seen so far\n            # init current max with 0\n            cur = 0\n            # for jobDifficulty like 6 5 4 3 2 1, \n            # we can have following ways to distribute them into two days\n            # 6 | 5 4 3 2 1\n            # 6 5 | 4 3 2 1 \n            # 6 5 4 | 3 2 1\n            # 6 5 4 3 | 2 1\n            # 6 5 4 3 2 | 1\n            # notice that each day we must have at least one task\n            # given the starting index `i`, \n            # we can only at most choose the jobs till the position `n - d + k - 1`\n            for j in range(i, n - d + k):\n                cur = max(cur, jobDifficulty[j])\n                # if j-th job is the last job on day `k`, \n                # the max difficulty for day `k` is `cur`\n                # and we need to start (j + 1)-th job on the next day\n                # the result would be `cur + dp(j + 1, k + 1)`\n                # then we take the min\n                res = min(res, cur + dp(j + 1, k + 1))\n            return res\n        # n < d : you will have free days. hence you cannot find a schedule for the given jobs\n        # e.g. Example 2\n        # otherwise, we start working on 0-th job at day 1\n        return -1 if n < d else dp(0, 1)\n")))))}k.isMDXComponent=!0}}]);