"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[38230],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,h=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @pankajsirari222, @radojicic23 | https://leetcode.com/problems/remove-duplicates-from-sorted-array/",tags:["Array","Two Pointers"]},i="0026 - Remove Duplicates from Sorted Array (Easy)",s={unversionedId:"0000-0099/Remove-Duplicates-from-Sorted-Array-easy",id:"0000-0099/Remove-Duplicates-from-Sorted-Array-easy",title:"0026 - Remove Duplicates from Sorted Array (Easy)",description:"Author: @pankajsirari222, @radojicic23 | https://leetcode.com/problems/remove-duplicates-from-sorted-array/",source:"@site/solutions/0000-0099/0026-Remove-Duplicates-from-Sorted-Array-easy.md",sourceDirName:"0000-0099",slug:"/0000-0099/Remove-Duplicates-from-Sorted-Array-easy",permalink:"/solutions/0000-0099/Remove-Duplicates-from-Sorted-Array-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0026-Remove-Duplicates-from-Sorted-Array-easy.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Two Pointers",permalink:"/solutions/tags/two-pointers"}],version:"current",sidebarPosition:26,frontMatter:{description:"Author: @pankajsirari222, @radojicic23 | https://leetcode.com/problems/remove-duplicates-from-sorted-array/",tags:["Array","Two Pointers"]},sidebar:"tutorialSidebar",previous:{title:"0025 - Reverse Nodes in k-Group (Hard)",permalink:"/solutions/0000-0099/reverse-nodes-in-k-group-hard"},next:{title:"0028 - Find the Index of the First Occurrence in a String (Easy)",permalink:"/solutions/0000-0099/find-the-index-of-the-first-occurrence-in-a-string-easy"}},l={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two Pointers",id:"approach-1-two-pointers",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},m=p("Tabs"),c=p("TabItem"),d=p("SolutionAuthor"),h={toc:u},f="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0026---remove-duplicates-from-sorted-array-easy"},"0026 - Remove Duplicates from Sorted Array (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/remove-duplicates-from-sorted-array/"},"https://leetcode.com/problems/remove-duplicates-from-sorted-array/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an integer array $nums$ sorted in non-decreasing order, ",(0,a.kt)("strong",{parentName:"p"},"remove the duplicates")," in-place such that each unique element appears only ",(0,a.kt)("strong",{parentName:"p"},"once"),".\nThe ",(0,a.kt)("strong",{parentName:"p"},"relative order")," of the elements should be kept the ",(0,a.kt)("strong",{parentName:"p"},"same"),"."),(0,a.kt)("p",null,"Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the ",(0,a.kt)("strong",{parentName:"p"},"first part")," of the array $nums$.\nMore formally, if there are $k$ elements after removing the duplicates, then the first $k$ elements of $nums$ should hold the final result.\nIt does not matter what you leave beyond the first $k$ elements."),(0,a.kt)("p",null,"Return $k$ ",(0,a.kt)("em",{parentName:"p"},"after placing the final result in the first")," $k$ ",(0,a.kt)("em",{parentName:"p"},"slots of")," $nums$."),(0,a.kt)("p",null,"Do ",(0,a.kt)("inlineCode",{parentName:"p"},"not")," allocate extra space for another array. You must do this by ",(0,a.kt)("inlineCode",{parentName:"p"},"modifying the input array")," in-place with $O(1)$ extra memory."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Custom Judge:")),(0,a.kt)("p",null,"The judge will test your solution with the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"int[] nums = [...];  // Input array\nint[] expectedNums = [...];  // The expected answer with correct length\n\nint k = removeDuplicates(nums);  // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n")),(0,a.kt)("p",null,"If all assertions pass, then your solution will be ",(0,a.kt)("strong",{parentName:"p"},"accepted.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 3 * 10^4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-100 <= nums[i] <= 100")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nums")," is sorted in ",(0,a.kt)("strong",{parentName:"li"},"non-decreasing")," order.")),(0,a.kt)("h2",{id:"approach-1-two-pointers"},"Approach 1: Two Pointers"),(0,a.kt)("p",null,"In this problem, we have to count the number of distinct elements and it does not matter what elements are present other than those distinct elements. So, we will take a index count starting from 1 and traverse the array, keeping the distinct elements at the front. At last we will return the count."),(0,a.kt)("p",null,"As the array is sorted, it means all the duplicates of a number will be next to each other. So, basically while traversing the array we will check if next element is greater or not. If it is greater, then it means duplicate is not there and we will put it at the count index and increment the count. If it's not greater, then there will be no change. At last we will return the count."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Time complexity")," is $O(n)$ - As we are traversing the array only once"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Space complexity")," is $O(1)$ - As No extra space is required"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(d,{name:"@pankajsirari222",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int removeDuplicates(int[] arr) {\n        int n = arr.length;\n        // index to keep the track of distinct variables and it starts from 1\n        int count = 1;\n\n        for (int i = 0; i + 1 < n; i++) {\n            // to Check if next element is greater or not\n            if (arr[i] < arr[i + 1])  {\n                // if it is greater, means next element is distinct,\n                // so add it to count index and increment count by 1\n                arr[count] = arr[i + 1];\n                count++;\n            }\n        }\n        // returns the total number of distinct elements\n        return count;\n    }\n}\n"))),(0,a.kt)(c,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function (nums) {\n  let count = 1;\n  for (i = 1; i < nums.length; i++) {\n    if (nums[i] != nums[i - 1]) {\n      nums[count] = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n"))),(0,a.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        count = 1\n        for i in range(1, len(nums)):\n            if nums[i] != nums[i - 1]:\n                nums[count] = nums[i]\n                count += 1\n        return count\n"))),(0,a.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        int count = 1;\n        for (int i = 1; i < nums.size(); i++) {\n            if (nums[i] != nums[i - 1]) {\n                nums[count] = nums[i];\n                count++;\n            }\n        }\n        return count;\n    }\n};\n")))))}y.isMDXComponent=!0}}]);