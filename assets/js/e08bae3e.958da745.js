"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[74145],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=l(n),d=a,k=c["".concat(u,".").concat(d)]||c[d]||s[d]||o;return n?r.createElement(k,i(i({ref:t},m),{},{components:n})):r.createElement(k,i({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},36392:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return s}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],p={description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/permutations/"},u="0046 - Permutations (Medium)",l={unversionedId:"0000-0099/permutations-medium",id:"0000-0099/permutations-medium",title:"0046 - Permutations (Medium)",description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/permutations/",source:"@site/solutions/0000-0099/0046-permutations-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/permutations-medium",permalink:"/solutions/0000-0099/permutations-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0046-permutations-medium.md",tags:[],version:"current",sidebarPosition:46,frontMatter:{description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/permutations/"},sidebar:"tutorialSidebar",previous:{title:"0042 - Trapping Rain Water (Hard)",permalink:"/solutions/0000-0099/trapping-rain-water-hard"},next:{title:"0048 - Rotate Image (Medium)",permalink:"/solutions/0000-0099/rotate-image-medium"}},m={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: STL",id:"approach-1-stl",level:2},{value:"Approach 2: Backtracking",id:"approach-2-backtracking",level:2}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},d=c("Tabs"),k=c("TabItem"),b=c("SolutionAuthor"),f={toc:s};function g(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0046---permutations-medium"},"0046 - Permutations (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/permutations/"},"https://leetcode.com/problems/permutations/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given an array ",(0,o.kt)("inlineCode",{parentName:"p"},"nums")," of distinct integers, return ",(0,o.kt)("em",{parentName:"p"},"all the possible permutations"),". You can return the answer in ",(0,o.kt)("strong",{parentName:"p"},"any order"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [0,1]\nOutput: [[0,1],[1,0]]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1]\nOutput: [[1]] \n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 6")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-10 <= nums[i] <= 10")),(0,o.kt)("li",{parentName:"ul"},"All the integers of ",(0,o.kt)("inlineCode",{parentName:"li"},"nums")," are ",(0,o.kt)("strong",{parentName:"li"},"unique"),".")),(0,o.kt)("h2",{id:"approach-1-stl"},"Approach 1: STL"),(0,o.kt)("p",null,"Use C++ STL ",(0,o.kt)("inlineCode",{parentName:"p"},"next_permutation")," to generate all possible permutations."),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(k,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(b,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<int>> permute(vector<int>& nums) {\n        vector<vector<int>> ans;\n        sort(nums.begin(), nums.end());\n        do {\n            ans.push_back(nums);\n        } while(next_permutation(nums.begin(), nums.end()));\n        return ans;\n    }\n};\n")))),(0,o.kt)("h2",{id:"approach-2-backtracking"},"Approach 2: Backtracking"),(0,o.kt)("p",null,"Check out ",(0,o.kt)("a",{parentName:"p",href:"../../tutorials/basic-topics/backtracking"},"Backtracking")," section for the detailed explanation."),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(k,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(b,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void backtrack(vector<int>& nums, vector<vector<int>>& ans, vector<int>& tmp) {\n        if ((int) tmp.size() == (int) nums.size()) {\n            ans.push_back(tmp);\n            return;\n        }\n        for (auto x : nums) {\n            if (find(tmp.begin(), tmp.end(), x) != tmp.end()) continue;\n            tmp.push_back(x);\n            backtrack(nums, ans, tmp);\n            tmp.pop_back();   \n        }\n    }\n    \n    vector<vector<int>> permute(vector<int>& nums) {\n        // sort(nums.begin(), nums.end());\n        vector<vector<int>> ans;\n        vector<int> tmp;\n        backtrack(nums, ans, tmp);\n        return ans;\n    }\n};\n"))),(0,o.kt)(k,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(b,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        res = []\n\n        if (len(nums) == 1):\n            return [nums.copy()]\n        \n        for i in range(len(nums)):\n            n = nums.pop(0)\n            perms = self.permute(nums)\n\n            for perm in perms:\n                perm.append(n)\n            res.extend(perms)\n            nums.append(n)\n        \n        return res \n")))))}g.isMDXComponent=!0}}]);