"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[81198],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),s=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(m.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,h=d["".concat(m,".").concat(c)]||d[c]||u[c]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},63768:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/"},i="1751 - Maximum Number of Events That Can Be Attended II (Hard)",l={unversionedId:"1700-1799/maximum-number-of-events-that-can-be-attended-ii-hard",id:"1700-1799/maximum-number-of-events-that-can-be-attended-ii-hard",title:"1751 - Maximum Number of Events That Can Be Attended II (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/",source:"@site/solutions/1700-1799/1751-maximum-number-of-events-that-can-be-attended-ii-hard.md",sourceDirName:"1700-1799",slug:"/1700-1799/maximum-number-of-events-that-can-be-attended-ii-hard",permalink:"/solutions/1700-1799/maximum-number-of-events-that-can-be-attended-ii-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1700-1799/1751-maximum-number-of-events-that-can-be-attended-ii-hard.md",tags:[],version:"current",sidebarPosition:1751,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/"},sidebar:"tutorialSidebar",previous:{title:"1748 - Sum of Unique Elements (Easy)",permalink:"/solutions/1700-1799/sum-of-unique-elements-easy"},next:{title:"1762 - Buildings With an Ocean View (Medium)",permalink:"/solutions/1700-1799/buildings-with-an-ocean-view-medium"}},m={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],p=(d="SolutionAuthor",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var d;const u={toc:s},c="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1751---maximum-number-of-events-that-can-be-attended-ii-hard"},"1751 - Maximum Number of Events That Can Be Attended II (Hard)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/"},"https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"events")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"events[i] = [startDayi, endDayi, valuei]"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," event starts at ",(0,r.kt)("inlineCode",{parentName:"p"},"startDayi")," and ends at ",(0,r.kt)("inlineCode",{parentName:"p"},"endDayi"),", and if you attend this event, you will receive a value of ",(0,r.kt)("inlineCode",{parentName:"p"},"valuei"),". You are also given an integer ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," which represents the maximum number of events you can attend."),(0,r.kt)("p",null,"You can only attend one event at a time. If you choose to attend an event, you must attend the ",(0,r.kt)("strong",{parentName:"p"},"entire")," event. Note that the end day is ",(0,r.kt)("strong",{parentName:"p"},"inclusive"),": that is, you cannot attend two events where one of them starts and the other ends on the same day."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the ",(0,r.kt)("strong",{parentName:"em"},"maximum sum")," of values that you can receive by attending events.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60048-pm.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2\nOutput: 7\nExplanation: Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60150-pm.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2\nOutput: 10\nExplanation: Choose event 2 for a total value of 10.\nNotice that you cannot attend any other event as they overlap, and that you do not have to attend k events.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("img",{src:"https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60703-pm.png",alt:"","data-size":"original"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3\nOutput: 9\nExplanation: Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= k <= events.length")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= k * events.length <= 10^6")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= startDayi <= endDayi <= 10^9")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= valuei <= 10^6"))),(0,r.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,r.kt)(p,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxValue(vector<vector<int>>& events, int k) {\n        int n = events.size();\n        // sort by start time\n        sort(events.begin(), events.end());\n        // dp[i][j] means the max value we could get \n        // when we are at event i with k events left to join \n        vector<vector<int>> dp(n, vector<int>(k + 1, -1));\n        function<int(int,int,int)> dfs = [&](int idx, int k, int end) {\n            // reached all events or attended all k events\n            if (idx == n || k == 0) return 0;\n            // current start time <= previous end time\n            // cannot attend -> move to the next one\n            if (events[idx][0] <= end) return dfs(idx + 1, k, end);\n            // calculated before - return it immediately\n            if (dp[idx][k] != -1) return dp[idx][k];\n            // so we only have two choices left, we either\n            return dp[idx][k] = max(\n                // choice 1: attend this event \n                // and search for the next events starting from this end time\n                events[idx][2] + dfs(idx + 1, k - 1, events[idx][1]),\n                // choice 2: skip this event - search for the next one\n                dfs(idx + 1, k, end)\n            );\n        };\n        return dfs(0, k, 0);\n    }\n};\n")))}h.isMDXComponent=!0}}]);