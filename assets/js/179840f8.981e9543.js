"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[81586],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,f=m["".concat(l,".").concat(d)]||m[d]||s[d]||i;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4221:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return y},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return s}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],p={description:"Author: @wingkwong | https://leetcode.com/problems/distinct-prime-factors-of-product-of-array/"},l="2521 - Distinct Prime Factors of Product of Array (Medium)",c={unversionedId:"2500-2599/distinct-prime-factors-of-product-of-array-medium",id:"2500-2599/distinct-prime-factors-of-product-of-array-medium",title:"2521 - Distinct Prime Factors of Product of Array (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/distinct-prime-factors-of-product-of-array/",source:"@site/solutions/2500-2599/2521-distinct-prime-factors-of-product-of-array-medium.md",sourceDirName:"2500-2599",slug:"/2500-2599/distinct-prime-factors-of-product-of-array-medium",permalink:"/solutions/2500-2599/distinct-prime-factors-of-product-of-array-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2500-2599/2521-distinct-prime-factors-of-product-of-array-medium.md",tags:[],version:"current",sidebarPosition:2521,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/distinct-prime-factors-of-product-of-array/"},sidebar:"tutorialSidebar",previous:{title:"2520 - Count the Digits That Divide a Number (Easy)",permalink:"/solutions/2500-2599/count-the-digits-that-divide-a-number-easy"},next:{title:"2523 - Closest Prime Numbers in Range (Medium)",permalink:"/solutions/2500-2599/closest-prime-numbers-in-range-medium"}},u={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Prime Factorization + Set",id:"approach-1-prime-factorization--set",level:2}],m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},d=m("Tabs"),f=m("TabItem"),k=m("SolutionAuthor"),b={toc:s};function y(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2521---distinct-prime-factors-of-product-of-array-medium"},"2521 - Distinct Prime Factors of Product of Array (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/distinct-prime-factors-of-product-of-array/"},"https://leetcode.com/problems/distinct-prime-factors-of-product-of-array/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given an array of positive integers ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),", return ",(0,i.kt)("em",{parentName:"p"},"the number of ",(0,i.kt)("strong",{parentName:"em"},"distinct prime factors")," in the product of the elements of")," ",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note")," that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A number greater than ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," is called ",(0,i.kt)("strong",{parentName:"li"},"prime")," if it is divisible by only ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," and itself."),(0,i.kt)("li",{parentName:"ul"},"An integer ",(0,i.kt)("inlineCode",{parentName:"li"},"val1")," is a factor of another integer ",(0,i.kt)("inlineCode",{parentName:"li"},"val2")," if ",(0,i.kt)("inlineCode",{parentName:"li"},"val2 / val1")," is an integer.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [2,4,3,7,10,6]\nOutput: 4\nExplanation:\nThe product of all the elements in nums is: 2 * 4 * 3 * 7 * 10 * 6 = 10080 = 25 * 32 * 5 * 7.\nThere are 4 distinct prime factors so we return 4.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [2,4,8,16]\nOutput: 1\nExplanation:\nThe product of all the elements in nums is: 2 * 4 * 8 * 16 = 1024 = 210.\nThere is 1 distinct prime factor so we return 1.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 10^4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"2 <= nums[i] <= 1000"))),(0,i.kt)("h2",{id:"approach-1-prime-factorization--set"},"Approach 1: Prime Factorization + Set"),(0,i.kt)("p",null,"For each number, we can prime-factorize it and insert it to a Set. The answer would be the number of the size of set."),(0,i.kt)(d,{mdxType:"Tabs"},(0,i.kt)(f,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(k,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<pair<long long, int>> prime_factorize(long long n) {\n        assert(n >= 1);\n        vector<pair<long long, int>> result;\n\n        auto extract = [&](long long p) {\n            if (n % p == 0) {\n                result.emplace_back(p, 0);\n\n                do {\n                    n /= p;\n                    result.back().second++;\n                } while (n % p == 0);\n            }\n        };\n\n        for (long long p = 2; p * p <= n; p += p % 2 + 1)\n            extract(p);\n\n        if (n > 1)\n            result.emplace_back(n, 1);\n\n        return result;\n    }\n\n    int distinctPrimeFactors(vector<int>& nums) {\n        set<int> s;\n        for (auto x : nums) {\n            for (auto x : prime_factorize(x)) {\n                s.insert(x.first);\n            }\n        }\n        return s.size();\n    }\n};\n")))))}y.isMDXComponent=!0}}]);