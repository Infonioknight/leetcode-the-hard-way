"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[10937],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),p=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,k=u["".concat(m,".").concat(d)]||u[d]||c[d]||i;return n?r.createElement(k,o(o({ref:t},s),{},{components:n})):r.createElement(k,o({ref:t},s))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},83685:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/maximum-value-of-k-coins-from-piles/",tags:["Array","Dynamic Programming","Prefix Sum"]},o="2218 - Maximum Value of K Coins From Piles (Hard)",l={unversionedId:"2200-2299/maximum-value-of-k-coins-from-piles-hard",id:"2200-2299/maximum-value-of-k-coins-from-piles-hard",title:"2218 - Maximum Value of K Coins From Piles (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/maximum-value-of-k-coins-from-piles/",source:"@site/solutions/2200-2299/2218-maximum-value-of-k-coins-from-piles-hard.md",sourceDirName:"2200-2299",slug:"/2200-2299/maximum-value-of-k-coins-from-piles-hard",permalink:"/solutions/2200-2299/maximum-value-of-k-coins-from-piles-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2218-maximum-value-of-k-coins-from-piles-hard.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Prefix Sum",permalink:"/solutions/tags/prefix-sum"}],version:"current",sidebarPosition:2218,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximum-value-of-k-coins-from-piles/",tags:["Array","Dynamic Programming","Prefix Sum"]},sidebar:"tutorialSidebar",previous:{title:"2214 - Minimum Health to Beat Game (Medium)",permalink:"/solutions/2200-2299/minimum-health-to-beat-game-medium"},next:{title:"2223 - Sum of Scores of Built Strings (Hard)",permalink:"/solutions/2200-2299/sum-of-scores-of-built-strings-hard"}},m={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=s("Tabs"),c=s("TabItem"),d=s("SolutionAuthor"),k={toc:p},f="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2218---maximum-value-of-k-coins-from-piles-hard"},"2218 - Maximum Value of K Coins From Piles (Hard)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-value-of-k-coins-from-piles/"},"https://leetcode.com/problems/maximum-value-of-k-coins-from-piles/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"There are ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," ",(0,a.kt)("strong",{parentName:"p"},"piles")," of coins on a table. Each pile consists of a ",(0,a.kt)("strong",{parentName:"p"},"positive number")," of coins of assorted denominations."),(0,a.kt)("p",null,"In one move, you can choose any coin on ",(0,a.kt)("strong",{parentName:"p"},"top")," of any pile, remove it, and add it to your wallet."),(0,a.kt)("p",null,"Given a list ",(0,a.kt)("inlineCode",{parentName:"p"},"piles"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"piles[i]")," is a list of integers denoting the composition of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ith")," pile from ",(0,a.kt)("strong",{parentName:"p"},"top to bottom"),", and a positive integer ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"maximum total value")," of coins you can have in your wallet if you choose ",(0,a.kt)("strong",{parentName:"em"},"exactly"))," ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," ",(0,a.kt)("em",{parentName:"p"},"coins optimally"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2019/11/09/e1.png",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: piles = [[1,100,3],[7,8,9]], k = 2\nOutput: 101\nExplanation:\nThe above diagram shows the different ways we can choose k coins.\nThe maximum total we can obtain is 101.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7\nOutput: 706\nExplanation:\nThe maximum total can be obtained if we choose all coins from the last pile.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == piles.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= piles[i][j] <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= k <= sum(piles[i].length) <= 2000"))),(0,a.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,a.kt)("p",null,"Let $$dp","[i][j]","$$ be the maximum total value we can have if we pick $$j$$ elements starting from $$piles","[i]","$$. The answer is $$dp","[0][k]","$$. First we calculate the value if we pick any elements in the current pile. Then we try to pick at most $$min((int) piles","[i]",".size(), k)$$ elements and find out the max result."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxValueOfCoins(vector<vector<int>>& piles, int k) {\n        int n = piles.size();\n        vector<vector<int>> dp(n, vector<int>(k + 1, -1));\n        function<int(int,int)> dfs = [&](int i, int k) {\n            // reach the end - return 0\n            if (i == n || k == 0) return 0;\n            // calculated previously - return immediately\n            if (dp[i][k] != -1) return dp[i][k];\n            // do not take \n            int res = dfs(i + 1, k), val = 0;\n            // try to take it one by one \n            // calculate the value we could have\n            for (int j = 0; j < min((int) piles[i].size(), k); j++) {\n                // take this element\n                val += piles[i][j];\n                res = max(res, dfs(i + 1, k - 1 - j) + val);\n            }\n            return dp[i][k] = res;\n        };\n        return dfs(0, k);\n    }\n};\n"))),(0,a.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def maxValueOfCoins(self, piles: List[List[int]], k: int) -> int:\n        @lru_cache(None)\n        def dp(i, k):\n            # reach the end - return 0\n            if i == len(piles) or k == 0:\n                return 0\n            res = 0\n            # do not take \n            res += dp(i + 1, k)\n            # try to take it one by one \n            # calculate the value we could have\n            take = 0\n            for j in range(min(k, len(piles[i]))):\n                # take this element\n                take += piles[i][j]\n                res = max(res, dp(i + 1, k - 1 - j) + take)\n            return res\n        return dp(0, k)\n")))))}h.isMDXComponent=!0}}]);