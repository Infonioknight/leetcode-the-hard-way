"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[70879],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return b}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(n),b=a,f=c["".concat(u,".").concat(b)]||c[b]||m[b]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},74662:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return c}});var r,a=n(87462),i=n(63366),o=(n(67294),n(3905)),s=["components"],u={description:"Author: @wingkwong | https://leetcode.com/problems/subarray-sums-divisible-by-k/",tags:["Array","Hash Table","Prefix Sum"]},l="0974 - Subarray Sums Divisible by K (Medium)",p={unversionedId:"0900-0999/subarray-sums-divisible-by-k-medium",id:"0900-0999/subarray-sums-divisible-by-k-medium",title:"0974 - Subarray Sums Divisible by K (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/subarray-sums-divisible-by-k/",source:"@site/solutions/0900-0999/0974-subarray-sums-divisible-by-k-medium.md",sourceDirName:"0900-0999",slug:"/0900-0999/subarray-sums-divisible-by-k-medium",permalink:"/solutions/0900-0999/subarray-sums-divisible-by-k-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0974-subarray-sums-divisible-by-k-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"Prefix Sum",permalink:"/solutions/tags/prefix-sum"}],version:"current",sidebarPosition:974,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/subarray-sums-divisible-by-k/",tags:["Array","Hash Table","Prefix Sum"]},sidebar:"tutorialSidebar",previous:{title:"0973 - K Closest Points to Origin (Medium)",permalink:"/solutions/0900-0999/k-closest-points-to-origin-medium"},next:{title:"0976 - Largest Perimeter Triangle (Easy)",permalink:"/solutions/0900-0999/largest-perimeter-triangle-easy"}},m={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Hash Map + Prefix Sum",id:"approach-1-hash-map--prefix-sum",level:2}],b=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}),f={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0974---subarray-sums-divisible-by-k-medium"},"0974 - Subarray Sums Divisible by K (Medium)"),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given an integer array ",(0,o.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,o.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,o.kt)("em",{parentName:"p"},"the number of non-empty ",(0,o.kt)("strong",{parentName:"em"},"subarrays")," that have a sum divisible by"),(0,o.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"subarray")," is a ",(0,o.kt)("strong",{parentName:"p"},"contiguous")," part of an array."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [4,5,0,-2,-3,1], k = 5\nOutput: 7\nExplanation: There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [5], k = 9\nOutput: 0\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 3 * 10^4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-104 <= nums[i] <= 10^4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"2 <= k <= 10^4"))),(0,o.kt)("h2",{id:"approach-1-hash-map--prefix-sum"},"Approach 1: Hash Map + Prefix Sum"),(0,o.kt)(b,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> generatePrefixSum(vector<int>& a) {\n        int n = a.size();\n        vector<int> pref(n);\n        pref[0] = a[0];\n        for (int i = 1; i < n; i++) pref[i] = pref[i - 1] + a[i];\n        return pref;\n    }\n\n    int subarraysDivByK(vector<int>& nums, int k) {\n        // generate prefix sum\n        vector<int> pref = generatePrefixSum(nums);\n        // store the modular cnt\n        vector<int> m(k);\n        // base value\n        m[0] = 1;\n        // init ans\n        int ans = 0;\n        // iterate each sum\n        for (auto& x : pref) {\n            // if x is negative, turn it to positive modular equivalent\n            if (x < 0) x = (x % k + k) % k;\n            // we need to find pairs such that (pref[j] - pref[i]) % k == 0\n            // hence, we look for pref[j] % k == pref[i] % k\n            // proof ..? \n            // pref[j] = a * k + x\n            // pref[i] = b * k + y\n            // pref[j] - pref[i] = (a * k + x) - (b * k + y)\n            // pref[j] - pref[i] = k * (a - b) + (x - y)\n            // -> (pref[j] - pref[i]) % k == 0 if & only if (x - y) == 0\n            m[x % k]++;\n        }\n        // n choose 2\n        for (auto& x : m) ans += x * (x - 1) / 2;\n        return ans;\n    }\n};\n")))}d.isMDXComponent=!0}}]);