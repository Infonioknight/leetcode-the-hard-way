"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[46187],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(n),d=o,g=u["".concat(s,".").concat(d)]||u[d]||c[d]||a;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var m=2;m<a;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7697:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong , @deepanshu-rawat6, @radojicic23 | https://leetcode.com/problems/longest-common-subsequence/",tags:["String","Dynamic Programming"]},i="1143 - Longest Common Subsequence (Medium)",l={unversionedId:"1100-1199/longest-common-subsequence-medium",id:"1100-1199/longest-common-subsequence-medium",title:"1143 - Longest Common Subsequence (Medium)",description:"Author: @wingkwong , @deepanshu-rawat6, @radojicic23 | https://leetcode.com/problems/longest-common-subsequence/",source:"@site/solutions/1100-1199/1143-longest-common-subsequence-medium.md",sourceDirName:"1100-1199",slug:"/1100-1199/longest-common-subsequence-medium",permalink:"/solutions/1100-1199/longest-common-subsequence-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1100-1199/1143-longest-common-subsequence-medium.md",tags:[{label:"String",permalink:"/solutions/tags/string"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"}],version:"current",sidebarPosition:1143,frontMatter:{description:"Author: @wingkwong , @deepanshu-rawat6, @radojicic23 | https://leetcode.com/problems/longest-common-subsequence/",tags:["String","Dynamic Programming"]},sidebar:"tutorialSidebar",previous:{title:"1140 - Stone Game II (Medium)",permalink:"/solutions/1100-1199/stone-game-ii-medium"},next:{title:"1147 - Longest Chunked Palindrome Decomposition (Hard)",permalink:"/solutions/1100-1199/longest-chunked-palindrome-decomposition-hard"}},s={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DP",id:"approach-1-dp",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},u=p("Tabs"),c=p("TabItem"),d=p("SolutionAuthor"),g={toc:m},b="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(b,(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1143---longest-common-subsequence-medium"},"1143 - Longest Common Subsequence (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-common-subsequence"},"https://leetcode.com/problems/longest-common-subsequence")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given two strings ",(0,o.kt)("inlineCode",{parentName:"p"},"text1")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"text2"),", return ",(0,o.kt)("em",{parentName:"p"},"the length of their longest ",(0,o.kt)("strong",{parentName:"em"},"common subsequence"),".")," If there is no ",(0,o.kt)("strong",{parentName:"p"},"common subsequence"),", return ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"subsequence")," of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For example, ",(0,o.kt)("inlineCode",{parentName:"li"},'"ace"')," is a subsequence of ",(0,o.kt)("inlineCode",{parentName:"li"},'"abcde"'),".")),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"common subsequence")," of two strings is a subsequence that is common to both strings."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: text1 = "abcde", text2 = "ace" \nOutput: 3  \nExplanation: The longest common subsequence is "ace" and its length is 3.\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: text1 = "abc", text2 = "abc"\nOutput: 3\nExplanation: The longest common subsequence is "abc" and its length is 3.\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: text1 = "abc", text2 = "def"\nOutput: 0\nExplanation: There is no such common subsequence, so the result is 0.\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= text1.length, text2.length <= 1000")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"text1")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"text2")," consist of only lowercase English characters.")),(0,o.kt)("h2",{id:"approach-1-dp"},"Approach 1: DP"),(0,o.kt)("p",null,"LCS is a classic problem. Let $dp","[i][j]","$ be the LCS for string $text1$ ends at index $i$ and string $text2$ ends at index $j$. If $text1","[i]"," == text2","[j]","$, then $dp","[i][j]","$ would be $1 + dp","[i - 1][j - 1]","$. Otherwise, we target the largest LCS if we skip one character from either $text1$ or $text2$, i.e. $dp","[i][j]"," = max(dp","[i - 1][j]",", dp","[i][j - 1]",")$."),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        int n = text1.size(), m = text2.size();\n        vector<vector<int>> dp(n + 1, vector<int>(m + 1));\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= m; j++) {\n                if(text1[i - 1] == text2[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[n][m];\n    }\n};\n"))),(0,o.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(d,{name:"@deepanshu-rawat6",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        int m = text1.length();\n        int n = text2.length();\n        // dp[][] array for storing records of every charcters\n        int[][] dp = new int[m + 1][n + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                if (i == 0 || j ==0) {\n                    // setting first row and first column to be zero(initial readings)\n                    dp[i][j] = 0;\n                } else if (text1.charAt(i - 1) == text2.charAt(j - 1)) {\n                    /*\n                    if match found, then store value of previous diagonal element(dp[i - 1][j - 1]) \n                    and increase the value by 1 i.e. a new character match is found\n                    */\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    /*\n                    otherwise, choose maximum of either previous element, either in \n                    row(dp[i][j -1]) or column(dp[i][j - 1])\n                    */\n                    dp[i][j] = Math.max(dp[i][j - 1],dp[i - 1][j]);\n                }\n            }\n        }\n        // dp[m][n] would hold the value of the LCS obtained\n        return dp[m][n];\n    }\n}\n"))),(0,o.kt)(c,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {string} text1\n * @param {string} text2\n * @return {number}\n */\nvar longestCommonSubsequence = function(text1, text2) {\n    let n = text1.length;\n    let m = text2.length;\n    let dp = new Array(n + 1).fill(0).map(x => new Array(m + 1).fill(0));\n    for (i = 1; i <= n; i++) {\n        for (j = 1; j <= m; j++) {\n            if (text1[i - 1] != text2[j - 1]) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            } else {\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n            }\n        }\n    }\n    return dp[n][m];\n};  \n"))),(0,o.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        dp = [[0 for _ in range(len(text2) + 1)] for _ in range(len(text1) + 1)]\n        \n        for i in range(len(text1) - 1, -1, -1):\n            for j in range(len(text2) - 1, -1, -1):\n                if text1[i] == text2[j]:\n                    dp[i][j] = 1 + dp[i + 1][j + 1]\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n        return dp[0][0]\n")))))}h.isMDXComponent=!0}}]);