"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[88682],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>b});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,b=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(b,i(i({ref:t},l),{},{components:n})):r.createElement(b,i({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},70347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>b,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/maximize-number-of-subsequences-in-a-string/"},i="2207 - Maximize Number of Subsequences in a String (Medium)",s={unversionedId:"2100-2199/maximize-number-of-subsequences-in-a-string-medium",id:"2100-2199/maximize-number-of-subsequences-in-a-string-medium",title:"2207 - Maximize Number of Subsequences in a String (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/maximize-number-of-subsequences-in-a-string/",source:"@site/solutions/2100-2199/2207-maximize-number-of-subsequences-in-a-string-medium.md",sourceDirName:"2100-2199",slug:"/2100-2199/maximize-number-of-subsequences-in-a-string-medium",permalink:"/solutions/2100-2199/maximize-number-of-subsequences-in-a-string-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2207-maximize-number-of-subsequences-in-a-string-medium.md",tags:[],version:"current",sidebarPosition:2207,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximize-number-of-subsequences-in-a-string/"},sidebar:"tutorialSidebar",previous:{title:"2206 - Divide Array Into Equal Pairs (Easy)",permalink:"/solutions/2100-2199/divide-array-into-equal-pairs-easy"},next:{title:"2200 - 2299",permalink:"/solutions/category/2200---2299"}},c={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Counting",id:"approach-1-counting",level:2}],l=(p="SolutionAuthor",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var p;const m={toc:u},d="wrapper";function b(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2207---maximize-number-of-subsequences-in-a-string-medium"},"2207 - Maximize Number of Subsequences in a String (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximize-number-of-subsequences-in-a-string/"},"https://leetcode.com/problems/maximize-number-of-subsequences-in-a-string/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a ",(0,a.kt)("strong",{parentName:"p"},"0-indexed")," string ",(0,a.kt)("inlineCode",{parentName:"p"},"text")," and another ",(0,a.kt)("strong",{parentName:"p"},"0-indexed")," string ",(0,a.kt)("inlineCode",{parentName:"p"},"pattern")," of length ",(0,a.kt)("inlineCode",{parentName:"p"},"2"),", both of which consist of only lowercase English letters."),(0,a.kt)("p",null,"You can add ",(0,a.kt)("strong",{parentName:"p"},"either")," ",(0,a.kt)("inlineCode",{parentName:"p"},"pattern[0]")," ",(0,a.kt)("strong",{parentName:"p"},"or")," ",(0,a.kt)("inlineCode",{parentName:"p"},"pattern[1]")," anywhere in ",(0,a.kt)("inlineCode",{parentName:"p"},"text")," ",(0,a.kt)("strong",{parentName:"p"},"exactly once"),". Note that the character can be added even at the beginning or at the end of ",(0,a.kt)("inlineCode",{parentName:"p"},"text"),"."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"maximum")," number of times")," ",(0,a.kt)("inlineCode",{parentName:"p"},"pattern")," ",(0,a.kt)("em",{parentName:"p"},"can occur as a ",(0,a.kt)("strong",{parentName:"em"},"subsequence")," of the modified")," ",(0,a.kt)("inlineCode",{parentName:"p"},"text"),"."),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"subsequence")," is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: text = "abdcdbc", pattern = "ac"\nOutput: 4\nExplanation:\nIf we add pattern[0] = \'a\' in between text[1] and text[2], we get "abadcdbc". Now, the number of times "ac" occurs as a subsequence is 4.\nSome other strings which have 4 subsequences "ac" after adding a character to text are "aabdcdbc" and "abdacdbc".\nHowever, strings such as "abdcadbc", "abdccdbc", and "abdcdbcc", although obtainable, have only 3 subsequences "ac" and are thus suboptimal.\nIt can be shown that it is not possible to get more than 4 subsequences "ac" by adding only one character.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: text = "aabb", pattern = "ab"\nOutput: 6\nExplanation:\nSome of the strings which can be obtained from text and have 6 subsequences "ab" are "aaabb", "aaabb", and "aabbb".\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= text.length <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pattern.length == 2")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"text")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"pattern")," consist only of lowercase English letters.")),(0,a.kt)("h2",{id:"approach-1-counting"},"Approach 1: Counting"),(0,a.kt)("p",null,"We should add $$pattern","[0]","$$ to the beginning or add $$pattern","[1]","$$ to the end of the text. Therefore, we check both case to see which one is better. We iterate the text and check if the character is equal to $$pattern","[1]","$$, if so, we add the frequency of $$pattern","[0]","$$. We increase the frequency of the current character by $$1$$."),(0,a.kt)(l,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    long long maximumSubsequenceCount(string text, string pattern) {\n        char f = pattern[0], s = pattern[1];\n        auto check = [&](string text) -> long long {\n            long long res = 0, cnt = 0;\n            for (auto x : text) {\n                if (x == s) res += cnt;\n                if (x == f) cnt++;\n            }\n            return res;\n        };\n        // case 1: add pattern[0] at the beginning\n        long long x = check(f + text);\n        // case 2: add pattern[1] at the end\n        long long y = check(text + s);\n        // take the max one\n        return max(x, y);\n    }\n};\n")))}b.isMDXComponent=!0}}]);