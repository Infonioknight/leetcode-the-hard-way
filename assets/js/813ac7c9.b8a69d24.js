"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[59380],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return t?r.createElement(g,a(a({ref:n},p),{},{components:t})):r.createElement(g,a({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},71006:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return w},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),a=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/zigzag-conversion/",tags:["String"]},s="0006 - Zigzag Conversion (Medium)",u={unversionedId:"0000-0099/zigzag-conversion-medium",id:"0000-0099/zigzag-conversion-medium",title:"0006 - Zigzag Conversion (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/zigzag-conversion/",source:"@site/solutions/0000-0099/0006-zigzag-conversion-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/zigzag-conversion-medium",permalink:"/solutions/0000-0099/zigzag-conversion-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0006-zigzag-conversion-medium.md",tags:[{label:"String",permalink:"/solutions/tags/string"}],version:"current",sidebarPosition:6,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/zigzag-conversion/",tags:["String"]},sidebar:"tutorialSidebar",previous:{title:"0005 - Longest Palindromic Substring (Medium)",permalink:"/solutions/0000-0099/longest-palindromic-substring-medium"},next:{title:"0007 - Reverse Integer (Medium)",permalink:"/solutions/0000-0099/reverse-integer-medium"}},p={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Simulation",id:"approach-1-simulation",level:2}],d=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},m=d("Tabs"),g=d("TabItem"),h=d("SolutionAuthor"),f={toc:c};function w(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0006---zigzag-conversion-medium"},"0006 - Zigzag Conversion (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/zigzag-conversion/"},"https://leetcode.com/problems/zigzag-conversion/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"The string ",(0,i.kt)("inlineCode",{parentName:"p"},'"PAYPALISHIRING"')," is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"P   A   H   N\nA P L S I I G\nY   I   R\n")),(0,i.kt)("p",null,"And then read line by line: ",(0,i.kt)("inlineCode",{parentName:"p"},'"PAHNAPLSIIGYIR"')),(0,i.kt)("p",null,"Write the code that will take a string and make this conversion given a number of rows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"string convert(string s, int numRows);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "PAYPALISHIRING", numRows = 3\nOutput: "PAHNAPLSIIGYIR"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "PAYPALISHIRING", numRows = 4\nOutput: "PINALSIGYAHRPI"\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "A", numRows = 1\nOutput: "A"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= s.length <= 1000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"s")," consists of English letters (lower-case and upper-case), ",(0,i.kt)("inlineCode",{parentName:"li"},"','")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"'.'"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= numRows <= 1000"))),(0,i.kt)("h2",{id:"approach-1-simulation"},"Approach 1: Simulation"),(0,i.kt)(m,{mdxType:"Tabs"},(0,i.kt)(g,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"// simulate and add each character to the corresponding row\n// go down -> reach bottom -> go up -> reach top -> go down ...\nclass Solution {\npublic:\n    string convert(string s, int n) {\n        // edge case\n        if (n == 1) return s;\n        vector<string> rows(n);\n        // j is the index to track which rows a character should be added to\n        // d is the direction: -1 means go up, 1 means go down\n        int j = 0, d = 1;\n        for (int i = 0; i < s.size(); i++) {\n            // add the current character to corresponding row\n            rows[j] += s[i];\n            // if it reaches to the last row, we need to go up\n            if(j == n - 1) d = -1;\n            // if it reaches to the first row, we need to go down\n            else if(j == 0) d = 1;\n            // move j pointer\n            j += d;\n        }\n        // rows would look like below in the first example\n        // ['PAHN', 'APLSIIG', 'YIR']\n        // we use `accumulate` to build the final answer (in C++ 20, it takes O(n) only)\n        return accumulate(rows.begin(), rows.end(), string{});\n    }\n};\n"))),(0,i.kt)(g,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# simulate and add each character to the corresponding row\n# go down -> reach bottom -> go up -> reach top -> go down ...\nclass Solution:\n    def convert(self, s: str, n: int) -> str:\n        # edge case\n        if n == 1: return s\n        rows = ['' for _ in range(n)]\n        # j is the index to track which rows a character should be added to\n        # d is the direction: -1 means go up, 1 means go down\n        j, d = 0, 1\n        for i in range(len(s)):\n            # add the current character to corresponding row\n            rows[j] += s[i]\n            # if it reaches to the last row, we need to go up\n            if j == n - 1: d = -1\n            # if it reaches to the first row, we need to go down\n            elif j == 0: d = 1\n            # move j pointer\n            j += d;\n        # rows would look like below in the first example\n        # ['PAHN', 'APLSIIG', 'YIR']\n        # we use join to build the final answer\n        return ''.join(rows)\n")))))}w.isMDXComponent=!0}}]);