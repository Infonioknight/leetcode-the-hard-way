"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[2462],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},90617:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>y,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/find-mode-in-binary-search-tree/",tags:["Tree","Depth-First Search","Binary Search Tree","Binary Tree"]},i="501 - Find Mode in Binary Search Tree (Easy)",l={unversionedId:"0500-0599/find-mode-in-binary-search-tree-easy",id:"0500-0599/find-mode-in-binary-search-tree-easy",title:"501 - Find Mode in Binary Search Tree (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/find-mode-in-binary-search-tree/",source:"@site/solutions/0500-0599/0501-find-mode-in-binary-search-tree-easy.md",sourceDirName:"0500-0599",slug:"/0500-0599/find-mode-in-binary-search-tree-easy",permalink:"/solutions/0500-0599/find-mode-in-binary-search-tree-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0500-0599/0501-find-mode-in-binary-search-tree-easy.md",tags:[{label:"Tree",permalink:"/solutions/tags/tree"},{label:"Depth-First Search",permalink:"/solutions/tags/depth-first-search"},{label:"Binary Search Tree",permalink:"/solutions/tags/binary-search-tree"},{label:"Binary Tree",permalink:"/solutions/tags/binary-tree"}],version:"current",sidebarPosition:501,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-mode-in-binary-search-tree/",tags:["Tree","Depth-First Search","Binary Search Tree","Binary Tree"]},sidebar:"tutorialSidebar",previous:{title:"0500 - 0599",permalink:"/solutions/category/0500---0599"},next:{title:"0508 - Most Frequent Subtree Sum (Medium)",permalink:"/solutions/0500-0599/most-frequent-subtree-sum-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS + Counting",id:"approach-1-dfs--counting",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},c=u("Tabs"),d=u("TabItem"),m=u("SolutionAuthor"),h={toc:p},f="wrapper";function y(e){let{components:t,...n}=e;return(0,o.kt)(f,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"501---find-mode-in-binary-search-tree-easy"},"501 - Find Mode in Binary Search Tree (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-mode-in-binary-search-tree/"},"https://leetcode.com/problems/find-mode-in-binary-search-tree/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given the ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," of a binary search tree (BST) with duplicates, return ",(0,o.kt)("em",{parentName:"p"},"all the mode(s) (i.e., the most frequently occurred element) in it"),"."),(0,o.kt)("p",null,"If the tree has more than one mode, return them in ",(0,o.kt)("strong",{parentName:"p"},"any order"),"."),(0,o.kt)("p",null,"Assume a BST is defined as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The left subtree of a node contains only nodes with keys ",(0,o.kt)("strong",{parentName:"li"},"less than or equal to")," the node's key."),(0,o.kt)("li",{parentName:"ul"},"The right subtree of a node contains only nodes with keys ",(0,o.kt)("strong",{parentName:"li"},"greater than or equal to")," the node's key."),(0,o.kt)("li",{parentName:"ul"},"Both the left and right subtrees must also be binary search trees.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [1,null,2,2]\nOutput: [2]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [0]\nOutput: [0]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ",(0,o.kt)("inlineCode",{parentName:"li"},"[1, 10 ^ 4]"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-10 ^ 5 <= Node.val <= 10 ^ 5"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Follow up:")," Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count)."),(0,o.kt)("h2",{id:"approach-1-dfs--counting"},"Approach 1: DFS + Counting"),(0,o.kt)("p",null,"We can perform DFS to traverse the tree to get each node value and store in a hash map. After that, we know the frequencies for each node value and we can find the maximum one and build the final result."),(0,o.kt)(c,{mdxType:"Tabs"},(0,o.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<int, int> m;\n    void dfs(TreeNode* root) {\n        // base case\n        if (!root) return;\n        // increase the frequency of root->val by 1\n        m[root->val] += 1;\n        // traverse the left tree\n        dfs(root->left);\n        // traverse the right tree\n        dfs(root->right);\n    }\n    vector<int> findMode(TreeNode* root) {\n        vector<int> ans;\n        // traverse the tree\n        dfs(root);\n        // find the maximum frequency\n        int mx = 0;\n        for (auto &x : m) mx = max(mx, x.second);\n        // build the final answer\n        for (auto &x : m) if (x.second == mx) ans.push_back(x.first);\n        return ans;\n    }\n};\n")))))}y.isMDXComponent=!0}}]);