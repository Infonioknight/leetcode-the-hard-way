"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[27186],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=o,h=c["".concat(p,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81302:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options/"},i="1359 - Count All Valid Pickup and Delivery Options (Hard)",l={unversionedId:"1300-1399/count-all-valid-pickup-and-delivery-options-hard",id:"1300-1399/count-all-valid-pickup-and-delivery-options-hard",title:"1359 - Count All Valid Pickup and Delivery Options (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options/",source:"@site/solutions/1300-1399/1359-count-all-valid-pickup-and-delivery-options-hard.md",sourceDirName:"1300-1399",slug:"/1300-1399/count-all-valid-pickup-and-delivery-options-hard",permalink:"/solutions/1300-1399/count-all-valid-pickup-and-delivery-options-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1300-1399/1359-count-all-valid-pickup-and-delivery-options-hard.md",tags:[],version:"current",sidebarPosition:1359,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options/"},sidebar:"tutorialSidebar",previous:{title:"1356 - Sort Integers by The Number of 1 Bits (Easy)",permalink:"/solutions/1300-1399/sort-integers-by-the-number-of-1-bits-easy"},next:{title:"1365 - How Many Numbers Are Smaller Than the Current Number (Easy)",permalink:"/solutions/1300-1399/how-many-numbers-are-smaller-than-the-current-number-easy"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Math",id:"approach-1-math",level:2}],u=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const d={toc:s},m="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1359---count-all-valid-pickup-and-delivery-options-hard"},"1359 - Count All Valid Pickup and Delivery Options (Hard)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options/"},"https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," orders, each order consist in pickup and delivery services."),(0,o.kt)("p",null,"Count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i)."),(0,o.kt)("p",null,"Since the answer may be too large, return it modulo 10^9 + 7."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 1\nOutput: 1\nExplanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 2\nOutput: 6\nExplanation: All possible orders: \n(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\nThis is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 3\nOutput: 90\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= n <= 500"))),(0,o.kt)("h2",{id:"approach-1-math"},"Approach 1: Math"),(0,o.kt)("p",null,"If we just put all $$P$$ in a row, we would have $$N!$$ ways. It's a permutation with no repetition. The first choice has $$N$$ possibilities, and the next choice has $$N - 1$$ possibilities (as you cannot choose the first choice), and then $$N - 2$$ (as you cannot choose the previous two choices), $$N - 3$$ and so on.  Hence, we got $$N ",(0,o.kt)("em",{parentName:"p"}," (N - 1) ")," (N - 2) ",(0,o.kt)("em",{parentName:"p"}," .. ")," 1 = N!$$."),(0,o.kt)("p",null,"Then we need to think how to put $$D_i$$in some possible places. We know that$$D_i$$ must come after $$P_i$$. It's obvious that there is only one way to put $$D$$ for the last $$P$$. For the second $$D$$, we can put it right after the corresponding $$P$$ or put it to the left / right of the previous $$D$$. Hence, we have $$3$$ possible places to put. If you keep doing the same thing, you should find the number of ways to put $$D$$ is $$1 ",(0,o.kt)("em",{parentName:"p"}," 3 ")," 5 ",(0,o.kt)("em",{parentName:"p"}," .. ")," (2N - 1)$$."),(0,o.kt)("p",null,"Hence, the answer is $$N! ",(0,o.kt)("em",{parentName:"p"}," \\sum_{i=1}^{N} (2 ")," i - 1)$$. Remember to take $$MOD$$ during the calculation."),(0,o.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int countOrders(int n) {\n        long long M = 1e9 + 7, ans = 1;\n        for (int i = 1; i <= n; i++) {\n            // number of ways to put P: N!\n            (ans *= i) %= M;\n            // number of ways to put D after P: 1 * 3 * 5 * .. * (2N - 1)\n            (ans *= (2 * i - 1)) %= M;\n        }\n        return ans;\n    }\n};\n")))}h.isMDXComponent=!0}}]);