"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[17495],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),d=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return o.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),u=r,h=p["".concat(l,".").concat(u)]||p[u]||m[u]||a;return t?o.createElement(h,i(i({ref:n},c),{},{components:t})):o.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var d=2;d<a;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},78873:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=t(87462),r=(t(67294),t(3905));const a={description:"Author: @heiheihang, @wingkwong | https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/"},i="2192 - All Ancestors of a Node in a Directed Acyclic Graph (Medium)",s={unversionedId:"2100-2199/all-ancestors-of-a-node-in-a-directed-acyclic-graph-medium",id:"2100-2199/all-ancestors-of-a-node-in-a-directed-acyclic-graph-medium",title:"2192 - All Ancestors of a Node in a Directed Acyclic Graph (Medium)",description:"Author: @heiheihang, @wingkwong | https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/",source:"@site/solutions/2100-2199/2192-all-ancestors-of-a-node-in-a-directed-acyclic-graph-medium.md",sourceDirName:"2100-2199",slug:"/2100-2199/all-ancestors-of-a-node-in-a-directed-acyclic-graph-medium",permalink:"/solutions/2100-2199/all-ancestors-of-a-node-in-a-directed-acyclic-graph-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2192-all-ancestors-of-a-node-in-a-directed-acyclic-graph-medium.md",tags:[],version:"current",sidebarPosition:2192,frontMatter:{description:"Author: @heiheihang, @wingkwong | https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/"},sidebar:"tutorialSidebar",previous:{title:"2191 - Sort the Jumbled Numbers (Medium)",permalink:"/solutions/2100-2199/sort-the-jumbled-numbers-medium"},next:{title:"2193 - Minimum Number of Moves to Make Palindrome (Hard)",permalink:"/solutions/2100-2199/minimum-number-of-moves-to-make-palindrome-hard"}},l={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Topological Sort",id:"approach-1-topological-sort",level:2},{value:"Approach 2: DFS",id:"approach-2-dfs",level:2}],c=(p="SolutionAuthor",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var p;const m={toc:d},u="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2192---all-ancestors-of-a-node-in-a-directed-acyclic-graph-medium"},"2192 - All Ancestors of a Node in a Directed Acyclic Graph (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/"},"https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given a positive integer ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," representing the number of nodes of a ",(0,r.kt)("strong",{parentName:"p"},"Directed Acyclic Graph")," (DAG). The nodes are numbered from ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"n - 1")," (",(0,r.kt)("strong",{parentName:"p"},"inclusive"),")."),(0,r.kt)("p",null,"You are also given a 2D integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"edges"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"edges[i] = [fromi, toi]")," denotes that there is a ",(0,r.kt)("strong",{parentName:"p"},"unidirectional")," edge from ",(0,r.kt)("inlineCode",{parentName:"p"},"fromi")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"toi")," in the graph."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"a list")," ",(0,r.kt)("inlineCode",{parentName:"p"},"answer"),(0,r.kt)("em",{parentName:"p"},", where")," ",(0,r.kt)("inlineCode",{parentName:"p"},"answer[i]")," ",(0,r.kt)("em",{parentName:"p"},"is the ",(0,r.kt)("strong",{parentName:"em"},"list of ancestors")," of the")," ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," ",(0,r.kt)("em",{parentName:"p"},"node, sorted in ",(0,r.kt)("strong",{parentName:"em"},"ascending order")),"."),(0,r.kt)("p",null,"A node ",(0,r.kt)("inlineCode",{parentName:"p"},"u")," is an ",(0,r.kt)("strong",{parentName:"p"},"ancestor")," of another node ",(0,r.kt)("inlineCode",{parentName:"p"},"v")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"u")," can reach ",(0,r.kt)("inlineCode",{parentName:"p"},"v")," via a set of edges."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2019/12/12/e1.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]\nOutput: [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]\nExplanation:\nThe above diagram represents the input graph.\n- Nodes 0, 1, and 2 do not have any ancestors.\n- Node 3 has two ancestors 0 and 1.\n- Node 4 has two ancestors 0 and 2.\n- Node 5 has three ancestors 0, 1, and 3.\n- Node 6 has five ancestors 0, 1, 2, 3, and 4.\n- Node 7 has four ancestors 0, 1, 2, and 3.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2019/12/12/e2.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: n = 5, edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\nOutput: [[],[0],[0,1],[0,1,2],[0,1,2,3]]\nExplanation:\nThe above diagram represents the input graph.\n- Node 0 does not have any ancestor.\n- Node 1 has one ancestor 0.\n- Node 2 has two ancestors 0 and 1.\n- Node 3 has three ancestors 0, 1, and 2.\n- Node 4 has four ancestors 0, 1, 2, and 3.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= n <= 1000")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= edges.length <= min(2000, n * (n - 1) / 2)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"edges[i].length == 2")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= fromi, toi <= n - 1")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fromi != toi")),(0,r.kt)("li",{parentName:"ul"},"There are no duplicate edges."),(0,r.kt)("li",{parentName:"ul"},"The graph is ",(0,r.kt)("strong",{parentName:"li"},"directed")," and ",(0,r.kt)("strong",{parentName:"li"},"acyclic"),".")),(0,r.kt)("h2",{id:"approach-1-topological-sort"},"Approach 1: Topological Sort"),(0,r.kt)("p",null,"This question is quite challenging, and there are multiple ways to do it. Topological sort is one of the less direct way, but the logic is as following:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Count the number of parents (In-Degree) of each node"),(0,r.kt)("li",{parentName:"ol"},"Start from the nodes without any parent"),(0,r.kt)("li",{parentName:"ol"},"For each child, remove one In-Degree of it, if it is zero, add it to the queue"),(0,r.kt)("li",{parentName:"ol"},"When looking at a node, perform union to the set of ancestors of each of its parent")),(0,r.kt)("p",null,"We observe that we can be sure that the ancestors of a node are all found until all of its parents are visited. This is the reason why we only visit a node when its In-Degree (number of unvisited parent) is 0."),(0,r.kt)(c,{name:"@heiheihang",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def getAncestors(self, n: int, edges: List[List[int]]) -> List[List[int]]:\n        \n        #initialise the list of ancestors\n        ancestors = []\n        for i in range(n):\n            ancestors.append(set())\n        \n        #initialize bfs level\n        level = set()\n        \n        #initialize sets of parent, children, and in-degree\n        parents = defaultdict(list)\n        children = defaultdict(list)\n        degree = defaultdict(int)\n        \n        for parent,child in edges:\n            parents[child].append(parent)\n            children[parent].append(child)\n            degree[child] += 1\n            \n        #find the set of nodes without parents\n        for i in range(n):\n            if(i not in parents):\n                level.add(i)\n        \n        #perform bfs\n        while(level):\n            newLevel = set()\n            for node in level:\n                \n                #group all its parent's ancestors to node_ancestors\n                node_ancestors = set()\n                for parent in parents[node]:\n                    node_ancestors |= ancestors[parent]\n                \n                #need to include itself for its children to reference\n                node_ancestors.add(node)\n                \n                #set the node's ancestors \n                ancestors[node] = node_ancestors\n                \n                #update its child in-degree\n                for child in children[node]:\n                    degree[child] -= 1\n                    \n                    #if the child's parents have been visited, add it to next level\n                    if(degree[child] == 0):\n                        newLevel.add(child)\n            level = newLevel\n                \n        \n        ans = []\n        \n        #put all ancestors to the final answer list\n        for i in range(n):\n            s = res[i]\n            \n            #need to remove itself \n            s.remove(i)\n            l = list(s)\n            l.sort()\n            ans.append(l)\n            \n        return ans\n")),(0,r.kt)("h2",{id:"approach-2-dfs"},"Approach 2: DFS"),(0,r.kt)("p",null,"We can start from each node $$u$$ and perform DFS to find out all visited nodes. The ancestors of $$u$$would be those visited nodes excluding $$u$$. Since the searching direction is opposite, we change it from $$u$$ -> $$v$$ to $$v$$ -> $$u$$. In Example 1, if $$u$$ is $$6$$, then $$6$$-> $$3$$ -> $$0$$, $$6$$ -> $$3$$-> $$1$$ and $$6$$-> $$4$$ -> $$2$$, so the visited nodes excluding itself are $$","[0, 1, 2, 3,4]","$$."),(0,r.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<int>> g;\n    vector<int> vis;\n    void dfs(int u) {\n        // mark it visited\n        vis[u] = 1;\n        // from u, check the next node\n        // e.g. node 6 can go to node 3 and node 4\n        for (auto v : g[u]) {\n            // only perform dfs if node is not visited\n            if (!vis[v]) {\n                dfs(v);\n            }\n        }\n    }\n    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {\n        g.resize(n);\n        vis.resize(n);\n        // from x[1] to x[0]\n        for (auto x : edges) g[x[1]].push_back(x[0]);\n        vector<vector<int>> ans;\n        for (int i = 0; i < n; i++) {\n            // tmp array to hold answer for node i\n            vector<int> tmp;\n            // vis is used to check if node i is visited or not\n            // re-init for each node\n            vis = vector<int>(n, 0);\n            // dfs - start from node i\n            dfs(i);\n            // right here all nodes from node i have been visited\n            // iterate each node\n            for (int j = 0; j < n; j++) {\n                // ancestors = those visited nodes excluding itself\n                if (!vis[j] || i == j) continue;\n                // node j is one of the ancestors\n                tmp.push_back(j);\n            }\n            // push it to ans\n            ans.push_back(tmp);\n        }\n        return ans;\n    }\n};\n")))}h.isMDXComponent=!0}}]);