"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[67547],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),o=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=o(e.components);return a.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=o(n),c=r,h=d["".concat(m,".").concat(c)]||d[c]||u[c]||i;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},99648:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return m},default:function(){return f},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return u}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),l=["components"],s={description:"Author: @ganajayant | https://leetcode.com/problems/time-based-key-value-store/"},m="0981 - Time Based Key-Value Store (Medium)",o={unversionedId:"0900-0999/time-based-key-value-store-medium",id:"0900-0999/time-based-key-value-store-medium",title:"0981 - Time Based Key-Value Store (Medium)",description:"Author: @ganajayant | https://leetcode.com/problems/time-based-key-value-store/",source:"@site/solutions/0900-0999/0981-time-based-key-value-store-medium.md",sourceDirName:"0900-0999",slug:"/0900-0999/time-based-key-value-store-medium",permalink:"/leetcode-the-hard-way/solutions/0900-0999/time-based-key-value-store-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0981-time-based-key-value-store-medium.md",tags:[],version:"current",sidebarPosition:981,frontMatter:{description:"Author: @ganajayant | https://leetcode.com/problems/time-based-key-value-store/"},sidebar:"tutorialSidebar",previous:{title:"0976 - Largest Perimeter Triangle (Easy)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/largest-perimeter-triangle-easy"},next:{title:"0985 - Sum of Even Numbers After Queries (Medium)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/sum-of-even-numbers-after-queries.medium"}},p={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}],d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},c=d("Tabs"),h=d("TabItem"),y=d("SolutionAuthor"),k={toc:u};function f(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0981---time-based-key-value-store-medium"},"0981 - Time Based Key-Value Store (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/time-based-key-value-store/"},"https://leetcode.com/problems/time-based-key-value-store/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp."),(0,i.kt)("p",null,"Implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeMap")," class:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"TimeMap()")," Initializes the object of the data structure.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"void set(String key, String value, int timestamp)")," Stores the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," with the value ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," at the given time ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamp"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"String get(String key, int timestamp)")," Returns a value such that ",(0,i.kt)("inlineCode",{parentName:"p"},"set")," was called previously, with ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamp_prev <= timestamp"),". If there are multiple such values, it returns the value associated with the largest ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamp_prev"),". If there are no values, it returns ",(0,i.kt)("inlineCode",{parentName:"p"},'""'),"."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: ["TimeMap", "set", "get", "get", "set", "get", "get"] \n        [[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]\nOutput: [null, null, "bar", "bar", null, "bar2", "bar2"]\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= key.length, value.length <= 100")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"value")," consist of lowercase English letters and digits."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= timestamp <= 10^7")),(0,i.kt)("li",{parentName:"ul"},"All the timestamps ",(0,i.kt)("inlineCode",{parentName:"li"},"timestamp")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"set")," are strictly increasing."),(0,i.kt)("li",{parentName:"ul"},"At most ",(0,i.kt)("inlineCode",{parentName:"li"},"2 * 10^5")," calls will be made to ",(0,i.kt)("inlineCode",{parentName:"li"},"set")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"get"),".")),(0,i.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,i.kt)("p",null,"Create a hashmap to store key, value pairs. Here the value timestamp value with acutal value which is stored in another Object of class Element\nWhenever get used for a particular element we will be going to get all the values of corresponding key and binary search the list of timestamps "),(0,i.kt)(c,{mdxType:"Tabs"},(0,i.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(y,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'class Element {\n    String val;\n    int timestamp;\n\n    public Element(String val, int timestamp) {\n        this.val = val;\n        this.timestamp = timestamp;\n    }\n\n}\n\nclass TimeMap {\n    HashMap<String, LinkedList<Element>> hm;\n\n    public TimeMap() {\n        hm = new HashMap<>();\n    }\n\n    public void set(String key, String value, int timestamp) {\n        if (hm.containsKey(key)) {\n            LinkedList<Element> ll = hm.get(key);\n            ll.add(new Element(value, timestamp));\n            hm.put(key, ll);\n        } else {\n            LinkedList<Element> ll = new LinkedList<>();\n            ll.add(new Element(value, timestamp));\n            hm.put(key, ll);\n        }\n    }\n\n    public String get(String key, int timestamp) {\n        LinkedList<Element> ll = hm.getOrDefault(key, null);\n        if (ll == null) {\n            return "";\n        }\n        int low = 0, high = ll.size() - 1;\n        if (ll.get(low).timestamp > timestamp) {\n            return "";\n        }\n        if (ll.get(high).timestamp <= timestamp) {\n            return ll.get(high).val;\n        }\n        while (low < high) {\n            int mid = (low + high) / 2;\n            if (ll.get(mid).timestamp == timestamp) {\n                return ll.get(mid).val;\n            }\n            if (ll.get(mid).timestamp < timestamp) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n\n        }\n        return ll.get(low - 1).val;\n    }\n}\n'))),(0,i.kt)(h,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(y,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'class TimeMap:\n    # Here we will implement our TimeMap. We need easy access to our values, via\n    # a key,value pair system, as well as we may also have multiple values for \n    # each key, which will be inputted at a given timestamp. So a hash map, for\n    # O(1) access given keys, with values being an array of all our values at a given\n    # timestamp. ie: { key: [(timestamp1, value1), (timestamp2, value2)...] }\n    # That gives us O(1) access to the arrays, then we just need to search. Knowing\n    # values will be added in strictly increasing order means they will be sorted\n    # by time, allowing us to use Binary Search, O(logn), to search over timestamps.\n    def __init__(self):\n        # initialize empty hash map, O(1) to init.\n        self.map = {}\n        \n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        # add key, value, timestamps to hash map, O(1) to add to hash map.\n        # key doesn\'t yet exist in our hash map, initialize as empty array.\n        if key not in self.map:\n            self.map[key] = []\n        # add tuple to hash map @ key, consisting of (timestamp, value)\n        self.map[key].append((timestamp, value))\n        \n\n    def get(self, key: str, timestamp: int) -> str:\n        # Get value from key, #O(logn) where n length of array we are searching.\n        # base case: key doesn\'t exist, return early\n        if key not in self.map:\n            return ""\n        # get value at key, which is an array we will be binary searching.\n        arr = self.map[key]\n        # base case: checking if timestamp predates all times in array,\n        # if timestamp does predate all times, return early\n        if timestamp < arr[0][0]:\n            return ""\n        # binary search, initialize left, l and right, r pointers.\n        l, r = 0, len(arr)\n        while l < r:\n            # calculate middle, m. Do it this way as good practice\n            # for languages that might overflow max integer.\n            m = l + (r - l) // 2\n            time = arr[m][0]\n            # found time, return early\n            if time == timestamp:\n                return arr[m][1]\n            # time looking at is smaller than timestamp we need.\n            elif time < timestamp:\n                # move left pointer, scan the array, right of m.\n                l = m + 1\n            # time we are looking at is larger than timestamp we need.\n            else:\n                # move right pointer, scan the array, left of m.\n                r = m\n        # our binary search will always either return the proper answer\n        # or finish with left pointer 1 above the answer, as it didn\'t\n        # exactly find the answer, so we can return:\n        return arr[l - 1][1]\n')))))}f.isMDXComponent=!0}}]);