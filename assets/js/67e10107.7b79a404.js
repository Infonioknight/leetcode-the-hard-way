"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[79310],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},62825:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return v},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],l={description:"Author: @vigneshshiv | https://leetcode.com/problems/subtree-of-another-tree/"},s="0572 - Subtree of Another Tree (Easy)",u={unversionedId:"0500-0599/subtree-of-another-tree-easy",id:"0500-0599/subtree-of-another-tree-easy",title:"0572 - Subtree of Another Tree (Easy)",description:"Author: @vigneshshiv | https://leetcode.com/problems/subtree-of-another-tree/",source:"@site/solutions/0500-0599/0572-subtree-of-another-tree-easy.md",sourceDirName:"0500-0599",slug:"/0500-0599/subtree-of-another-tree-easy",permalink:"/solutions/0500-0599/subtree-of-another-tree-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0500-0599/0572-subtree-of-another-tree-easy.md",tags:[],version:"current",sidebarPosition:572,frontMatter:{description:"Author: @vigneshshiv | https://leetcode.com/problems/subtree-of-another-tree/"},sidebar:"tutorialSidebar",previous:{title:"0567 - Permutation in String (Medium)",permalink:"/solutions/0500-0599/permutation-in-string-medium"},next:{title:"0581 - Shortest Unsorted Continuous Subarray (Medium)",permalink:"/solutions/0500-0599/shortest-unsorted-continuous-subarray-medium"}},p={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Pre-order Recursive Solution",id:"approach-1-pre-order-recursive-solution",level:2}],d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)}},m=d("Tabs"),h=d("TabItem"),f=d("SolutionAuthor"),b={toc:c};function v(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0572---subtree-of-another-tree-easy"},"0572 - Subtree of Another Tree (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/subtree-of-another-tree/"},"https://leetcode.com/problems/subtree-of-another-tree/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given the roots of two binary trees ",(0,a.kt)("inlineCode",{parentName:"p"},"root")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"subRoot"),", return true if there is a subtree of ",(0,a.kt)("inlineCode",{parentName:"p"},"root")," with the same structure and node values of ",(0,a.kt)("inlineCode",{parentName:"p"},"subRoot")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,a.kt)("p",null,"A subtree of a binary tree tree is a ",(0,a.kt)("inlineCode",{parentName:"p"},"tree")," that consists of a node in ",(0,a.kt)("inlineCode",{parentName:"p"},"tree")," and all of this node's descendants. The ",(0,a.kt)("inlineCode",{parentName:"p"},"tree")," could also be considered as a subtree of itself."),(0,a.kt)("p",null,"Given the ",(0,a.kt)("inlineCode",{parentName:"p"},"head")," of a linked list, remove the ",(0,a.kt)("inlineCode",{parentName:"p"},"nth")," node from the end of the list and return its head."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg",alt:"Alt text"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [3,4,5,1,2], subRoot = [4,1,2]\nOutput: true\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/04/28/subtree2-tree.jpg",alt:"Alt text"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\nOutput: false\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the ",(0,a.kt)("inlineCode",{parentName:"li"},"root")," tree is in the range ",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 2000]"),"."),(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the ",(0,a.kt)("inlineCode",{parentName:"li"},"subRoot")," tree is in the range ",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 1000]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-10^4 <= root.val <= 10^4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-10^4 <= subRoot.val <= 10^4"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Follow up:")," Could you do this in one pass?"),(0,a.kt)("h2",{id:"approach-1-pre-order-recursive-solution"},"Approach 1: Pre-order Recursive Solution"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(f,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSubtree(TreeNode root, TreeNode subRoot) {\n        boolean contains = Objects.nonNull(subRoot) ? containsTree(root, subRoot) : true;\n        return contains;\n    }\n    \n    private boolean containsTree(TreeNode t1, TreeNode t2) {\n        // Big tree t1 is empty, not a matching case\n        if (Objects.isNull(t1)) return false;\n        if (Objects.equals(t1.val, t2.val) && matchTree(t1, t2)) return true;\n        return containsTree(t1.left, t2) || containsTree(t1.right, t2);\n    }\n    \n    private boolean matchTree(TreeNode t1, TreeNode t2) {\n        // nothing left in the subtree to compare\n        if (Objects.isNull(t1) && Objects.isNull(t2)) return true;\n        // one tree is empty, therefore trees don't match\n        if (Objects.isNull(t1) || Objects.isNull(t2)) return false;\n        // value doesn't match\n        if (!Objects.equals(t1.val, t2.val)) return false;\n        // Repeat until the last node of both left and right\n        return matchTree(t1.left, t2.left) && matchTree(t1.right, t2.right);\n    }\n}\n")))))}v.isMDXComponent=!0}}]);