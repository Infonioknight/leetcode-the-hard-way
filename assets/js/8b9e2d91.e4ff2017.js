"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[28515],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>u});var a=n(67294);function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){s(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function r(t,e){if(null==t)return{};var n,a,s=function(t,e){if(null==t)return{};var n,a,s={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(s[n]=t[n]);return s}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(s[n]=t[n])}return s}var o=a.createContext({}),m=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=m(t.components);return a.createElement(o.Provider,{value:e},t.children)},d="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},h=a.forwardRef((function(t,e){var n=t.components,s=t.mdxType,l=t.originalType,o=t.parentName,p=r(t,["components","mdxType","originalType","parentName"]),d=m(n),h=s,u=d["".concat(o,".").concat(h)]||d[h]||c[h]||l;return n?a.createElement(u,i(i({ref:e},p),{},{components:n})):a.createElement(u,i({ref:e},p))}));function u(t,e){var n=arguments,s=e&&e.mdxType;if("string"==typeof t||s){var l=n.length,i=new Array(l);i[0]=h;var r={};for(var o in e)hasOwnProperty.call(e,o)&&(r[o]=e[o]);r.originalType=t,r[d]="string"==typeof t?t:s,i[1]=r;for(var m=2;m<l;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2413:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>r,toc:()=>m});var a=n(87462),s=(n(67294),n(3905));const l={description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/sort-list/"},i="0148 - Sort List (Medium)",r={unversionedId:"0100-0199/sort-list-medium",id:"0100-0199/sort-list-medium",title:"0148 - Sort List (Medium)",description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/sort-list/",source:"@site/solutions/0100-0199/0148-sort-list-medium.md",sourceDirName:"0100-0199",slug:"/0100-0199/sort-list-medium",permalink:"/solutions/0100-0199/sort-list-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0148-sort-list-medium.md",tags:[],version:"current",sidebarPosition:148,frontMatter:{description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/sort-list/"},sidebar:"tutorialSidebar",previous:{title:"0146 - LRU Cache (Medium)",permalink:"/solutions/0100-0199/lru-cache-medium"},next:{title:"0150 - Evaluate Reverse Polish Notation (Medium)",permalink:"/solutions/0100-0199/evaluate-reverse-olish-notation-medium"}},o={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Recursive Merge Sort",id:"approach-1-recursive-merge-sort",level:2}],p=t=>function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)},d=p("Tabs"),c=p("TabItem"),h=p("SolutionAuthor"),u={toc:m},N="wrapper";function k(t){let{components:e,...n}=t;return(0,s.kt)(N,(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"0148---sort-list-medium"},"0148 - Sort List (Medium)"),(0,s.kt)("h2",{id:"problem-link"},"Problem Link"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sort-list/"},"https://leetcode.com/problems/sort-list/")),(0,s.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,s.kt)("p",null,"Given the ",(0,s.kt)("inlineCode",{parentName:"p"},"head")," of a linked list, return ",(0,s.kt)("em",{parentName:"p"},"the list after sorting it in ",(0,s.kt)("strong",{parentName:"em"},"ascending order")),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 1:")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg",alt:null})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: head = [4,2,1,3]\nOutput: [1,2,3,4]\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 2:")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg",alt:null})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 3:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: head = []\nOutput: []\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Constraints:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The number of nodes in the list is in the range ",(0,s.kt)("inlineCode",{parentName:"li"},"[0, 5 * 10^4]"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"-10^5 <= Node.val <= 10^5"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Follow up:")," Can you sort the linked list in ",(0,s.kt)("inlineCode",{parentName:"p"},"O(n logn)")," time and ",(0,s.kt)("inlineCode",{parentName:"p"},"O(1)")," memory (i.e. constant space)?"),(0,s.kt)("h2",{id:"approach-1-recursive-merge-sort"},"Approach 1: Recursive Merge Sort"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Find the middle node and cut the head reference till middle node"),(0,s.kt)("li",{parentName:"ul"},"Keep reducing the nodes size to smaller for comparison (same as like merge sort)"),(0,s.kt)("li",{parentName:"ul"},"Once we reduce nodes size to 1, merge the nodes in sorted (ascending) order."),(0,s.kt)("li",{parentName:"ul"},"Keep merging the nodes till last, to build the sorted list.")),(0,s.kt)("p",null,"Time Complexity: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n log(n))")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"))"))))),", where ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"n")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," - # of nodes in the list"),(0,s.kt)("p",null,"Space complexity: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),", ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"n")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," - recursive call stack"),(0,s.kt)(d,{mdxType:"Tabs"},(0,s.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)(h,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        if (Objects.isNull(head) || Objects.isNull(head.next)) {\n            return head;\n        }\n        // Middle node\n        ListNode mid = middleNode(head);\n        // Keep traversing left to get the smallest nodes for comparison (smallest we can get is 1 node)\n        ListNode left = sortList(head);\n        // Starting from middle, to find the smallest nodes for comparison\n        ListNode right = sortList(mid);\n        // Compare the list and return the merged nodes\n        return mergeTwoLists(left, right);\n    }\n    \n    public ListNode middleNode(ListNode head) {\n        ListNode midPrev = null;\n        //\n        while (head != null && head.next != null) {\n            midPrev = (midPrev == null) ? head : midPrev.next;\n            head = head.next.next;\n        }\n        ListNode mid = midPrev.next;\n        // Cut the reference to the next pointer (mid), so that head remains from start to mid.\n        midPrev.next = null;\n        return mid;\n    }\n    \n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        // Base case\n        if (Objects.isNull(list1) && Objects.isNull(list2)) {\n            return list1;\n        }\n        if (Objects.isNull(list1)) {\n            return list2;\n        }\n        if (Objects.isNull(list2)) {\n            return list1;\n        }\n        ListNode head = new ListNode();\n        ListNode node = head;\n        while (Objects.nonNull(list1) && Objects.nonNull(list2)) {\n            if (list1.val <= list2.val) {\n                node.next = list1;\n                list1 = list1.next;\n            } else {\n                node.next = list2;\n                list2 = list2.next;\n            }\n            node = node.next;\n        }\n        // If either of half is not empty then append it\n        node.next = Objects.nonNull(list1) ? list1 : list2;\n        return head.next;\n    }\n}\n"))),(0,s.kt)(c,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head):\n        # Base case \n        if not head or not head.next:\n            return head\n        \n        # split the list into two halfs\n        slow, fast = head, head.next \n        while fast and fast.next:\n            slow = slow.next \n            fast = fast.next.next\n        start = slow.next \n        slow.next = None \n        \n        # Sort left portion\n        left = self.sortList(head)\n        # Sort right portion\n        right = self.sortList(start)\n        # Merge them and return\n        return self.merge(left, right)\n\n    def merge(self, list1, list2):\n        tail = dummy = ListNode()\n        # while list1 and list2 are not empty\n        while list1 and list2:\n            # Find smaller value \n            if list1.val < list2.val:\n                tail.next = list1\n                list1 = list1.next \n            else:\n                tail.next = list2\n                list2 = list2.next \n            tail = tail.next\n        # it's possible that one of two lists are not empty\n        if list1: \n            tail.next = list1\n        if list2:\n            tail.next = list2\n        \n        return dummy.next\n"))),(0,s.kt)(c,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,s.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar sortList = function(head) {\n    // base case \n    if (!head || !head.next) return head;\n    // split the list into two halfs\n    // two pointers\n    let slow = head;\n    let fast = head.next;\n    while (fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    let start = slow.next\n    slow.next = null\n    // sort left portion\n    let left = sortList(head);\n    // sort right portion\n    let right = sortList(start);\n    // merge them and return \n    return merge(left, right);\n};\n// merge sort function\nfunction merge(list1, list2) {\n    let tail = dummy = new ListNode;\n    // while list1 and list2 are not empty\n    while (list1 && list2) {\n        // find smaller value \n        if (list1.val < list2.val) {\n            tail.next = list1;\n            list1 = list1.next;\n        } else {\n            tail.next = list2;\n            list2 = list2.next;\n        }\n        tail = tail.next;\n    }\n    // it's possible that one of two lists are not empty\n    if (list1) tail.next = list1;\n    if (list2) tail.next = list2;\n    return dummy.next;\n};\n"))),(0,s.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,s.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        // base case\n        if (head == NULL || head->next == NULL) return head;\n        // split list into two halfs\n        // slow and fast pointer\n        ListNode* slow = head;\n        ListNode* fast = head->next;\n        while (fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        ListNode* start = slow->next;\n        slow->next = NULL;\n        // sort left portion\n        ListNode* left = sortList(head);\n        // sort right portion\n        ListNode* right = sortList(start);\n        // merge left and right portion\n        return merge(left, right);\n    }\n    // merge sort function\n    ListNode* merge(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode(0);\n        ListNode* tail = dummy;\n        // while both lists are not empty\n        while (list1 && list2) {\n            // find smaller value\n            if (list1->val < list2->val) {\n                tail->next = list1;\n                list1 = list1->next;\n            } else {\n                tail->next = list2;\n                list2 = list2->next;\n            }\n            tail = tail->next;\n        }\n        // it's possible that one of two lists are not empty\n        if (list1) tail->next = list1;\n        if (list2) tail->next = list2;\n        return dummy->next;\n    }\n};\n")))))}k.isMDXComponent=!0}}]);