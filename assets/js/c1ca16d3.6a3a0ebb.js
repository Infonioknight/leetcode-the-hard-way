"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[73645],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=i,g=m["".concat(u,".").concat(d)]||m[d]||c[d]||a;return t?r.createElement(g,o(o({ref:n},s),{},{components:t})):r.createElement(g,o({ref:n},s))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},37854:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>v,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=t(87462),i=(t(67294),t(3905));const a={description:"Author: @vigneshshiv, @MithunPrabhu777, @radojicic23 | https://leetcode.com/problems/reverse-integer/"},o="0007 - Reverse Integer (Medium)",l={unversionedId:"0000-0099/reverse-integer-medium",id:"0000-0099/reverse-integer-medium",title:"0007 - Reverse Integer (Medium)",description:"Author: @vigneshshiv, @MithunPrabhu777, @radojicic23 | https://leetcode.com/problems/reverse-integer/",source:"@site/solutions/0000-0099/0007-reverse-integer-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/reverse-integer-medium",permalink:"/solutions/0000-0099/reverse-integer-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0007-reverse-integer-medium.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{description:"Author: @vigneshshiv, @MithunPrabhu777, @radojicic23 | https://leetcode.com/problems/reverse-integer/"},sidebar:"tutorialSidebar",previous:{title:"0006 - Zigzag Conversion (Medium)",permalink:"/solutions/0000-0099/zigzag-conversion-medium"},next:{title:"0009 - Palindrome Number (Easy)",permalink:"/solutions/0000-0099/palindrome-number-easy"}},u={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Standard",id:"approach-1-standard",level:2}],s=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},m=s("Tabs"),c=s("TabItem"),d=s("SolutionAuthor"),g={toc:p},b="wrapper";function v(e){let{components:n,...t}=e;return(0,i.kt)(b,(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0007---reverse-integer-medium"},"0007 - Reverse Integer (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/reverse-integer/"},"https://leetcode.com/problems/reverse-integer/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given a signed 32-bit integer $x$, return $x$ with its digits reversed. If reversing $x$ causes the value to go outside the signed 32-bit integer range ",(0,i.kt)("inlineCode",{parentName:"p"},"[-2^31, 2^31 - 1]"),", then return $0$."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: x = 123\nOutput: 321\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: x = -123\nOutput: -321\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: x = 120\nOutput: 21\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-2^31 <= x <= 2^31 - 1"))),(0,i.kt)("h2",{id:"approach-1-standard"},"Approach 1: Standard"),(0,i.kt)("p",null,"As input can be from ",(0,i.kt)("inlineCode",{parentName:"p"},"Integer.MIN_VALUE")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"Integer.MAX_VALUE"),". "),(0,i.kt)("p",null,"Reversing some of the 10 digits number, will not provide the correct answer, because the integer range might overflow, if it does return 0, otherwise the reversed number. "),(0,i.kt)("p",null,"For example, reversing the last integer number ",(0,i.kt)("inlineCode",{parentName:"p"},"2147483647")," can go out of range, so having ",(0,i.kt)("inlineCode",{parentName:"p"},"long")," primitive in the program can hold the range. "),(0,i.kt)("p",null,"First, get the sign bit value, and negate the input if it's negative.\nReverse the integer and if it's above max range then return 0 or return the value with sign bit value."),(0,i.kt)(m,{mdxType:"Tabs"},(0,i.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(d,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Time complexity: O(1), where # digits are always <= 10\n// Space complexity: O(1)\nclass Solution {\n    public int reverse(int x) {\n        long num = 0, remainder = 0;\n        int sign = 1;\n        if (x < 0) {\n            x *= -1;\n            sign = -1;\n        }\n        while (x > 0) {\n            remainder = x % 10;\n            num = (num * 10) + remainder;\n            x /= 10;\n        }\n        return num > Integer.MAX_VALUE ? 0 : (int) num * sign;\n    }\n}\n"))),(0,i.kt)(c,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)(d,{name:"@MithunPrabhu777",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n    let [number, sign, remainder] = [0, 1, 0];\n    const RANGE = 2 ** 31 - 1;\n    if (x < 0) {\n        x *= -1;\n        sign = -1;\n    }\n    while (x > 0) {\n        remainder = x % 10;\n        number = (number * 10) + remainder;\n        x = Math.floor(x / 10);\n    }\n    return number > RANGE ? 0 : number * sign;\n};\n"))),(0,i.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def reverse(self, x: int) -> int:\n        number, remainder, sign = 0, 0, 1\n        MAX = 2 ** 31 - 1\n        if x < 0:\n            x *= -1\n            sign = -1\n        while x > 0:\n            remainder = x % 10\n            number = (number * 10) + remainder\n            x //= 10\n        return 0 if number > MAX else int(number) * sign\n"))),(0,i.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int reverse(int x) {\n        int number = 0;\n        while (x != 0) {\n            if (number > INT_MAX / 10 || number < INT_MIN / 10) {\n                return 0;\n            }\n            int carry = x % 10;\n            number = number * 10 + carry;\n            x /= 10;\n        }\n        return number;\n    }\n};\n")))))}v.isMDXComponent=!0}}]);