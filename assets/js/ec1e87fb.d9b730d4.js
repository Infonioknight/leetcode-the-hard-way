"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[23287],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var i=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=p(t),m=l,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?i.createElement(h,r(r({ref:n},c),{},{components:t})):i.createElement(h,r({ref:n},c))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,r=new Array(o);r[0]=d;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:l,r[1]=a;for(var p=2;p<o;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},52992:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return y},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return u}});var i=t(87462),l=t(63366),o=(t(67294),t(3905)),r=["components"],a={description:"Author: @lonyehan, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/linked-list-cycle/",tags:["Hash Table","Linked List","Two Pointers"]},s="0141 - Linked List Cycle (Easy)",p={unversionedId:"0100-0199/linked-list-cycle",id:"0100-0199/linked-list-cycle",title:"0141 - Linked List Cycle (Easy)",description:"Author: @lonyehan, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/linked-list-cycle/",source:"@site/solutions/0100-0199/0141-linked-list-cycle.md",sourceDirName:"0100-0199",slug:"/0100-0199/linked-list-cycle",permalink:"/solutions/0100-0199/linked-list-cycle",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0141-linked-list-cycle.md",tags:[{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"Linked List",permalink:"/solutions/tags/linked-list"},{label:"Two Pointers",permalink:"/solutions/tags/two-pointers"}],version:"current",sidebarPosition:141,frontMatter:{description:"Author: @lonyehan, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/linked-list-cycle/",tags:["Hash Table","Linked List","Two Pointers"]},sidebar:"tutorialSidebar",previous:{title:"0138 - Copy List with Random Pointer (Medium)",permalink:"/solutions/0100-0199/copy-list-with-random-pointer-medium"},next:{title:"0143 - Reorder List (Medium)",permalink:"/solutions/0100-0199/reorder-list-medium"}},c={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two Pointers",id:"approach-1-two-pointers",level:2}],d=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)}},m=d("Tabs"),h=d("TabItem"),k=d("SolutionAuthor"),f={toc:u};function y(e){var n=e.components,t=(0,l.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0141---linked-list-cycle-easy"},"0141 - Linked List Cycle (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/linked-list-cycle/"},"https://leetcode.com/problems/linked-list-cycle/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given ",(0,o.kt)("inlineCode",{parentName:"p"},"head"),", the head of a linked list, determine if the linked list has a cycle in it."),(0,o.kt)("p",null,"There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the ",(0,o.kt)("inlineCode",{parentName:"p"},"next")," pointer. Internally, ",(0,o.kt)("inlineCode",{parentName:"p"},"pos")," is used to denote the index of the node that tail's ",(0,o.kt)("inlineCode",{parentName:"p"},"next")," pointer is connected to. ",(0,o.kt)("strong",{parentName:"p"},"Note that ",(0,o.kt)("inlineCode",{parentName:"strong"},"pos")," is not passed as a parameter"),"."),(0,o.kt)("p",null,"Return ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," ",(0,o.kt)("em",{parentName:"p"},"if there is a cycle in the linked list"),". Otherwise, return ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png",alt:null})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png",alt:null})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png",alt:null})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The number of the nodes in the list is in the range ",(0,o.kt)("inlineCode",{parentName:"li"},"[0, 10^4]"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-10^5 <= Node.val <= 10^5")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pos")," is ",(0,o.kt)("inlineCode",{parentName:"li"},"-1")," or a ",(0,o.kt)("strong",{parentName:"li"},"valid index")," in the linked-list.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Follow up:")," Can you solve it using ",(0,o.kt)("inlineCode",{parentName:"p"},"O(1)")," (i.e. constant) memory?"),(0,o.kt)("h2",{id:"approach-1-two-pointers"},"Approach 1: Two Pointers"),(0,o.kt)(m,{mdxType:"Tabs"},(0,o.kt)(h,{value:"cs",label:"C#",mdxType:"TabItem"},(0,o.kt)(k,{name:"@lonyehan",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public bool HasCycle(ListNode head) {\n        ListNode slowPointer = head;\n        ListNode quickPointer = head;\n        \n        if(head == null) return false;\n        \n        while(head != null) {\n            // slow pointer, move one step each time.\n            slowPointer = slowPointer.next;\n            if(slowPointer == null) return false;\n            \n            // quick pointer, move two steps each time.\n            quickPointer = quickPointer?.next?.next;\n            if(quickPointer == null) return false;\n            \n            // slow pointer meets quick pointer means that there is a cycle in this linked list\n            if(slowPointer == quickPointer) return true;\n        }\n        \n        return false;\n    }\n}\n"))),(0,o.kt)(h,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(k,{name:"@vale-c",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        slowPointer = head\n        quickPointer = head\n        \n        if head == None:\n            return False\n        \n        while head != None:\n            # slow pointer, move one step each time.\n            slowPointer = slowPointer.next\n            if slowPointer == None:\n                return False\n            \n            # quick pointer, move two steps each time.\n            quickPointer = quickPointer.next.next if quickPointer.next != None else None\n            if quickPointer == None:\n                return False\n            \n            # slow pointer meets quick pointer means that there is a cycle in this linked list\n            if slowPointer == quickPointer:\n                return True\n        \n        return False\n"))),(0,o.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(k,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\n// Time complexity: O(n), where n - # of nodes in the list\n// Space complexity: O(1)\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        if (head == null) return false;\n        // Fast & Slow pointer\n        ListNode slow = head;\n        ListNode fast = head;\n        // Fast Reference to check if it's not null, because it's traverse twice as fast as slow\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n            // If both meet at the same node then there is a loop\n            if (slow == fast) {\n                return true;\n            }\n        }\n        // If no loop, fast pointer at the end reached it's last node null pointer\n        return false;\n    }\n}\n"))),(0,o.kt)(h,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)(k,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar hasCycle = function(head) {\n    let slow = head\n    let fast = head \n\n    while (fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next;\n        if (slow == fast) {\n            return true;\n        }\n    }\n    return false;\n};\n")))))}y.isMDXComponent=!0}}]);