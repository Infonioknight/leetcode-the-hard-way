"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[29387],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,h=c["".concat(s,".").concat(d)]||c[d]||u[d]||o;return n?r.createElement(h,l(l({ref:t},m),{},{components:n})):r.createElement(h,l({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},19157:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/find-players-with-zero-or-one-losses/"},l="2225 - Find Players With Zero or One Losses (Medium)",i={unversionedId:"2200-2299/find-players-with-zero-or-one-losses-medium",id:"2200-2299/find-players-with-zero-or-one-losses-medium",title:"2225 - Find Players With Zero or One Losses (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/find-players-with-zero-or-one-losses/",source:"@site/solutions/2200-2299/2225-find-players-with-zero-or-one-losses-medium.md",sourceDirName:"2200-2299",slug:"/2200-2299/find-players-with-zero-or-one-losses-medium",permalink:"/solutions/2200-2299/find-players-with-zero-or-one-losses-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2225-find-players-with-zero-or-one-losses-medium.md",tags:[],version:"current",sidebarPosition:2225,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-players-with-zero-or-one-losses/"},sidebar:"tutorialSidebar",previous:{title:"2224 - Minimum Number of Operations to Convert Time (Easy)",permalink:"/solutions/2200-2299/minimum-number-of-operations-to-convert-time-easy"},next:{title:"2226 - Maximum Candies Allocated to K Children (Medium)",permalink:"/solutions/2200-2299/maximum-candies-allocated-to-k-children-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Hash Map",id:"approach-1-hash-map",level:2}],m=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var c;const u={toc:p},d="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2225---find-players-with-zero-or-one-losses-medium"},"2225 - Find Players With Zero or One Losses (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-players-with-zero-or-one-losses/"},"https://leetcode.com/problems/find-players-with-zero-or-one-losses/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"matches")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"matches[i] = [winneri, loseri]")," indicates that the player ",(0,a.kt)("inlineCode",{parentName:"p"},"winneri")," defeated player ",(0,a.kt)("inlineCode",{parentName:"p"},"loseri")," in a match."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"a list")," ",(0,a.kt)("inlineCode",{parentName:"p"},"answer")," ",(0,a.kt)("em",{parentName:"p"},"of size")," ",(0,a.kt)("inlineCode",{parentName:"p"},"2")," ",(0,a.kt)("em",{parentName:"p"},"where:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"answer[0]")," is a list of all players that have ",(0,a.kt)("strong",{parentName:"li"},"not")," lost any matches."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"answer[1]")," is a list of all players that have lost exactly ",(0,a.kt)("strong",{parentName:"li"},"one")," match.")),(0,a.kt)("p",null,"The values in the two lists should be returned in ",(0,a.kt)("strong",{parentName:"p"},"increasing")," order."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You should only consider the players that have played ",(0,a.kt)("strong",{parentName:"li"},"at least one")," match."),(0,a.kt)("li",{parentName:"ul"},"The testcases will be generated such that ",(0,a.kt)("strong",{parentName:"li"},"no")," two matches will have the ",(0,a.kt)("strong",{parentName:"li"},"same")," outcome.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]\nOutput: [[1,2,10],[4,5,7,8]]\nExplanation:\nPlayers 1, 2, and 10 have not lost any matches.\nPlayers 4, 5, 7, and 8 each have lost one match.\nPlayers 3, 6, and 9 each have lost two matches.\nThus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: matches = [[2,3],[1,3],[5,4],[6,4]]\nOutput: [[1,2,5,6],[]]\nExplanation:\nPlayers 1, 2, 5, and 6 have not lost any matches.\nPlayers 3 and 4 each have lost two matches.\nThus, answer[0] = [1,2,5,6] and answer[1] = [].\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= matches.length <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matches[i].length == 2")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= winneri, loseri <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"winneri != loseri")),(0,a.kt)("li",{parentName:"ul"},"All ",(0,a.kt)("inlineCode",{parentName:"li"},"matches[i]")," are ",(0,a.kt)("strong",{parentName:"li"},"unique"),".")),(0,a.kt)("h2",{id:"approach-1-hash-map"},"Approach 1: Hash Map"),(0,a.kt)("p",null,"Check the number of times to lose for each player. If it is $$0$$, then this player belongs to $$ans","[0]","$$. If it is $$1$$, then it belongs to $$ans","[1]","$$."),(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<int>> findWinners(vector<vector<int>>& matches) {\n        vector<vector<int>> ans(2);\n        unordered_map<int, int> lost;\n        // calculate lost matches\n        for (auto x : matches) {\n            if (!lost.count(x[0])) lost[x[0]] = 0;\n            if (!lost.count(x[1])) lost[x[1]] = 0;\n            lost[x[1]]++;\n        }\n        // categorise players\n        for (auto x : lost) {\n            int who = x.first, lostMatches = x.second;\n            if (lostMatches == 0) ans[0].push_back(who);\n            else if (lostMatches == 1) ans[1].push_back(who);\n        }\n        // the values in the two lists should be returned in increasing order \n        sort(ans[0].begin(), ans[0].end());\n        sort(ans[1].begin(), ans[1].end());\n        return ans;\n    }\n};\n")))}h.isMDXComponent=!0}}]);