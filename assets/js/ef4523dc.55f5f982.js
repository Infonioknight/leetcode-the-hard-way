"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[9995],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(n),d=a,h=c["".concat(s,".").concat(d)]||c[d]||u[d]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},24398:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return u}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/can-i-win/",tags:["Math","Dynamic Programming","Bit Manipulation","Memoization","Game Theory","Bitmask"]},s="0464 - Can I Win (Medium)",m={unversionedId:"0400-0499/can-i-win-medium",id:"0400-0499/can-i-win-medium",title:"0464 - Can I Win (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/can-i-win/",source:"@site/solutions/0400-0499/0464-can-i-win-medium.md",sourceDirName:"0400-0499",slug:"/0400-0499/can-i-win-medium",permalink:"/solutions/0400-0499/can-i-win-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0464-can-i-win-medium.md",tags:[{label:"Math",permalink:"/solutions/tags/math"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Bit Manipulation",permalink:"/solutions/tags/bit-manipulation"},{label:"Memoization",permalink:"/solutions/tags/memoization"},{label:"Game Theory",permalink:"/solutions/tags/game-theory"},{label:"Bitmask",permalink:"/solutions/tags/bitmask"}],version:"current",sidebarPosition:464,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/can-i-win/",tags:["Math","Dynamic Programming","Bit Manipulation","Memoization","Game Theory","Bitmask"]},sidebar:"tutorialSidebar",previous:{title:"0452 - Minimum Number of Arrows to Burst Balloons (Medium)",permalink:"/solutions/0400-0499/minimum-number-of-arrows-to-burst-balloons-medium"},next:{title:"0465 - Optimal Account Balancing (Hard)",permalink:"/solutions/0400-0499/optimal-account-balancing-hard"}},p={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Bitmask",id:"approach-1-bitmask",level:2}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},d=c("Tabs"),h=c("TabItem"),b=c("SolutionAuthor"),g={toc:u};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0464---can-i-win-medium"},"0464 - Can I Win (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/can-i-win/"},"https://leetcode.com/problems/can-i-win/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,'In the "100 game" two players take turns adding, to a running total, any integer from ',(0,o.kt)("inlineCode",{parentName:"p"},"1")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"10"),". The player who first causes the running total to ",(0,o.kt)("strong",{parentName:"p"},"reach or exceed")," 100 wins."),(0,o.kt)("p",null,"What if we change the game so that players ",(0,o.kt)("strong",{parentName:"p"},"cannot")," re-use integers?"),(0,o.kt)("p",null,"For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100."),(0,o.kt)("p",null,"Given two integers ",(0,o.kt)("inlineCode",{parentName:"p"},"maxChoosableInteger")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"desiredTotal"),", return ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if the first player to move can force a win, otherwise, return ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),". Assume both players play ",(0,o.kt)("strong",{parentName:"p"},"optimally"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: maxChoosableInteger = 10, desiredTotal = 11\nOutput: false\nExplanation:\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: maxChoosableInteger = 10, desiredTotal = 0\nOutput: true\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: maxChoosableInteger = 10, desiredTotal = 1\nOutput: true\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= maxChoosableInteger <= 20")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= desiredTotal <= 300"))),(0,o.kt)("h2",{id:"approach-1-bitmask"},"Approach 1: Bitmask"),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(h,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(b,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    @lru_cache(None)\n    def canIWin(self, maxChoosableInteger: int, desiredTotal: int, b = 0) -> bool:\n        # 1 + 2 + 3 + .. maxChoosableInteger < desiredTotal -> no one can win\n        # desiredTotal <= 0 and b is set -> can't make a move\n        if maxChoosableInteger * (maxChoosableInteger + 1) // 2 < desiredTotal or desiredTotal <= 0 and b:\n            return False\n        # try each number in [1, maxChoosableInteger]\n        for i in range(1, maxChoosableInteger + 1):\n            # if this number is not used\n            if not (1 << i) & b:\n                # then mark it used -> b | (1 << i)\n                # update desiredTotal to desiredTotal - i\n                if not self.canIWin(maxChoosableInteger, desiredTotal - i, b | (1 << i)):\n                    return True\n")))))}f.isMDXComponent=!0}}]);