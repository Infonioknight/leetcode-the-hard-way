"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[22968],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(t),c=o,h=d["".concat(u,".").concat(c)]||d[c]||m[c]||a;return t?r.createElement(h,i(i({ref:n},s),{},{components:t})):r.createElement(h,i({ref:n},s))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=c;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},51095:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=t(87462),o=(t(67294),t(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/count-odd-numbers-in-an-interval-range/"},i="1523 - Count Odd Numbers in an Interval Range (Easy)",l={unversionedId:"1500-1599/count-odd-numbers-in-an-interval-range-easy",id:"1500-1599/count-odd-numbers-in-an-interval-range-easy",title:"1523 - Count Odd Numbers in an Interval Range (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/count-odd-numbers-in-an-interval-range/",source:"@site/solutions/1500-1599/1523-count-odd-numbers-in-an-interval-range-easy.md",sourceDirName:"1500-1599",slug:"/1500-1599/count-odd-numbers-in-an-interval-range-easy",permalink:"/solutions/1500-1599/count-odd-numbers-in-an-interval-range-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1500-1599/1523-count-odd-numbers-in-an-interval-range-easy.md",tags:[],version:"current",sidebarPosition:1523,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/count-odd-numbers-in-an-interval-range/"},sidebar:"tutorialSidebar",previous:{title:"1519 - Number of Nodes in the Sub-Tree With the Same Label (Medium)",permalink:"/solutions/1500-1599/number-of-nodes-in-the-sub-tree-with-the-same-label-medium"},next:{title:"1531 - String Compression II (Hard)",permalink:"/solutions/1500-1599/string-compression-ii-hard"}},u={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2},{value:"Approach 2: Math",id:"approach-2-math",level:2}],s=(d="SolutionAuthor",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var d;const m={toc:p},c="wrapper";function h(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1523---count-odd-numbers-in-an-interval-range-easy"},"1523 - Count Odd Numbers in an Interval Range (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/count-odd-numbers-in-an-interval-range/"},"https://leetcode.com/problems/count-odd-numbers-in-an-interval-range/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given two non-negative integers ",(0,o.kt)("inlineCode",{parentName:"p"},"low")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"high"),". Return the ",(0,o.kt)("em",{parentName:"p"},"count of odd numbers between")," ",(0,o.kt)("inlineCode",{parentName:"p"},"low")," ",(0,o.kt)("em",{parentName:"p"},"and")," ",(0,o.kt)("inlineCode",{parentName:"p"},"high")," ",(0,o.kt)("em",{parentName:"p"},"(inclusive)"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: low = 3, high = 7\nOutput: 3\nExplanation: The odd numbers between 3 and 7 are [3,5,7].\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: low = 8, high = 10\nOutput: 1\nExplanation: The odd numbers between 8 and 10 are [9].\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= low <= high <= 10^9"))),(0,o.kt)("h2",{id:"approach-1-brute-force"},"Approach 1: Brute Force"),(0,o.kt)("p",null,"Iterate from $$low$$ to $$high$$ and check if $$i$$ is odd."),(0,o.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func countOdds(low int, high int) int {\n    ans := 0\n    for i := low; i <= high; i += 1 {\n        ans += i & 1\n    }\n    return ans\n}\n")),(0,o.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn count_odds(low: i32, high: i32) -> i32 {\n        let mut ans = 0;\n        for i in low .. high + 1 {\n            ans += i & 1;\n        }\n        return ans;\n    }\n}\n")),(0,o.kt)("h2",{id:"approach-2-math"},"Approach 2: Math"),(0,o.kt)("p",null,"Numbers of odd numbers in $$","[low, high]","$$ is same as $$","[1, high]"," - ","[1 , low - 1]","$$. Therefore, we just find out those two numbers to get the answer. There are $$(high + 1) / 2$$ odd numbers in $$","[1, high]","$$ and $$low/2$$ odd numbers in $$","[1, low - 1]","$$."),(0,o.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func countOdds(low int, high int) int {\n    return (high + 1) / 2 - (low / 2);\n}\n")),(0,o.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl Solution {\n    pub fn count_odds(low: i32, high: i32) -> i32 {\n        return (high + 1) / 2 - (low / 2);\n    }\n}\n")))}h.isMDXComponent=!0}}]);