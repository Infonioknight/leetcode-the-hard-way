"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[74154],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=a,h=m["".concat(l,".").concat(c)]||m[c]||g[c]||o;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},97681:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>k,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @wingkwong, @ganajayant, @radojicic23 | https://leetcode.com/problems/group-anagrams/",tags:["Array","Hash Table","String","Sorting"]},s="0049 - Group Anagrams (Medium)",i={unversionedId:"0000-0099/group-anagrams-medium",id:"0000-0099/group-anagrams-medium",title:"0049 - Group Anagrams (Medium)",description:"Author: @wingkwong, @ganajayant, @radojicic23 | https://leetcode.com/problems/group-anagrams/",source:"@site/solutions/0000-0099/0049-group-anagrams-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/group-anagrams-medium",permalink:"/solutions/0000-0099/group-anagrams-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0049-group-anagrams-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"String",permalink:"/solutions/tags/string"},{label:"Sorting",permalink:"/solutions/tags/sorting"}],version:"current",sidebarPosition:49,frontMatter:{description:"Author: @wingkwong, @ganajayant, @radojicic23 | https://leetcode.com/problems/group-anagrams/",tags:["Array","Hash Table","String","Sorting"]},sidebar:"tutorialSidebar",previous:{title:"0048 - Rotate Image (Medium)",permalink:"/solutions/0000-0099/rotate-image-medium"},next:{title:"0050 - Pow(x, n) (Medium)",permalink:"/solutions/0000-0099/pow-x-n-medium"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sorting + Hash Map",id:"approach-1-sorting--hash-map",level:2},{value:"Approach 2: Hash Map with Prime Numbers",id:"approach-2-hash-map-with-prime-numbers",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},m=u("Tabs"),g=u("TabItem"),c=u("SolutionAuthor"),h={toc:p},d="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0049---group-anagrams-medium"},"0049 - Group Anagrams (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/group-anagrams/"},"https://leetcode.com/problems/group-anagrams/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an array of strings ",(0,a.kt)("inlineCode",{parentName:"p"},"strs"),", group ",(0,a.kt)("strong",{parentName:"p"},"the anagrams")," together. You can return the answer in ",(0,a.kt)("strong",{parentName:"p"},"any order"),"."),(0,a.kt)("p",null,"An ",(0,a.kt)("strong",{parentName:"p"},"Anagram")," is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: strs = ["eat","tea","tan","ate","nat","bat"]\nOutput: [["bat"],["nat","tan"],["ate","eat","tea"]]\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: strs = [""]\nOutput: [[""]]\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: strs = ["a"]\nOutput: [["a"]]\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= strs.length <= 10^4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= strs[i].length <= 100")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"strs[i]")," consists of lowercase English letters.")),(0,a.kt)("h2",{id:"approach-1-sorting--hash-map"},"Approach 1: Sorting + Hash Map"),(0,a.kt)("p",null,"To check if $$s$$ and $$t$$ are anagrams, one of the ways is to sort them both and check if they are equal. For example, if we sort $tan$ and $nat$, we will get $ant$. Therefore, we can group them together."),(0,a.kt)("p",null,"We can use a hash map to store the sorted string as a key, and push the original value to an array. At the end, we iterate the hash map and push the corresponding array to our final answer."),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(g,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    // all anagrams in the same group would have the same frequency for each character\n    // e.g. ["nat","tan"] - both have 1 \'a\', 1\'t\', and 1\'n\'\n    // in other words, we can group the anagrams by their frequencies\n    // another observation is that after sorting all anagrams in the group,\n    // they would have the same result (because they have same frequency of each word)\n    // ["nat","tan"] -> "ant"\n    // so we can also group the anagrams by its sorted key\n    // below it the group by sorted key version\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        // we need to a hashmap to store an array of the anagrams\n        // with its sorted string as the key\n        // e.g. "ant":  ["nat","tan"]\n        unordered_map<string, vector<string>> m;\n        // iterate each string\n        for(auto& x : strs) {\n            // since we need to know the original value,\n            // we copy `x` to `t` for sorting\n            string t = x;\n            // sort it to make the key\n            sort(t.begin(), t.end());\n            // push the orginal the value under its sorted key\n            m[t].push_back(x);\n        }\n        // build the final anwser\n        vector<vector<string>> ans;\n        // x.second is the array of the anagrams under the key `x.first`\n        for(auto& x : m) ans.push_back(x.second);\n        return ans;\n    }\n};\n'))),(0,a.kt)(g,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(c,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    private String sortString(String str) {\n        char[] chars = str.toCharArray();\n        java.util.Arrays.sort(chars);\n        return new String(chars);\n    }\n\n    public List<List<String>> groupAnagrams(String[] strs) {\n        HashMap<String, LinkedList<String>> hm = new HashMap<>();\n        for (int i = 0; i < strs.length; i++) {\n            String sortedstring = sortString(strs[i]);\n            if (hm.containsKey(sortedstring)) {\n                hm.get(sortedstring).add(strs[i]);\n            } else {\n                hm.put(sortedstring, new LinkedList<String>());\n                hm.get(sortedstring).add(strs[i]);\n            }\n        }\n        List<List<String>> ll = new LinkedList<List<String>>();\n        for (Map.Entry<String, LinkedList<String>> entry : hm.entrySet()) {\n            ll.add((List<String>) entry.getValue());\n        }\n        return ll;\n    }\n}\n"))),(0,a.kt)(g,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(c,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        hashmap = defaultdict(list)\n        res = []\n\n        for word in strs:\n            sorted_word = ''.join(sorted(word))\n            hashmap[sorted_word].append(word)\n\n        for i in hashmap:\n            res.append(hashmap[i])\n        return res\n"))),(0,a.kt)(g,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)(c,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function(strs) {\n    let ans = [];\n    let hashMap = {};\n    for (let i = 0; i < strs.length; i++) {\n        let word = strs[i];\n        let sortedWord = word.split("").sort().join("");\n        if (hashMap[sortedWord]) {\n            hashMap[sortedWord].push(word);\n        } else {\n            hashMap[sortedWord] = [word];\n        }\n    }\n    for (let i in hashMap) {\n        ans.push(hashMap[i]);\n    }\n    return ans;\n};\n')))),(0,a.kt)("h2",{id:"approach-2-hash-map-with-prime-numbers"},"Approach 2: Hash Map with Prime Numbers"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(g,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        int M = 1e9 + 9;\n        vector<int> primes(26);\n        for (int i = 0; i < 26; i++)  primes[i] = i * i + i + 41;\n        unordered_map<long long, vector<string>> m;\n        for (int i = 0; i < strs.size(); i++) {\n            long long k = 1;\n            for (int j = 0; j < strs[i].size(); j++) {\n                k *= 1LL * primes[strs[i][j] - 'a'];\n                k %= M;\n            }\n            m[k].push_back(strs[i]);\n        }\n        vector<vector<string>> ans;\n        for (auto x : m) ans.push_back(x.second);\n        return ans;\n    }\n};\n")))))}k.isMDXComponent=!0}}]);