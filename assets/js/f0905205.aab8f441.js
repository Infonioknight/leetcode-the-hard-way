"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[76321],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>k});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var m=a.createContext({}),p=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(m.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(t),c=i,k=d["".concat(m,".").concat(c)]||d[c]||u[c]||o;return t?a.createElement(k,r(r({ref:n},s),{},{components:t})):a.createElement(k,r({ref:n},s))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=c;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},88668:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>r,default:()=>k,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const o={description:"Author: @wingkwong| https://leetcode.com/problems/design-an-atm-machine/"},r="2241 - Design an ATM Machine (Medium)",l={unversionedId:"2200-2299/design-an-atm-machine-medium",id:"2200-2299/design-an-atm-machine-medium",title:"2241 - Design an ATM Machine (Medium)",description:"Author: @wingkwong| https://leetcode.com/problems/design-an-atm-machine/",source:"@site/solutions/2200-2299/2241-design-an-atm-machine-medium.md",sourceDirName:"2200-2299",slug:"/2200-2299/design-an-atm-machine-medium",permalink:"/solutions/2200-2299/design-an-atm-machine-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2241-design-an-atm-machine-medium.md",tags:[],version:"current",sidebarPosition:2241,frontMatter:{description:"Author: @wingkwong| https://leetcode.com/problems/design-an-atm-machine/"},sidebar:"tutorialSidebar",previous:{title:"2240 - Number of Ways to Buy Pens and Pencils (Medium)",permalink:"/solutions/2200-2299/number-of-ways-to-buy-pens-and-pencils-medium"},next:{title:"2242 - Maximum Score of a Node Sequence (Hard)",permalink:"/solutions/2200-2299/maximum-score-of-a-node-sequence-hard"}},m={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1:  Implementation",id:"approach-1--implementation",level:2}],s=(d="SolutionAuthor",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var d;const u={toc:p},c="wrapper";function k(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2241---design-an-atm-machine-medium"},"2241 - Design an ATM Machine (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/design-an-atm-machine/"},"https://leetcode.com/problems/design-an-atm-machine/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"There is an ATM machine that stores banknotes of ",(0,i.kt)("inlineCode",{parentName:"p"},"5")," denominations: ",(0,i.kt)("inlineCode",{parentName:"p"},"20"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"50"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"100"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"200"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"500")," dollars. Initially the ATM is empty. The user can use the machine to deposit or withdraw any amount of money."),(0,i.kt)("p",null,"When withdrawing, the machine prioritizes using banknotes of ",(0,i.kt)("strong",{parentName:"p"},"larger")," values."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example, if you want to withdraw ",(0,i.kt)("inlineCode",{parentName:"li"},"$300")," and there are ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," ",(0,i.kt)("inlineCode",{parentName:"li"},"$50")," banknotes, ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," ",(0,i.kt)("inlineCode",{parentName:"li"},"$100")," banknote, and ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," ",(0,i.kt)("inlineCode",{parentName:"li"},"$200")," banknote, then the machine will use the ",(0,i.kt)("inlineCode",{parentName:"li"},"$100")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"$200")," banknotes."),(0,i.kt)("li",{parentName:"ul"},"However, if you try to withdraw ",(0,i.kt)("inlineCode",{parentName:"li"},"$600")," and there are ",(0,i.kt)("inlineCode",{parentName:"li"},"3")," ",(0,i.kt)("inlineCode",{parentName:"li"},"$200")," banknotes and ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," ",(0,i.kt)("inlineCode",{parentName:"li"},"$500")," banknote, then the withdraw request will be rejected because the machine will first try to use the ",(0,i.kt)("inlineCode",{parentName:"li"},"$500")," banknote and then be unable to use banknotes to complete the remaining ",(0,i.kt)("inlineCode",{parentName:"li"},"$100"),". Note that the machine is ",(0,i.kt)("strong",{parentName:"li"},"not")," allowed to use the ",(0,i.kt)("inlineCode",{parentName:"li"},"$200")," banknotes instead of the ",(0,i.kt)("inlineCode",{parentName:"li"},"$500")," banknote.")),(0,i.kt)("p",null,"Implement the ATM class:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ATM()")," Initializes the ATM object."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"void deposit(int[] banknotesCount)")," Deposits new banknotes in the order ",(0,i.kt)("inlineCode",{parentName:"li"},"$20"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"$50"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"$100"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"$200"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"$500"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int[] withdraw(int amount)")," Returns an array of length ",(0,i.kt)("inlineCode",{parentName:"li"},"5")," of the number of banknotes that will be handed to the user in the order ",(0,i.kt)("inlineCode",{parentName:"li"},"$20"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"$50"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"$100"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"$200"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"$500"),", and update the number of banknotes in the ATM after withdrawing. Returns ",(0,i.kt)("inlineCode",{parentName:"li"},"[-1]")," if it is not possible (do ",(0,i.kt)("strong",{parentName:"li"},"not")," withdraw any banknotes in this case).")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input\n["ATM", "deposit", "withdraw", "deposit", "withdraw", "withdraw"]\n[[], [[0,0,1,2,1]], [600], [[0,1,0,1,1]], [600], [550]]\nOutput\n[null, null, [0,0,1,0,1], null, [-1], [0,1,0,0,1]]\n\nExplanation\nATM atm = new ATM();\natm.deposit([0,0,1,2,1]); // Deposits 1 $100 banknote, 2 $200 banknotes,\n                          // and 1 $500 banknote.\natm.withdraw(600);        // Returns [0,0,1,0,1]. The machine uses 1 $100 banknote\n                          // and 1 $500 banknote. The banknotes left over in the\n                          // machine are [0,0,0,2,0].\natm.deposit([0,1,0,1,1]); // Deposits 1 $50, $200, and $500 banknote.\n                          // The banknotes in the machine are now [0,1,0,3,1].\natm.withdraw(600);        // Returns [-1]. The machine will try to use a $500 banknote\n                          // and then be unable to complete the remaining $100,\n                          // so the withdraw request will be rejected.\n                          // Since the request is rejected, the number of banknotes\n                          // in the machine is not modified.\natm.withdraw(550);        // Returns [0,1,0,0,1]. The machine uses 1 $50 banknote\n                          // and 1 $500 banknote.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"banknotesCount.length == 5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= banknotesCount[i] <= 10^9")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= amount <= 10^9")),(0,i.kt)("li",{parentName:"ul"},"At most ",(0,i.kt)("inlineCode",{parentName:"li"},"5000")," calls ",(0,i.kt)("strong",{parentName:"li"},"in total")," will be made to ",(0,i.kt)("inlineCode",{parentName:"li"},"withdraw")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"deposit"),"."),(0,i.kt)("li",{parentName:"ul"},"At least ",(0,i.kt)("strong",{parentName:"li"},"one")," call will be made to each function ",(0,i.kt)("inlineCode",{parentName:"li"},"withdraw")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"deposit"),".")),(0,i.kt)("h2",{id:"approach-1--implementation"},"Approach 1:  Implementation"),(0,i.kt)("p",null,"Use $$bank$$ to track the count of each note. When we withdraw, we only use the max possible currency count. If the amount still possible, then return -1. Otherwise, update $$bank$$ and return how many we've taken."),(0,i.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class ATM {\npublic:\n    ATM() {\n        bank = vector<long long>(5);\n        notes = { 20, 50, 100, 200, 500 };\n    }\n    \n    void deposit(vector<int> banknotesCount) {\n        for (int i = 0; i < 5; i++) {\n            bank[i] += banknotesCount[i];\n        }\n    }\n    \n    vector<int> withdraw(int amount) {\n        vector<int> take(5);\n        for (int i = 4; i >= 0; i--) {\n            take[i] = min(amount / notes[i], bank[i]);\n            amount -= take[i] * notes[i];\n        }\n        if (amount) return vector<int>{-1};\n        for (int i = 0; i < 5; i++) bank[i] -= take[i];\n        return take;\n    }\nprivate:\n    vector<long long> bank, notes;\n};\n\n/**\n * Your ATM object will be instantiated and called as such:\n * ATM* obj = new ATM();\n * obj->deposit(banknotesCount);\n * vector<int> param_2 = obj->withdraw(amount);\n */\n")))}k.isMDXComponent=!0}}]);