"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[87671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=m(n),d=a,h=c["".concat(l,".").concat(d)]||c[d]||s[d]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:a,o[1]=p;for(var m=2;m<i;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},17073:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>p,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/maximum-population-year/"},o="1854 - Maximum Population Year (Easy)",p={unversionedId:"1800-1899/maximum-population-year-easy",id:"1800-1899/maximum-population-year-easy",title:"1854 - Maximum Population Year (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/maximum-population-year/",source:"@site/solutions/1800-1899/1854-maximum-population-year-easy.md",sourceDirName:"1800-1899",slug:"/1800-1899/maximum-population-year-easy",permalink:"/solutions/1800-1899/maximum-population-year-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1800-1899/1854-maximum-population-year-easy.md",tags:[],version:"current",sidebarPosition:1854,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximum-population-year/"},sidebar:"tutorialSidebar",previous:{title:"1851 - Minimum Interval to Include Each Query",permalink:"/solutions/1800-1899/minimum-interval-to-include-each-query-hard"},next:{title:"1855 - Maximum Distance Between a Pair of Values (Medium)",permalink:"/solutions/1800-1899/maximum-distance-between-a-pair-of-values-medium"}},l={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Line Sweep",id:"approach-1-line-sweep",level:2}],u=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var c;const s={toc:m},d="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1854---maximum-population-year-easy"},"1854 - Maximum Population Year (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-population-year/"},"https://leetcode.com/problems/maximum-population-year/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a 2D integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"logs")," where each ",(0,a.kt)("inlineCode",{parentName:"p"},"logs[i] = [birthi, deathi]")," indicates the birth and death years of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ith")," person."),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"population")," of some year ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," is the number of people alive during that year. The ",(0,a.kt)("inlineCode",{parentName:"p"},"ith")," person is counted in year ",(0,a.kt)("inlineCode",{parentName:"p"},"x"),"'s population if ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," is in the ",(0,a.kt)("strong",{parentName:"p"},"inclusive")," range ",(0,a.kt)("inlineCode",{parentName:"p"},"[birthi, deathi - 1]"),". Note that the person is ",(0,a.kt)("strong",{parentName:"p"},"not")," counted in the year that they die."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"earliest")," year with the ",(0,a.kt)("strong",{parentName:"em"},"maximum population")),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: logs = [[1993,1999],[2000,2010]]\nOutput: 1993\nExplanation: The maximum population is 1, and 1993 is the earliest year with this population.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: logs = [[1950,1961],[1960,1971],[1970,1981]]\nOutput: 1960\nExplanation: \nThe maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= logs.length <= 100")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1950 <= birthi < deathi <= 2050"))),(0,a.kt)("h2",{id:"approach-1-line-sweep"},"Approach 1: Line Sweep"),(0,a.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maximumPopulation(vector<vector<int>>& logs) {\n        vector<int> cnt(2100);\n        for (auto x : logs) {\n            // start: + 1\n            cnt[x[0]]++;\n            // end: - 1\n            cnt[x[1]]--;\n        }\n        // calculate prefix sum\n        partial_sum(cnt.begin(), cnt.end(), cnt.begin());\n        // check the maximum\n        int mx = *max_element(cnt.begin(), cnt.end());\n        // find the first year with the max population\n        for (int i = 1950; i <= 2050; i++) {\n            if (mx == cnt[i]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n")),(0,a.kt)("p",null,"We can further revise it due to the constraint $$1950 <= birth_i < death_i <= 2050$$."),(0,a.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maximumPopulation(vector<vector<int>>& logs) {\n        vector<int> cnt(101);\n        for (auto x : logs) {\n            // start: + 1\n            cnt[x[0] - 1950]++;\n            // end: - 1\n            cnt[x[1] - 1950]--;\n        }\n        // calculate prefix sum\n        partial_sum(cnt.begin(), cnt.end(), cnt.begin());\n        // check the maximum\n        int mx = *max_element(cnt.begin(), cnt.end());\n        // find the first year with the max population\n        for (int i = 0; i <= 100; i++) {\n            if (mx == cnt[i]) {\n                return 1950 + i;\n            }\n        }\n        return -1;\n    }\n};\n")))}h.isMDXComponent=!0}}]);