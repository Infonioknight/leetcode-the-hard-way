"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[39051],{3905:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>b});var a=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function u(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var m=a.createContext({}),o=function(n){var e=a.useContext(m),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},l=function(n){var e=o(n.components);return a.createElement(m.Provider,{value:e},n.children)},p="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},h=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,i=n.originalType,m=n.parentName,l=u(n,["components","mdxType","originalType","parentName"]),p=o(t),h=r,b=p["".concat(m,".").concat(h)]||p[h]||c[h]||i;return t?a.createElement(b,s(s({ref:e},l),{},{components:t})):a.createElement(b,s({ref:e},l))}));function b(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=t.length,s=new Array(i);s[0]=h;var u={};for(var m in e)hasOwnProperty.call(e,m)&&(u[m]=e[m]);u.originalType=n,u[p]="string"==typeof n?n:r,s[1]=u;for(var o=2;o<i;o++)s[o]=t[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},38625:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>o});var a=t(87462),r=(t(67294),t(3905));const i={description:"Author: @wingkwong, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/missing-number/",tags:["Array","Hash Table","Math","Bit Manupulation","Sorting"]},s="0268 - Missing Number (Easy)",u={unversionedId:"0200-0299/missing-number-easy",id:"0200-0299/missing-number-easy",title:"0268 - Missing Number (Easy)",description:"Author: @wingkwong, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/missing-number/",source:"@site/solutions/0200-0299/0268-missing-number-easy.md",sourceDirName:"0200-0299",slug:"/0200-0299/missing-number-easy",permalink:"/solutions/0200-0299/missing-number-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0268-missing-number-easy.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"Math",permalink:"/solutions/tags/math"},{label:"Bit Manupulation",permalink:"/solutions/tags/bit-manupulation"},{label:"Sorting",permalink:"/solutions/tags/sorting"}],version:"current",sidebarPosition:268,frontMatter:{description:"Author: @wingkwong, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/missing-number/",tags:["Array","Hash Table","Math","Bit Manupulation","Sorting"]},sidebar:"tutorialSidebar",previous:{title:"0261 - Graph Valid Tree (Medium)",permalink:"/solutions/0200-0299/graph-valid-tree-medium"},next:{title:"0278 - First Bad Version (Easy)",permalink:"/solutions/0200-0299/first-bad-version-easy"}},m={},o=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sorting",id:"approach-1-sorting",level:2},{value:"Approach 2: Bit Manupulation",id:"approach-2-bit-manupulation",level:2},{value:"Approach 3: Math",id:"approach-3-math",level:2}],l=n=>function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)},p=l("Tabs"),c=l("TabItem"),h=l("SolutionAuthor"),b={toc:o},g="wrapper";function d(n){let{components:e,...t}=n;return(0,r.kt)(g,(0,a.Z)({},b,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0268---missing-number-easy"},"0268 - Missing Number (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/missing-number/"},"https://leetcode.com/problems/missing-number/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given an array ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," containing ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," distinct numbers in the range ",(0,r.kt)("inlineCode",{parentName:"p"},"[0, n]"),", return ",(0,r.kt)("em",{parentName:"p"},"the only number in the range that is missing from the array.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [3,0,1]\nOutput: 2\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [0,1]\nOutput: 2\nExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\nExplanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"n == nums.length")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= n <= 10^4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= nums[i] <= n")),(0,r.kt)("li",{parentName:"ul"},"All the numbers of ",(0,r.kt)("inlineCode",{parentName:"li"},"nums")," are ",(0,r.kt)("strong",{parentName:"li"},"unique"),".")),(0,r.kt)("h2",{id:"approach-1-sorting"},"Approach 1: Sorting"),(0,r.kt)(p,{mdxType:"Tabs"},(0,r.kt)(c,{value:"c++",label:"C++",mdxType:"TabItem"},(0,r.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        // check the first element\n        if (nums.front() != 0) return 0;\n        // check [1, n)\n        for (int i = 1; i < n; i++) {\n            // after sorting, the difference is expected to be 1\n            // e.g. 1 - 2 - 3 - 4\n            // if not, then it means the current index is the missing number\n            // e.g. 1 - 2 - 4 (the diff is 2 here)\n            if (nums[i] - nums[i - 1] != 1) {\n                return i;\n            }\n        }\n        // check the last element\n        return n;\n    }\n};\n"))),(0,r.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(h,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int missingNumber(int[] nums) {\n        int n = nums.length;\n        // Sort the numbers\n        // After sorting, if any number is not the same as the index then that's the missing number\n        Arrays.sort(nums);\n        // Search for first missing number\n        if (nums[0] != 0) return 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] != i) {\n                return i;\n            }\n        }\n        return n;\n    }\n}\n"))),(0,r.kt)(c,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar missingNumber = function(nums) {\n    const n = nums.length;\n    // sort numbers (increasing order)\n    nums.sort((a, b) => a - b);\n    // check the first value \n    if (nums[0] != 0) return 0;\n    // iterate through list of numbers\n    // if they are not equal (number and index of that number)\n    // that index is the missing number\n    for (let i = 1; i < n; i++) {\n        if (nums[i] != i) {\n            return i;\n        }\n    }\n    return n;\n};\n"))),(0,r.kt)(c,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        # sort list\n        nums.sort()\n        # check the first value\n        if nums[0] != 0: return 0\n        # loop through list of numbers\n        # if they are not equal (number and index of that number)\n        # that index is the missing number\n        for i in range(len(nums)):\n            if nums[i] != i:\n                return i\n        return n \n")))),(0,r.kt)("h2",{id:"approach-2-bit-manupulation"},"Approach 2: Bit Manupulation"),(0,r.kt)(p,{mdxType:"Tabs"},(0,r.kt)(c,{value:"c++",label:"C++",mdxType:"TabItem"},(0,r.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        // we can utilise the properties of XOR:\n        // a ^ a = 0\n        // a ^ 0 = a\n        // a ^ b ^ c = a ^ c ^ b\n        int n = (int) nums.size();\n        int ans = n;\n        // we can see that the elements in nums would cancel out with their indices\n        // except the one which is missing\n        for(int i = 0; i < n; i++) {\n            ans ^= (i ^ nums[i]);\n        }\n        return ans;\n    }\n};\n"))),(0,r.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(h,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int missingNumber(int[] nums) {\n        int n = nums.length;\n        int ans = n;\n        // we can utilise the properties of XOR:\n        // a ^ a = 0\n        // a ^ 0 = a\n        // a ^ b ^ c = a ^ c ^ b\n        for (int i = 0; i < n; i++) {\n            ans ^= (nums[i] ^ i);\n        }\n        return ans;\n    }\n}\n"))),(0,r.kt)(c,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar missingNumber = function(nums) {\n    // we can utilise the properties of XOR:\n    // a ^ a = 0\n    // a ^ 0 = a\n    // a ^ b ^ c = a ^ c ^ b\n    const n = nums.length;\n    let ans = n;\n    for (let i = 0; i < n; i++) {\n        ans ^= (i ^ nums[i]);\n    }\n    return ans;\n};\n"))),(0,r.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        # we can utilise the properties of XOR:\n        # a ^ a = 0\n        # a ^ 0 = a\n        # a ^ b ^ c = a ^ c ^ b\n        n = len(nums)\n        res = n\n        for i in range(n):\n            res ^= (i ^ nums[i])\n        return res\n")))),(0,r.kt)("h2",{id:"approach-3-math"},"Approach 3: Math"),(0,r.kt)("p",null,"To calculate the sum of first n element, we can use Gauss' Formula - $n * (n + 1) / 2$. The missing number would be the expected sum minus the sum of $nums$."),(0,r.kt)(p,{mdxType:"Tabs"},(0,r.kt)(c,{value:"c++",label:"C++",mdxType:"TabItem"},(0,r.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int n = (int) nums.size();\n        int sum = 0;\n        for(int x : nums) sum += x;\n        return (n * (n + 1) / 2) - sum; \n    }\n};\n"))),(0,r.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(h,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int missingNumber(int[] nums) {\n        int n = nums.length;\n        int sum = 0;\n        for (int x : nums) sum += x;\n        return (n * (n + 1) / 2) - sum;\n    }\n}\n"))),(0,r.kt)(c,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar missingNumber = function(nums) {\n    const nums_len = nums.length;\n    let nums_sum = 0;\n    for (n of nums) nums_sum += n;\n    return (nums_len * (nums_len + 1) / 2) - nums_sum;\n};\n"))),(0,r.kt)(c,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        nums_len = len(nums)\n        nums_sum = sum(nums)\n        return (nums_len * (nums_len + 1) // 2) - nums_sum\n")))))}d.isMDXComponent=!0}}]);