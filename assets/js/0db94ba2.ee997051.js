"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[13201],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=p(n),c=a,d=g["".concat(s,".").concat(c)]||g[c]||m[c]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},28921:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/",tags:["Dynamic Programming","Tree","Depth-First Search","Binary Tree"]},i="1372 - Longest ZigZag Path in a Binary Tree (Medium)",l={unversionedId:"1300-1399/longest-zigzag-path-in-a-binary-tree-medium",id:"1300-1399/longest-zigzag-path-in-a-binary-tree-medium",title:"1372 - Longest ZigZag Path in a Binary Tree (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/",source:"@site/solutions/1300-1399/1372-longest-zigzag-path-in-a-binary-tree-medium.md",sourceDirName:"1300-1399",slug:"/1300-1399/longest-zigzag-path-in-a-binary-tree-medium",permalink:"/solutions/1300-1399/longest-zigzag-path-in-a-binary-tree-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1300-1399/1372-longest-zigzag-path-in-a-binary-tree-medium.md",tags:[{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Tree",permalink:"/solutions/tags/tree"},{label:"Depth-First Search",permalink:"/solutions/tags/depth-first-search"},{label:"Binary Tree",permalink:"/solutions/tags/binary-tree"}],version:"current",sidebarPosition:1372,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/",tags:["Dynamic Programming","Tree","Depth-First Search","Binary Tree"]},sidebar:"tutorialSidebar",previous:{title:"1371 - Find the Longest Substring Containing Vowels in Even Counts (Medium)",permalink:"/solutions/1300-1399/find-the-longest-substring-containing-vowels-in-even-counts-medium"},next:{title:"1383 - Maximum Performance of a Team (Hard)",permalink:"/solutions/1300-1399/maximum-performance-of-a-team-hard"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},g=u("Tabs"),m=u("TabItem"),c=u("SolutionAuthor"),d={toc:p},h="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1372---longest-zigzag-path-in-a-binary-tree-medium"},"1372 - Longest ZigZag Path in a Binary Tree (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/"},"https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given the ",(0,a.kt)("inlineCode",{parentName:"p"},"root")," of a binary tree."),(0,a.kt)("p",null,"A ZigZag path for a binary tree is defined as follow:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Choose ",(0,a.kt)("strong",{parentName:"li"},"any"),"node in the binary tree and a direction (right or left)."),(0,a.kt)("li",{parentName:"ul"},"If the current direction is right, move to the right child of the current node; otherwise, move to the left child."),(0,a.kt)("li",{parentName:"ul"},"Change the direction from right to left or from left to right."),(0,a.kt)("li",{parentName:"ul"},"Repeat the second and third steps until you can't move in the tree.")),(0,a.kt)("p",null,"Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0)."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the longest ",(0,a.kt)("strong",{parentName:"em"},"ZigZag")," path contained in that tree"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]\nOutput: 3\nExplanation: Longest ZigZag path in blue nodes (right -> left -> right).\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1,1,1,null,1,null,null,1,1,null,1]\nOutput: 4\nExplanation: Longest ZigZag path in blue nodes (left -> right -> left -> right).\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1]\nOutput: 0\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 5 * 10^4]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= Node.val <= 100"))),(0,a.kt)("h2",{id:"approach-1-dfs"},"Approach 1: DFS"),(0,a.kt)(g,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int dfs(TreeNode* root, int isLeft, int cnt) {\n        // root is nullptr, we can return `cnt`\n        if (!root) return cnt;\n        // if `isLeft` is true, we have two choices\n        // 1. go to right making a zipzag path - increase the cnt by 1 \n        // 2. still go to left - starting a new zigzag path - hence cnt is set to 0\n        if (isLeft) return max(dfs(root->right, 0, cnt + 1), dfs(root->left, 1, 0));\n        // similarly, we apply the same logic for the opposite direction\n        return max(dfs(root->left, 1, cnt + 1), dfs(root->right, 0, 0));\n    }\n    int longestZigZag(TreeNode* root) {\n        // go through left-subtree and right-subtree\n        // get the max result\n        return max(dfs(root->left, 1, 0), dfs(root->right, 0, 0));\n    }\n};\n"))),(0,a.kt)(m,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def longestZigZag(self, root: Optional[TreeNode]) -> int:\n        def dfs(node, isLeft, cnt):\n            # root is None, we can return `cnt`\n            if node is None: return cnt\n            # if `isLeft` is true, we have two choices\n            # 1. go to right making a zipzag path - increase the cnt by 1\n            # 2. still go to left - starting a new zigzag path - hence cnt is set to 0\n            if isLeft:  return max(dfs(node.right, 0, cnt + 1), dfs(node.left, 1, 0))\n            # similarly, we apply the same logic for the opposite direction\n            return max(dfs(node.left, 1, cnt + 1), dfs(node.right, 0, 0))\n        # go through left-subtree and right-subtree and get the max result\n        return max(dfs(root.left, 1, 0), dfs(root.right, 0, 0))\n\n")))))}f.isMDXComponent=!0}}]);