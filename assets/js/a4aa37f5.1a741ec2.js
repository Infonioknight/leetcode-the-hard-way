"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[56038],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=u(n),d=i,b=m["".concat(s,".").concat(d)]||m[d]||l[d]||r;return n?a.createElement(b,o(o({ref:t},p),{},{components:n})):a.createElement(b,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},37253:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return l}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),o=["components"],c={description:"Author: @wingkwong | https://leetcode.com/problems/combination-sum-ii/",tags:["Array","Backtracking"]},s="0040 - Combination Sum II (Medium)",u={unversionedId:"0000-0099/combination-sum-ii-medium",id:"0000-0099/combination-sum-ii-medium",title:"0040 - Combination Sum II (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/combination-sum-ii/",source:"@site/solutions/0000-0099/0040-combination-sum-ii-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/combination-sum-ii-medium",permalink:"/solutions/0000-0099/combination-sum-ii-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0040-combination-sum-ii-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Backtracking",permalink:"/solutions/tags/backtracking"}],version:"current",sidebarPosition:40,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/combination-sum-ii/",tags:["Array","Backtracking"]},sidebar:"tutorialSidebar",previous:{title:"0039 - Combination Sum (Medium)",permalink:"/solutions/0000-0099/combination-sum-medium"},next:{title:"0042 - Trapping Rain Water (Hard)",permalink:"/solutions/0000-0099/trapping-rain-water-hard"}},p={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Backtracking",id:"approach-1-backtracking",level:2}],m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)}},d=m("Tabs"),b=m("TabItem"),k=m("SolutionAuthor"),g={toc:l};function f(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0040---combination-sum-ii-medium"},"0040 - Combination Sum II (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/combination-sum-ii/"},"https://leetcode.com/problems/combination-sum-ii/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given a collection of candidate numbers (",(0,r.kt)("inlineCode",{parentName:"p"},"candidates"),") and a target number (",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"), find all unique combinations in ",(0,r.kt)("inlineCode",{parentName:"p"},"candidates")," where the candidate numbers sum to ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"."),(0,r.kt)("p",null,"Each number in ",(0,r.kt)("inlineCode",{parentName:"p"},"candidates")," may only be used ",(0,r.kt)("strong",{parentName:"p"},"once")," in the combination."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," The solution set must not contain duplicate combinations."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: candidates = [2,5,2,1,2], target = 5\nOutput: \n[\n[1,2,2],\n[5]\n]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= candidates.length <= 100")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= candidates[i] <= 50")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= target <= 30"))),(0,r.kt)("h2",{id:"approach-1-backtracking"},"Approach 1: Backtracking"),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("a",{parentName:"p",href:"combination-sum-medium"},"0039 - Combination Sum (Medium)"),", the only difference is each number can be used once in the combination. To avoid overcounting, we can simply add ",(0,r.kt)("inlineCode",{parentName:"p"},"i != start && candidates[i] == candidates[i - 1].")),(0,r.kt)(d,{mdxType:"Tabs"},(0,r.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(k,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void backtrack(vector<int>& candidates, int target, vector<vector<int>>& ans, vector<int>& tmp, int start) {\n        if(target == 0) {\n            ans.push_back(tmp);\n            return;\n        }\n        for(int i = start; i < candidates.size() && target >= candidates[i]; i++){\n            if(i != start && candidates[i] == candidates[i - 1]) continue;\n            tmp.push_back(candidates[i]);\n            backtrack(candidates, target - candidates[i], ans, tmp, i + 1);\n            tmp.pop_back();\n        }\n    }\n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\n        sort(candidates.begin(), candidates.end());\n        vector<vector<int>> ans;\n        vector<int> tmp;\n        backtrack(candidates, target, ans, tmp, 0);\n        return ans;\n    }\n};\n"))),(0,r.kt)(b,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(k,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    # Iterative Backtracking Approach\n    # Time O(n*2^n)\n    # We need to make a decision tree where we take/don't take\n    # the next number, and during each decision, we have to create\n    # a new list of combinations to pass to the stack.\n    # Space O(2^n)\n    # Our stack may reach the size of our decision tree.\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        # Sort first, greatly simplify our backtracking and help\n        # us to avoid our duplicates by only moving forward.\n        candidates.sort()\n        # initialize our combinations to return.\n        combinations = []\n        # initialize stack: 3 parameters, combos, our current target\n        # value, and our position in candidates array.\n        stack = [([], 0, 0)]\n        while stack:\n            # pop off our combos, current target score, and position.\n            combo, targ, pos = stack.pop()\n            # if our we reached target value add to combinations.\n            if targ == target:\n                combinations.append(combo)\n                continue\n            # set a prev value so when looping through candidates\n            # to create combinations, we don't repeat values.\n            # 1,1,1,5 --\x3e after first 1, we will skip other 1's.\n            # This will help us avoid our dupes.\n            prev = -1\n            for i in range(pos, len(candidates)):\n                # skip clause if the candidate was same as previous\n                if candidates[i] == prev:\n                    # skip this iteration\n                    continue\n                # early termination. If the current candidate would push\n                # us above the target value, then no need to continue\n                # checking values as since we are sorted, all values\n                # beyond this point would push us above the target.\n                if candidates[i] + targ > target:\n                    # break the loop\n                    break\n                # create our new combo array to add to the stack\n                new_combo = combo + [candidates[i]]\n                # append new combo, new target score, next position to\n                # start the loop from.\n                stack.append((new_combo, targ + candidates[i], i + 1))\n                # set new previous for subsequent loops.\n                prev = candidates[i]\n        return combinations\n")))))}f.isMDXComponent=!0}}]);