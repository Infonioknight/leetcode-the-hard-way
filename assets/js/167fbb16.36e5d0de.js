"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[61156],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>x});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),u=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=u(e.components);return r.createElement(p.Provider,{value:n},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=u(t),d=o,x=s["".concat(p,".").concat(d)]||s[d]||c[d]||a;return t?r.createElement(x,i(i({ref:n},m),{},{components:t})):r.createElement(x,i({ref:n},m))}));function x(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[s]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},80014:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>b,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=t(87462),o=(t(67294),t(3905));const a={description:"Author: @wingkwong, @ColeB2 | https://leetcode.com/problems/powx-n/",tags:["Math","Recursion"]},i="0050 - Pow(x, n) (Medium)",l={unversionedId:"0000-0099/pow-x-n-medium",id:"0000-0099/pow-x-n-medium",title:"0050 - Pow(x, n) (Medium)",description:"Author: @wingkwong, @ColeB2 | https://leetcode.com/problems/powx-n/",source:"@site/solutions/0000-0099/0050-pow-x-n-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/pow-x-n-medium",permalink:"/solutions/0000-0099/pow-x-n-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0050-pow-x-n-medium.md",tags:[{label:"Math",permalink:"/solutions/tags/math"},{label:"Recursion",permalink:"/solutions/tags/recursion"}],version:"current",sidebarPosition:50,frontMatter:{description:"Author: @wingkwong, @ColeB2 | https://leetcode.com/problems/powx-n/",tags:["Math","Recursion"]},sidebar:"tutorialSidebar",previous:{title:"0049 - Group Anagrams (Medium)",permalink:"/solutions/0000-0099/group-anagrams-medium"},next:{title:"0051 - N-Queens (Hard)",permalink:"/solutions/0000-0099/n-queens-hard"}},p={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Exponentiation",id:"approach-1-binary-exponentiation",level:2}],m=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)},s=m("Tabs"),c=m("TabItem"),d=m("SolutionAuthor"),x={toc:u},k="wrapper";function b(e){let{components:n,...t}=e;return(0,o.kt)(k,(0,r.Z)({},x,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0050---powx-n-medium"},"0050 - Pow(x, n) (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/powx-n/"},"https://leetcode.com/problems/powx-n/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Implement ",(0,o.kt)("a",{parentName:"p",href:"http://www.cplusplus.com/reference/valarray/pow/"},"pow(x, n)"),", which calculates ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," raised to the power ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," (i.e., ",(0,o.kt)("inlineCode",{parentName:"p"},"x^n"),")."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: x = 2.00000, n = 10\nOutput: 1024.00000\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: x = 2.10000, n = 3\nOutput: 9.26100\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-100.0 < x < 100.0")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-2^31 <= n <= 2^31 - 1")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-10^4 <= x^n <= 10^4"))),(0,o.kt)("h2",{id:"approach-1-binary-exponentiation"},"Approach 1: Binary Exponentiation"),(0,o.kt)("p",null,"If the exponent $$n$$ is negative, we need to change it to positive exponent $$- n$$ and make the base  to $$1 / x$$. Then apply ",(0,o.kt)("a",{parentName:"p",href:"../../tutorials/math/number-theory/binary-exponentiation"},"Binary Exponentiation"),"."),(0,o.kt)("p",null,"Time Complexity: $$O(log n)$$ instead of calculating $$x * x$$, $$n$$ times. We can utilize binary exponentiation to reduce the number of calculations to $$log n$$ time."),(0,o.kt)("p",null,"Space Complexity: $$O(1)$$, we can perform it iteratively, with constant extra space."),(0,o.kt)(s,{mdxType:"Tabs"},(0,o.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    double myPow(double x, int N) {\n        long long n = N;\n        if (n < 0) n = -n, x = 1 / x;\n        // Binary Exponentiation\n        double ans = 1;\n        if (n == 0) return 1;\n        while (n > 0) {\n            if(n & 1) ans *= x;\n            x *= x;\n            n >>= 1;\n        }\n        return ans;\n    }\n};\n"))),(0,o.kt)(c,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(d,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        # negative n --\x3e adjust our starting x and n. So the exponent\n        # is positive, and the x value is 1/x\n        if (n < 0):\n            n = -n \n            x = 1 / x\n        # initialize our running answer, num, as 1.\n        num = 1\n        # while we have an exponent:\n        while n > 0:\n            # if exponent is odd ie: n % 2 == 1:\n            if n & 1:\n                # multiply answer by current x value.\n                num *= x\n            # multiply x value, by itself.\n            x *= x\n            # integer division --\x3e n = n // 2\n            n >>= 1\n        return num\n")))))}b.isMDXComponent=!0}}]);