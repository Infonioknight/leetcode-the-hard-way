"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[72668],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},57089:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>b,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={title:"Palindrome",description:"A palindrome is a word, number, phrase, or other sequence of characters which reads the same backward as forward.",hide_table_of_contents:!0,keywords:["leetcode","tutorial","palindrome"]},o=void 0,s={unversionedId:"strings/palindrome",id:"strings/palindrome",title:"Palindrome",description:"A palindrome is a word, number, phrase, or other sequence of characters which reads the same backward as forward.",source:"@site/tutorials/strings/palindrome.md",sourceDirName:"strings",slug:"/strings/palindrome",permalink:"/tutorials/strings/palindrome",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/tutorials/strings/palindrome.md",tags:[],version:"current",frontMatter:{title:"Palindrome",description:"A palindrome is a word, number, phrase, or other sequence of characters which reads the same backward as forward.",hide_table_of_contents:!0,keywords:["leetcode","tutorial","palindrome"]},sidebar:"tutorialSidebar",previous:{title:"Strings",permalink:"/tutorials/category/strings"}},l={},p=[{value:"Overview",id:"overview",level:2},{value:"Iteration",id:"iteration",level:3},{value:"Built-in Functions",id:"built-in-functions",level:3},{value:"Palindrome with Range",id:"palindrome-with-range",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},d=c("TutorialAuthors"),u=c("Tabs"),m=c("TabItem"),g=c("SolutionAuthor"),h={toc:p},f="wrapper";function b(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(d,{names:"@wingkwong",mdxType:"TutorialAuthors"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"A palindrome reads the same forward and backward. ",(0,a.kt)("inlineCode",{parentName:"p"},"amanaplanacanalpanama")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"10101")," are the examples of palindrome. "),(0,a.kt)("p",null,"There are multiple ways to check if a string is a palindrome or not. "),(0,a.kt)("h3",{id:"iteration"},"Iteration"),(0,a.kt)("p",null,"As we know it reads the same forward and backward, which means $s","[0]","$ is same as $s","[n - 1]","$, $s","[1]","$ is same as $s","[n - 2]","$ and so on. Therefore, we can iterate $n / 2$ times to check if the left side is same as the right side."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"bool isPalindrome(const string& s) {\n    for (int i = 0; i < s.size() / 2; i++) {\n        if (s[i] != s[s.size() - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n")))),(0,a.kt)("h3",{id:"built-in-functions"},"Built-in Functions"),(0,a.kt)("p",null,"We can directly use built-in function to reverse a string and check if it is same as the target one."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"bool isPalindrome(const string& s) {\n    string t = s;\n    reverse(t.begin(), t.end());\n    return s == t;\n}\n")))),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"bool isPalindrome(const string& s) {\n    return s == string(s.rbegin(), s.rend());\n}\n")))),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"bool isPalindrome(const string &s) {\n    return equal(s.begin(), s.begin() + s.size() / 2, s.rbegin());\n}\n")))),(0,a.kt)("h3",{id:"palindrome-with-range"},"Palindrome with Range"),(0,a.kt)("p",null,"For a given range, we can follow the same idea to use two pointers to check if a sub-string is a palindrome ."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"bool palindromeWithRange(string s, int i, int j) {\n    while (i < j) {\n        if (s[i] != s[j]) return false;\n        i++, j--;\n    }\n    return true;\n}\n")))))}b.isMDXComponent=!0}}]);