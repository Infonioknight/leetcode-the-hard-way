"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[47500],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(r),h=i,f=p["".concat(l,".").concat(h)]||p[h]||u[h]||a;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<a;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},36041:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var n=r(87462),i=(r(67294),r(3905));const a={title:"Trie",description:"A trie or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings.",keywords:["leetcode","tutorial","trie","prefix tree","data structure"]},o=void 0,s={unversionedId:"basic-topics/trie",id:"basic-topics/trie",title:"Trie",description:"A trie or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings.",source:"@site/tutorials/basic-topics/trie.md",sourceDirName:"basic-topics",slug:"/basic-topics/trie",permalink:"/tutorials/basic-topics/trie",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/tutorials/basic-topics/trie.md",tags:[],version:"current",frontMatter:{title:"Trie",description:"A trie or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings.",keywords:["leetcode","tutorial","trie","prefix tree","data structure"]},sidebar:"tutorialSidebar",previous:{title:"Time Complexity",permalink:"/tutorials/basic-topics/time-complexity"},next:{title:"Two Pointers",permalink:"/tutorials/basic-topics/two-pointers"}},l={},d=[{value:"Overview",id:"overview",level:2},{value:"Trie",id:"trie",level:2},{value:"Trie Node",id:"trie-node",level:2},{value:"Initializing",id:"initializing",level:2},{value:"Searching",id:"searching",level:2},{value:"Insertion",id:"insertion",level:2},{value:"startsWith",id:"startswith",level:2}],c=(p="TutorialAuthors",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var p;const u={toc:d},h="wrapper";function f(e){let{components:t,...r}=e;return(0,i.kt)(h,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(c,{names:"@wingkwong",mdxType:"TutorialAuthors"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/implement-trie-prefix-tree/"},"208. Implement Trie (Prefix Tree)")," will be used as an example."),(0,i.kt)("p",null,'A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.'),(0,i.kt)("p",null,"Implement the Trie class:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Trie() Initializes the trie object."),(0,i.kt)("li",{parentName:"ul"},"void insert(String word) Inserts the string word into the trie."),(0,i.kt)("li",{parentName:"ul"},"boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise."),(0,i.kt)("li",{parentName:"ul"},"boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input\n["Trie", "insert", "search", "search", "startsWith", "insert", "search"]\n[[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]]\nOutput\n[null, null, true, false, true, null, true]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert("apple");\ntrie.search("apple");   // return True\ntrie.search("app");     // return False\ntrie.startsWith("app"); // return True\ntrie.insert("app");\ntrie.search("app");     // return True\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1 <= word.length, prefix.length <= 2000"),(0,i.kt)("li",{parentName:"ul"},"word and prefix consist only of lowercase English letters."),(0,i.kt)("li",{parentName:"ul"},"At most 3 * 10^4 calls in total will be made to insert, search, and startsWith.")),(0,i.kt)("h2",{id:"trie"},"Trie"),(0,i.kt)("p",null,"We can see Trie containing a number of Trie nodes. Each node contains a value and links to other nodes. We start from the root, we traverse till $e$ so that we have $gee$. At this node, we have three different nodes to traverse so that we have $geek$, $geer$, and $geez$. We can also further to have $geeks$ and $geekt$ and so on."),(0,i.kt)("img",{src:"https://user-images.githubusercontent.com/35857179/168469460-8dc4b23b-21e9-43dd-84ca-287f0b44834a.png",width:"400"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Diagram Source: ",(0,i.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/"},"https://www.geeksforgeeks.org/"))),(0,i.kt)("h2",{id:"trie-node"},"Trie Node"),(0,i.kt)("p",null,"Each Trie Node should have a children array with the size of $26$ for character $a$ to $z$. Also it has a boolean variable $$isEndOfWord$$ to indicate if a word is ended at this node. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class TrieNode {\n public:\n  // is a word ended at this node\n  bool isEndOfWord;\n  // children for 26 characters\n  TrieNode* children[26];\n  \n  // constructor - setting initial values\n  TrieNode() {\n    // no word is ended here\n    isEndOfWord = false;\n    // not linking to other Trie node\n    for (int i = 0; i < 26; i++) {\n        children[i] = NULL;\n    }\n  }\n};\n")),(0,i.kt)("h2",{id:"initializing"},"Initializing"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"Trie() { \n    // init Trie - define the very first node\n    root = new TrieNode();\n}\n")),(0,i.kt)("h2",{id:"searching"},"Searching"),(0,i.kt)("p",null,"Given a word, ",(0,i.kt)("inlineCode",{parentName:"p"},"search")," returns if the word is in the trie."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"bool search(string word) {\n    // start from the root node\n    TrieNode* node = root;\n    // iterate the word\n    for (int i = 0; i < (int) word.size(); i++) {\n        // get the index of the character \n        // a -> 0\n        // b -> 1\n        // ...\n        // z -> 25\n        int idx = word[i] - 'a';\n        // if there is no such node, that means the word doesn't exist\n        if (!node->children[idx]) return false;\n        // otherwise, traverse the next node\n        node = node->children[idx];\n    }\n    // check if this node is marked with isEndOfWord = true\n    return node->isEndOfWord;\n}\n")),(0,i.kt)("h2",{id:"insertion"},"Insertion"),(0,i.kt)("p",null,"Given a word, ",(0,i.kt)("inlineCode",{parentName:"p"},"insert")," inserts it into the trie."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void insert(string word) {\n    // start from the root node\n    TrieNode* node = root;\n    for (int i = 0; i < (int) word.size(); i++) {\n        // get the index of the character \n        // a -> 0\n        // b -> 1\n        // ...\n        // z -> 25\n        int idx = word[i] - 'a';\n        // traverse each node, \n        if (!node->children[idx]) {\n            // if the node doesn't exist, \n            // create a new node\n            node->children[idx] = new TrieNode();\n        }\n        // traverse the next one\n        node = node->children[idx];\n    }\n    // mark this node with isEndOfWord = true\n    node->isEndOfWord = true;\n}\n")),(0,i.kt)("h2",{id:"startswith"},"startsWith"),(0,i.kt)("p",null,"Given a prefix, ",(0,i.kt)("inlineCode",{parentName:"p"},"startsWith")," checks if there is any word in the trie that starts with the given prefix."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"bool startsWith(string prefix) {\n    // start from the root node\n    TrieNode* node = root;\n    // iterate each character in prefix\n    for (int i = 0; i < (int) prefix.size(); i++) {\n        // get the index of the character \n        // a -> 0\n        // b -> 1\n        // ...\n        // z -> 25\n        int idx = prefix[i] - 'a';\n        // if there is no such node, that means the word doesn't exist\n        if (!node->children[idx]) return false;\n        // otherwise, traverse the next node\n        node = node->children[idx];\n    }\n    // all target nodes have been traversed, return true here\n    return true;\n}\n")))}f.isMDXComponent=!0}}]);