"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[72366],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,g=u["".concat(l,".").concat(d)]||u[d]||c[d]||i;return t?r.createElement(g,o(o({ref:n},m),{},{components:t})):r.createElement(g,o({ref:n},m))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4383:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/summary-ranges/"},o="0228 - Summary Ranges (Easy)",s={unversionedId:"0200-0299/summary-ranges-easy",id:"0200-0299/summary-ranges-easy",title:"0228 - Summary Ranges (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/summary-ranges/",source:"@site/solutions/0200-0299/0228-summary-ranges-easy.md",sourceDirName:"0200-0299",slug:"/0200-0299/summary-ranges-easy",permalink:"/solutions/0200-0299/summary-ranges-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0228-summary-ranges-easy.md",tags:[],version:"current",sidebarPosition:228,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/summary-ranges/"},sidebar:"tutorialSidebar",previous:{title:"0226 - Invert Binary Tree (Easy)",permalink:"/solutions/0200-0299/invert-binary-tree-easy"},next:{title:"0230 - Kth Smallest Element in a BST (Medium)",permalink:"/solutions/0200-0299/kth-smallest-element-in-a-bst-medium"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Iteration",id:"approach-1-iteration",level:2}],m=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const c={toc:p},d="wrapper";function g(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0228---summary-ranges-easy"},"0228 - Summary Ranges (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/summary-ranges/"},"https://leetcode.com/problems/summary-ranges/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a ",(0,a.kt)("strong",{parentName:"p"},"sorted unique")," integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"smallest sorted")," list of ranges that ",(0,a.kt)("strong",{parentName:"em"},"cover all the numbers in the array exactly")),". That is, each element of ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," is covered by exactly one of the ranges, and there is no integer ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," such that ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," is in one of the ranges but not in ",(0,a.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,a.kt)("p",null,"Each range ",(0,a.kt)("inlineCode",{parentName:"p"},"[a,b]")," in the list should be output as:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"a->b"')," if ",(0,a.kt)("inlineCode",{parentName:"li"},"a != b")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"a"')," if ",(0,a.kt)("inlineCode",{parentName:"li"},"a == b"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: nums = [0,1,2,4,5,7]\nOutput: ["0->2","4->5","7"]\nExplanation: The ranges are:\n[0,2] --\x3e "0->2"\n[4,5] --\x3e "4->5"\n[7,7] --\x3e "7"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: nums = [0,2,3,4,6,8,9]\nOutput: ["0","2->4","6","8->9"]\nExplanation: The ranges are:\n[0,0] --\x3e "0"\n[2,4] --\x3e "2->4"\n[6,6] --\x3e "6"\n[8,9] --\x3e "8->9"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= nums.length <= 20")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-2^31 <= nums[i] <= 2^31 - 1")),(0,a.kt)("li",{parentName:"ul"},"All the values of ",(0,a.kt)("inlineCode",{parentName:"li"},"nums")," are ",(0,a.kt)("strong",{parentName:"li"},"unique"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nums")," is sorted in ascending order.")),(0,a.kt)("h2",{id:"approach-1-iteration"},"Approach 1: Iteration"),(0,a.kt)("p",null,"We take a number as an starting point at $$i$$, then search for the next ending point $$j$$ which satisfies $$nums","[j]"," + 1 \\ne nums","[j + 1]","$$. If both pointer is not same, then we can push $$nums","[i]","$$->$$nums","[j]","$$ to our answer array, else we just push $$nums","[i]","$$."),(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    vector<string> summaryRanges(vector<int>& nums) {\n        vector<string> ans;\n        int n = (int) nums.size();\n        for(int i = 0; i < n; i++) {\n            // take nums[i] as a in range [a, b]\n            int a = nums[i];\n            // search for the next ending point\n            while (i != n - 1 && nums[i] + 1 == nums[i + 1]) i++;\n            // take nums[i] as b in range [a, b]\n            int b = nums[i];\n            // output as "a" if a == b\n            if(a == b) ans.push_back(to_string(a));\n            // output as "a->b" if a != b\n            else ans.push_back(to_string(a) + "->" + to_string(b));\n        }\n        return ans;\n    }\n};\n')))}g.isMDXComponent=!0}}]);