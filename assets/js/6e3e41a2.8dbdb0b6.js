"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[82952],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(f,o(o({ref:t},s),{},{components:n})):a.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},51112:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/count-artifacts-that-can-be-extracted/"},o="2201 - Count Artifacts That Can Be Extracted (Medium)",l={unversionedId:"2100-2199/count-artifacts-that-can-be-extracted-medium",id:"2100-2199/count-artifacts-that-can-be-extracted-medium",title:"2201 - Count Artifacts That Can Be Extracted (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/count-artifacts-that-can-be-extracted/",source:"@site/solutions/2100-2199/2201-count-artifacts-that-can-be-extracted-medium.md",sourceDirName:"2100-2199",slug:"/2100-2199/count-artifacts-that-can-be-extracted-medium",permalink:"/solutions/2100-2199/count-artifacts-that-can-be-extracted-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2201-count-artifacts-that-can-be-extracted-medium.md",tags:[],version:"current",sidebarPosition:2201,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/count-artifacts-that-can-be-extracted/"},sidebar:"tutorialSidebar",previous:{title:"2200 - Find All K-Distant Indices in an Array (Easy)",permalink:"/solutions/2100-2199/find-all-k-distant-indices-in-an-array-easy"},next:{title:"2202 - Maximize the Topmost Element After K Moves (Medium)",permalink:"/solutions/2100-2199/maximize-the-topmost-element-after-k-moves-medium"}},c={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Loops",id:"approach-1-loops",level:2}],s=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const d={toc:p},m="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2201---count-artifacts-that-can-be-extracted-medium"},"2201 - Count Artifacts That Can Be Extracted (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/count-artifacts-that-can-be-extracted/"},"https://leetcode.com/problems/count-artifacts-that-can-be-extracted/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"There is an ",(0,r.kt)("inlineCode",{parentName:"p"},"n x n")," ",(0,r.kt)("strong",{parentName:"p"},"0-indexed")," grid with some artifacts buried in it. You are given the integer ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," and a ",(0,r.kt)("strong",{parentName:"p"},"0-indexed")," 2D integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"artifacts")," describing the positions of the rectangular artifacts where ",(0,r.kt)("inlineCode",{parentName:"p"},"artifacts[i] = [r1i, c1i, r2i, c2i]")," denotes that the ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," artifact is buried in the subgrid where:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(r1i, c1i)")," is the coordinate of the ",(0,r.kt)("strong",{parentName:"li"},"top-left")," cell of the ",(0,r.kt)("inlineCode",{parentName:"li"},"ith")," artifact and"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(r2i, c2i)")," is the coordinate of the ",(0,r.kt)("strong",{parentName:"li"},"bottom-right")," cell of the ",(0,r.kt)("inlineCode",{parentName:"li"},"ith")," artifact.")),(0,r.kt)("p",null,"You will excavate some cells of the grid and remove all the mud from them. If the cell has a part of an artifact buried underneath, it will be uncovered. If all the parts of an artifact are uncovered, you can extract it."),(0,r.kt)("p",null,"Given a ",(0,r.kt)("strong",{parentName:"p"},"0-indexed")," 2D integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"dig")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"dig[i] = [ri, ci]")," indicates that you will excavate the cell ",(0,r.kt)("inlineCode",{parentName:"p"},"(ri, ci)"),", return ",(0,r.kt)("em",{parentName:"p"},"the number of artifacts that you can extract"),"."),(0,r.kt)("p",null,"The test cases are generated such that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"No two artifacts overlap."),(0,r.kt)("li",{parentName:"ul"},"Each artifact only covers at most ",(0,r.kt)("inlineCode",{parentName:"li"},"4")," cells."),(0,r.kt)("li",{parentName:"ul"},"The entries of ",(0,r.kt)("inlineCode",{parentName:"li"},"dig")," are unique.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2019/09/16/untitled-diagram.jpg",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1]]\nOutput: 1\nExplanation: \nThe different colors represent different artifacts. Excavated cells are labeled with a 'D' in the grid.\nThere is 1 artifact that can be extracted, namely the red artifact.\nThe blue artifact has one part in cell (1,1) which remains uncovered, so we cannot extract it.\nThus, we return 1.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2019/09/16/untitled-diagram-1.jpg",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1],[1,1]]\nOutput: 2\nExplanation: Both the red and blue artifacts have all parts uncovered (labeled with a 'D') and can be extracted, so we return 2. \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= n <= 1000")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= artifacts.length, dig.length <= min(n2, 10^5)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"artifacts[i].length == 4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dig[i].length == 2")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= r1i, c1i, r2i, c2i, ri, ci <= n - 1")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"r1i <= r2i")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"c1i <= c2i")),(0,r.kt)("li",{parentName:"ul"},"No two artifacts will overlap."),(0,r.kt)("li",{parentName:"ul"},"The number of cells covered by an artifact is ",(0,r.kt)("strong",{parentName:"li"},"at most")," ",(0,r.kt)("inlineCode",{parentName:"li"},"4"),"."),(0,r.kt)("li",{parentName:"ul"},"The entries of ",(0,r.kt)("inlineCode",{parentName:"li"},"dig")," are unique.")),(0,r.kt)("h2",{id:"approach-1-loops"},"Approach 1: Loops"),(0,r.kt)("p",null,"Check if each cell from $$(r1_i, c1_i)$$ to $$(r2_i, c2_i)$$ in $$artifacts","[i]","$$ are all dug or not. If so, increase $$ans$$ by $$1$$."),(0,r.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int digArtifacts(int n, vector<vector<int>>& art, vector<vector<int>>& dig) {\n        int ans = 0;\n        vector<vector<int>> isDug(n, vector<int>(n));\n        for (auto x : dig) isDug[x[0]][x[1]] = 1;\n        for (auto x : art) {\n            int ok = 1;\n            for (int i = x[0]; i <= x[2] && ok; i++) {\n                for (int j = x[1]; j <= x[3] && ok; j++) {\n                    if (!isDug[i][j]) {\n                        ok = 0;\n                    }\n                }\n            }\n            ans += ok;\n        }\n        return ans;\n    }\n};\n")))}f.isMDXComponent=!0}}]);