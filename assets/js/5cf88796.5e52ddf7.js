"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[78302],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},61714:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/binary-tree-longest-consecutive-sequence/",tags:["Tree","Depth-First Search","Binary Tree"]},l="0298 - Binary Tree Longest Consecutive Sequence (Medium)",i={unversionedId:"0200-0299/binary-tree-longest-consecutive-sequence-medium",id:"0200-0299/binary-tree-longest-consecutive-sequence-medium",title:"0298 - Binary Tree Longest Consecutive Sequence (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/binary-tree-longest-consecutive-sequence/",source:"@site/solutions/0200-0299/0298-binary-tree-longest-consecutive-sequence-medium.md",sourceDirName:"0200-0299",slug:"/0200-0299/binary-tree-longest-consecutive-sequence-medium",permalink:"/solutions/0200-0299/binary-tree-longest-consecutive-sequence-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0298-binary-tree-longest-consecutive-sequence-medium.md",tags:[{label:"Tree",permalink:"/solutions/tags/tree"},{label:"Depth-First Search",permalink:"/solutions/tags/depth-first-search"},{label:"Binary Tree",permalink:"/solutions/tags/binary-tree"}],version:"current",sidebarPosition:298,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/binary-tree-longest-consecutive-sequence/",tags:["Tree","Depth-First Search","Binary Tree"]},sidebar:"tutorialSidebar",previous:{title:"0297 - Serialize and Deserialize Binary Tree (Hard)",permalink:"/solutions/0200-0299/serialize-and-deserialize-binary-tree-hard"},next:{title:"0299 - Bulls and Cows (Medium)",permalink:"/solutions/0200-0299/bulls-and-cows-medium"}},s={},u=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}],c=(p="SolutionAuthor",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var p;const m={toc:u},d="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0298---binary-tree-longest-consecutive-sequence-medium"},"0298 - Binary Tree Longest Consecutive Sequence (Medium)"),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given the ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," of a binary tree, return *the length of the longest ",(0,o.kt)("strong",{parentName:"p"},"consecutive sequence path*"),"."),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"consecutive sequence path")," is a path where the values ",(0,o.kt)("strong",{parentName:"p"},"increase by one")," along the path."),(0,o.kt)("p",null,"Note that the path can start ",(0,o.kt)("strong",{parentName:"p"},"at any node")," in the tree, and you cannot go from a node to its parent in the path."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [1,null,3,2,4,null,null,null,5]\nOutput: 3\nExplanation: Longest consecutive sequence path is 3-4-5, so return 3.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [2,null,3,2,null,1]\nOutput: 2\nExplanation: Longest consecutive sequence path is 2-3, not 3-2-1, so return 2.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ",(0,o.kt)("inlineCode",{parentName:"li"},"[1, 3 * 10^4]"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-3 * 104 <= Node.val <= 3 * 10^4"))),(0,o.kt)("h2",{id:"approach-1-dfs"},"Approach 1: DFS"),(0,o.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\n// Time Complexity: O(N) where N is the number of node\n// Space Complexity: O(H) where H is the number of the level. In worst case, H would be N if there is only one path\nclass Solution {\npublic:\n    int longestConsecutive(TreeNode* root, int len = 0, TreeNode* parent = nullptr) {\n        // if root is nullptr, we return the current length\n        if (!root) return len;\n        // if the current node has a parent node,\n        // and the value of the current node is that of parent node plus one\n        // then we increase len\n        if (parent && root->val == parent->val + 1) len += 1;\n        // otherwise, we need to reset the len\n        else len = 1;\n        // then we calculate the result of left sub-tree and right sub-tree\n        // compare with the current len and take the maximum one\n        return max({\n            // max len at current level\n            len,\n            // max len from left sub-tree\n            longestConsecutive(root->left, len, root),\n            // max len from right sub-tree\n            longestConsecutive(root->right, len, root)\n        });\n    }\n};\n")))}h.isMDXComponent=!0}}]);