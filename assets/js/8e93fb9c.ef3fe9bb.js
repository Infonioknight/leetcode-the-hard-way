"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[12791],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=m(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,h=p["".concat(l,".").concat(d)]||p[d]||c[d]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m[p]="string"==typeof e?e:o,i[1]=m;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},93345:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>k,frontMatter:()=>a,metadata:()=>m,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/sum-in-a-matrix/"},i="2679 - Sum in a Matrix (Medium)",m={unversionedId:"2600-2699/sum-in-a-matrix-medium",id:"2600-2699/sum-in-a-matrix-medium",title:"2679 - Sum in a Matrix (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/sum-in-a-matrix/",source:"@site/solutions/2600-2699/2679-sum-in-a-matrix-medium.md",sourceDirName:"2600-2699",slug:"/2600-2699/sum-in-a-matrix-medium",permalink:"/solutions/2600-2699/sum-in-a-matrix-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2600-2699/2679-sum-in-a-matrix-medium.md",tags:[],version:"current",sidebarPosition:2679,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/sum-in-a-matrix/"},sidebar:"tutorialSidebar",previous:{title:"2644 - Find the Maximum Divisibility Score (Easy)",permalink:"/solutions/2600-2699/find-the-maximum-divisibility-score-easy"}},l={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sort and Count",id:"approach-1-sort-and-count",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},p=u("Tabs"),c=u("TabItem"),d=u("SolutionAuthor"),h={toc:s},f="wrapper";function k(e){let{components:t,...n}=e;return(0,o.kt)(f,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"2679---sum-in-a-matrix-medium"},"2679 - Sum in a Matrix (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sum-in-a-matrix/"},"https://leetcode.com/problems/sum-in-a-matrix/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given a ",(0,o.kt)("strong",{parentName:"p"},"0-indexed")," 2D integer array ",(0,o.kt)("inlineCode",{parentName:"p"},"nums"),". Initially, your score is ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),". Perform the following operations until the matrix becomes empty:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"From each row in the matrix, select the largest number and remove it. In the case of a tie, it does not matter which number is chosen."),(0,o.kt)("li",{parentName:"ol"},"Identify the highest number amongst all those removed in step 1. Add that number to your ",(0,o.kt)("strong",{parentName:"li"},"score"),".")),(0,o.kt)("p",null,"Return ",(0,o.kt)("em",{parentName:"p"},"the final ",(0,o.kt)("strong",{parentName:"em"},"score"),".")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]\nOutput: 15\nExplanation: In the first operation, we remove 7, 6, 6, and 3. We then add 7 to our score. Next, we remove 2, 4, 5, and 2. We add 5 to our score. Lastly, we remove 1, 2, 3, and 1. We add 3 to our score. Thus, our final score is 7 + 5 + 3 = 15.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [[1]]\nOutput: 1\nExplanation: We remove 1 and add it to the answer. We return 1.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 300")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums[i].length <= 500")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= nums[i][j] <= 103"))),(0,o.kt)("h2",{id:"approach-1-sort-and-count"},"Approach 1: Sort and Count"),(0,o.kt)(p,{mdxType:"Tabs"},(0,o.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def matrixSum(self, nums: List[List[int]]) -> int:\n        m, n = len(nums), len(nums[0])\n        res = 0\n        # sort each row\n        for num in nums: num.sort()\n        # for each column, \n        for j in range(n):\n            # we look for the highest number\n            mx = 0\n            for i in range(m): mx = max(mx, nums[i][j])\n            # then add that number to the score\n            res += mx\n        return res\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def matrixSum(self, nums: List[List[int]]) -> int:\n        res = 0\n        # we first sort the rows, then transpose the input\n        # in this way, we can just use max to find the higher number\n        for col in zip(*[sorted(row) for row in nums]):\n            # [\n            #     (1, 2, 3, 1), \n            #     (2, 4, 5, 2), \n            #     (7, 6, 6, 3)\n            # ]\n            res += max(col)\n        return res\n")))))}k.isMDXComponent=!0}}]);