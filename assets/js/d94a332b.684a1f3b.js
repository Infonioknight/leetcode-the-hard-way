"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[62870],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,h=u["".concat(s,".").concat(d)]||u[d]||c[d]||i;return t?r.createElement(h,o(o({ref:n},m),{},{components:t})):r.createElement(h,o({ref:n},m))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},96384:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/recover-the-original-array/"},o="2122 - Recover the Original Array (Hard)",l={unversionedId:"2100-2199/recover-the-original-array-hard",id:"2100-2199/recover-the-original-array-hard",title:"2122 - Recover the Original Array (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/recover-the-original-array/",source:"@site/solutions/2100-2199/2122-recover-the-original-array-hard.md",sourceDirName:"2100-2199",slug:"/2100-2199/recover-the-original-array-hard",permalink:"/solutions/2100-2199/recover-the-original-array-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2122-recover-the-original-array-hard.md",tags:[],version:"current",sidebarPosition:2122,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/recover-the-original-array/"},sidebar:"tutorialSidebar",previous:{title:"2121 - Intervals Between Identical Elements (Medium)",permalink:"/solutions/2100-2199/intervals-between-identical-elements-medium"},next:{title:"2127 - Maximum Employees to Be Invited to a Meeting (Hard)",permalink:"/solutions/2100-2199/maximum-employees-to-be-invited-to-a-meeting-hard"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Try all possible k",id:"approach-1-try-all-possible-k",level:2}],m=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const c={toc:p},d="wrapper";function h(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2122---recover-the-original-array-hard"},"2122 - Recover the Original Array (Hard)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/recover-the-original-array/"},"https://leetcode.com/problems/recover-the-original-array/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Alice had a ",(0,a.kt)("strong",{parentName:"p"},"0-indexed")," array ",(0,a.kt)("inlineCode",{parentName:"p"},"arr")," consisting of ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," ",(0,a.kt)("strong",{parentName:"p"},"positive")," integers. She chose an arbitrary ",(0,a.kt)("strong",{parentName:"p"},"positive integer")," ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," and created two new ",(0,a.kt)("strong",{parentName:"p"},"0-indexed")," integer arrays ",(0,a.kt)("inlineCode",{parentName:"p"},"lower")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"higher")," in the following manner:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"lower[i] = arr[i] - k"),", for every index ",(0,a.kt)("inlineCode",{parentName:"li"},"i")," where ",(0,a.kt)("inlineCode",{parentName:"li"},"0 <= i < n")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"higher[i] = arr[i] + k"),", for every index ",(0,a.kt)("inlineCode",{parentName:"li"},"i")," where ",(0,a.kt)("inlineCode",{parentName:"li"},"0 <= i < n"))),(0,a.kt)("p",null,"Unfortunately, Alice lost all three arrays. However, she remembers the integers that were present in the arrays ",(0,a.kt)("inlineCode",{parentName:"p"},"lower")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"higher"),", but not the array each integer belonged to. Help Alice and recover the original array."),(0,a.kt)("p",null,"Given an array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," consisting of ",(0,a.kt)("inlineCode",{parentName:"p"},"2n")," integers, where ",(0,a.kt)("strong",{parentName:"p"},"exactly")," ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," of the integers were present in ",(0,a.kt)("inlineCode",{parentName:"p"},"lower")," and the remaining in ",(0,a.kt)("inlineCode",{parentName:"p"},"higher"),", return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"original")," array")," ",(0,a.kt)("inlineCode",{parentName:"p"},"arr"),". In case the answer is not unique, return ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("strong",{parentName:"em"},"any")," valid array"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," The test cases are generated such that there exists ",(0,a.kt)("strong",{parentName:"p"},"at least one")," valid array ",(0,a.kt)("inlineCode",{parentName:"p"},"arr"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [2,10,6,4,8,12]\nOutput: [3,7,11]\nExplanation:\nIf arr = [3,7,11] and k = 1, we get lower = [2,6,10] and higher = [4,8,12].\nCombining lower and higher gives us [2,6,10,4,8,12], which is a permutation of nums.\nAnother valid possibility is that arr = [5,7,9] and k = 3. In that case, lower = [2,4,6] and higher = [8,10,12]. \n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,1,3,3]\nOutput: [2,2]\nExplanation:\nIf arr = [2,2] and k = 1, we get lower = [1,1] and higher = [3,3].\nCombining lower and higher gives us [1,1,3,3], which is equal to nums.\nNote that arr cannot be [1,3] because in that case, the only possible way to obtain [1,1,3,3] is with k = 0.\nThis is invalid since k must be positive.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [5,435]\nOutput: [220]\nExplanation:\nThe only possible combination is arr = [220] and k = 215. Using them, we get lower = [5] and higher = [435].\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"2 * n == nums.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 10^9")),(0,a.kt)("li",{parentName:"ul"},"The test cases are generated such that there exists ",(0,a.kt)("strong",{parentName:"li"},"at least one")," valid array ",(0,a.kt)("inlineCode",{parentName:"li"},"arr"),".")),(0,a.kt)("h2",{id:"approach-1-try-all-possible-k"},"Approach 1: Try all possible k"),(0,a.kt)("p",null,"In short, we just need to try all possible $$k$$. If we sort $$nums$$, the smallest element must be in the lower array. It is easy to see $$k$$k can be $$(nums","[i]","\u2212nums","[0]",")/2$$. We try each $$k$$ to see if we can match all the pairs. If the size of lower array is same as that of higher array, then the answer would be $$ans","[j]","=(l","[j]","+r","[j]",")/2$$."),(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> recoverArray(vector<int>& nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i < nums.size(); i++) {\n            unordered_map<int, int> m;\n            int d = nums[i] - nums.front();\n            if (d == 0 || d & 1) {\n                continue;\n            }\n            vector<int> l, r;\n            for (int j = 0; j < n; j++) {\n                if (m.count(nums[j] - d)) {\n                    r.push_back(nums[j]);\n                    if (--m[nums[j] - d] == 0) {\n                        m.erase(nums[j] - d);\n                    }\n                } else {\n                    l.push_back(nums[j]);\n                    m[nums[j]]++;\n                }\n            }\n            if (l.size() == r.size()) {\n                vector<int> ans;\n                for (int j = 0; j < n / 2; j++) {\n                    ans.push_back((l[j] + r[j]) / 2);\n                }\n                return ans;\n            }\n        }\n        return {};\n    }\n};\n")))}h.isMDXComponent=!0}}]);