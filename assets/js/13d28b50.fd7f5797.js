"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[64895],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||c[d]||i;return n?o.createElement(h,a(a({ref:t},m),{},{components:n})):o.createElement(h,a({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},32399:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>k,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const i={description:"Author: @Kavita613 | https://leetcode.com/problems/frog-jump/",tags:["Array","Dynamic Programming"]},a="0403 - Frog Jump (Hard)",s={unversionedId:"0400-0499/Frog-Jump",id:"0400-0499/Frog-Jump",title:"0403 - Frog Jump (Hard)",description:"Author: @Kavita613 | https://leetcode.com/problems/frog-jump/",source:"@site/solutions/0400-0499/0403-Frog-Jump.md",sourceDirName:"0400-0499",slug:"/0400-0499/Frog-Jump",permalink:"/solutions/0400-0499/Frog-Jump",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0403-Frog-Jump.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"}],version:"current",sidebarPosition:403,frontMatter:{description:"Author: @Kavita613 | https://leetcode.com/problems/frog-jump/",tags:["Array","Dynamic Programming"]},sidebar:"tutorialSidebar",previous:{title:"0402 - Remove K Digits (Medium)",permalink:"/solutions/0400-0499/remove-k-digits-medium"},next:{title:"0404 - Sum of Left Leaves (Easy)",permalink:"/solutions/0400-0499/sum-of-left-leaves-easy"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: HashMap",id:"approach-1-hashmap",level:2},{value:"Approach 2: Dynamic Programming",id:"approach-2-dynamic-programming",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=m("Tabs"),c=m("TabItem"),d=m("SolutionAuthor"),h={toc:p},f="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0403---frog-jump-hard"},"0403 - Frog Jump (Hard)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/frog-jump/"},"https://leetcode.com/problems/frog-jump/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog",(0,r.kt)("br",{parentName:"p"}),"\n","can jump on a stone, but it must not jump into the water. Given a list of stones' positions (in units) in sorted ascending order, determine if the",(0,r.kt)("br",{parentName:"p"}),"\n","frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit. If the",(0,r.kt)("br",{parentName:"p"}),"\n","frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: stones = [0,1,3,5,6,8,12,17]\nOutput: true  \nExplanation: The frog can jump to the last stone by jumping $1$ unit to the $2nd$ stone, then $2$ units to the $3rd$ stone, then  \n$2$ units to the $4th$ stone, then $3$ units to the $6th$ stone, $4$ units to the $7th$ stone, and $5$ units to the $8th$ stone.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: stones = [0,1,2,3,4,8,9,11]\nOutput: false  \nExplanation: There is no way to jump to the last stone as the gap between the $5th$ and $6th$ stone is too large.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"2 <= stones.length <= 2000")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= stones[i] <= 231 - 1")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stones[0] == 0")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stones")," is sorted in a strictly increasing order.")),(0,r.kt)("h2",{id:"approach-1-hashmap"},"Approach 1: HashMap"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First, we make hashmap of each stone, which would contain a set(stores viable moves that can be made)"),(0,r.kt)("li",{parentName:"ul"},"Traversing the $stones$ array from index $0$ which is our 0th positions(only one move at 0th position made by frog)"),(0,r.kt)("li",{parentName:"ul"},"Populate the sets of stones that can be reached from current position using a viable move which are $k-1$, $k$ and $k+1$. And also we will calculate next viable move using previous move "),(0,r.kt)("li",{parentName:"ul"},"At the end we will return true if we reach at the end of posiions which is $stones","[n-1]","$")),(0,r.kt)("p",null,"Time Complexity is $O(n * n)$, where $n$ is the length of $stones$ array."),(0,r.kt)("p",null,"Space Complexity is $O(n)$."),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(d,{name:"@Kavita613",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n  bool canCross(vector<int>& stones) {\n    int n = stones.size();\n\n    // create map <stone positions, set<moves we can make at this stone position>>\n    unordered_map<int, set<int>> map;\n\n    // intializing map\n    for (int i = 0; i < n; i++) {\n      map[stones[i]] = {};\n    }\n\n    // when we are at zero position, there is only one move which is equal to 1\n    map[0].insert(1);\n\n    // iterating every stone positions through $stones$ array\n    for (int i = 0; i < n; i++) {\n      int currstone = stones[i];\n\n      // iterating each moves\n      set<int> st = map[currstone];\n\n      for (auto x : st) {\n        // pos is stone's positon after applying move x\n        int pos = currstone + x;\n\n        // if position of stone is equal to final position then frog will win\n        if (pos == stones[stones.size() - 1]) {\n          return true;\n        }\n\n        // first we will check pos is available in our stones array\n        if (map.find(pos) != map.end()) {\n          // if the frog's last jump was x units, its next jump must be either x - 1, x, or x + 1 units\n          if (x - 1 > 0) {\n            map[pos].insert(x - 1);\n          }\n          map[pos].insert(x);\n          map[pos].insert(x + 1);\n        }\n      }\n    }\n\n    return false;\n  }\n};\n")))),(0,r.kt)("h2",{id:"approach-2-dynamic-programming"},"Approach 2: Dynamic Programming"),(0,r.kt)("p",null,"  We apply Recursion + Memoization to find out the solution. There are three possible recursion call for $k-1$, $k$, $k+1$ moves.",(0,r.kt)("br",{parentName:"p"}),"\n","There are some base condtions, we have to facus on "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"if move k is less then zero, then we can not make a jump at that position."),(0,r.kt)("li",{parentName:"ul"},"Now, we have to find that whatever $move$ $(stones","[idx-1]"," + k)$ that has been made is present in our $stones$ array or not"),(0,r.kt)("li",{parentName:"ul"},"Also we are answer in our dp and if $dp","[idx][k]","!=-1$, it means our answer is already present in dp"),(0,r.kt)("li",{parentName:"ul"},"Now, final base condition will check if we reach last position or not  ")),(0,r.kt)("p",null,"Time Complexity is $O(n ",(0,r.kt)("em",{parentName:"p"}," n)$, where $n$ is the length of the $stones$ array.",(0,r.kt)("br",{parentName:"em"}),"Space Complexity is $O(n ")," n)$"),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(d,{name:"@Kavita613",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n public:\n  // Create Globally 2d dp array\n  int dp[2002][2002];\n\n  bool solve(int idx, int k, vector<int>& stones, unordered_map<int, int>& m) {\n    // k is number of moves\n    if (k <= 0) return false;\n\n    // checking k + stones[idx - 1] is available position in our stones array or not\n    if (m.find(k + stones[idx - 1]) == m.end()) {\n      return false;\n    } else {\n      idx = m[k + stones[idx - 1]];\n    }\n\n    if (dp[idx][k] != -1) {\n      return dp[idx][k];\n    }\n\n    // when we reach at end of the positions we will return true\n    if (idx == stones.size() - 1) {\n      return true;\n    }\n    // calling recursive function for k-1, k, k+1 moves\n    dp[idx][k] = solve(idx + 1, k - 1, stones, m) ||\n                 solve(idx + 1, k, stones, m) ||\n                 solve(idx + 1, k + 1, stones, m);\n\n    return dp[idx][k];\n  }\n\n  bool canCross(vector<int>& stones) {\n    // create unordered_map to store position of stone and index\n    unordered_map<int, int> m;\n\n    // intializing dp\n    memset(dp, -1, sizeof(dp));\n\n    // intializing map\n    for (int i = 0; i < stones.size(); i++) {\n      m.insert({stones[i], i});\n    }\n    // stones[1] must be 1 because at position zero we one move which is one\n    if (stones[1] != 1) {\n      return false;\n    }\n    // calling recursive function, passing index 1 and at index privous move is\n    // one\n    return solve(1, 1, stones, m);\n  }\n};\n")))))}k.isMDXComponent=!0}}]);