"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[67559],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=c(t),m=o,h=s["".concat(u,".").concat(m)]||s[m]||d[m]||i;return t?r.createElement(h,a(a({ref:n},l),{},{components:t})):r.createElement(h,a({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=s;var p={};for(var u in n)hasOwnProperty.call(n,u)&&(p[u]=n[u]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},4375:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return u},default:function(){return b},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return d}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),a=["components"],p={description:"Author: @wingkwong | https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/",tags:["Depth-First Search","Breadth-First Search","Union Find","Graph"]},u="0323 - Number of Connected Components in an Undirected Graph (Medium)",c={unversionedId:"0300-0399/number-of-connected-components-in-an-undirected-graph-medium",id:"0300-0399/number-of-connected-components-in-an-undirected-graph-medium",title:"0323 - Number of Connected Components in an Undirected Graph (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/",source:"@site/solutions/0300-0399/0323-number-of-connected-components-in-an-undirected-graph-medium.md",sourceDirName:"0300-0399",slug:"/0300-0399/number-of-connected-components-in-an-undirected-graph-medium",permalink:"/solutions/0300-0399/number-of-connected-components-in-an-undirected-graph-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0300-0399/0323-number-of-connected-components-in-an-undirected-graph-medium.md",tags:[{label:"Depth-First Search",permalink:"/solutions/tags/depth-first-search"},{label:"Breadth-First Search",permalink:"/solutions/tags/breadth-first-search"},{label:"Union Find",permalink:"/solutions/tags/union-find"},{label:"Graph",permalink:"/solutions/tags/graph"}],version:"current",sidebarPosition:323,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/",tags:["Depth-First Search","Breadth-First Search","Union Find","Graph"]},sidebar:"tutorialSidebar",previous:{title:"0322 - Coin Change (Medium)",permalink:"/solutions/0300-0399/coin-change-medium"},next:{title:"0327 - Count of Range Sum (Hard)",permalink:"/solutions/0300-0399/count-of-range-sum-hard"}},l={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DSU",id:"approach-1-dsu",level:2}],s=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},m=s("Tabs"),h=s("TabItem"),f=s("SolutionAuthor"),g={toc:d};function b(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0323---number-of-connected-components-in-an-undirected-graph-medium"},"0323 - Number of Connected Components in an Undirected Graph (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/"},"https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You have a graph of ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," nodes. You are given an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," and an array ",(0,i.kt)("inlineCode",{parentName:"p"},"edges")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"edges[i] = [ai, bi]")," indicates that there is an edge between ",(0,i.kt)("inlineCode",{parentName:"p"},"ai")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"bi")," in the graph."),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the number of connected components in the graph"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: n = 5, edges = [[0,1],[1,2],[3,4]]\nOutput: 2\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]\nOutput: 1\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= n <= 2000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= edges.length <= 5000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"edges[i].length == 2")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= ai <= bi < n")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ai != bi")),(0,i.kt)("li",{parentName:"ul"},"There are no repeated edges.")),(0,i.kt)("h2",{id:"approach-1-dsu"},"Approach 1: DSU"),(0,i.kt)("p",null,"Eventually the connected components would belong to its own group. We can use DSU to unite those nodes and count how many groups at the end. See ",(0,i.kt)("a",{parentName:"p",href:"../../tutorials/graph-theory/disjoint-set-union"},"Disjoint Set Union (DSU)")," for basic understanding."),(0,i.kt)(m,{mdxType:"Tabs"},(0,i.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class dsu {\n public:\n  vector<int> root, rank;\n  int n;\n  int cnt;\n\n  dsu(int _n) : n(_n) {\n    root.resize(n);\n    rank.resize(n);\n    for(int i = 0; i < n; i++) {\n        root[i] = i;\n        rank[i] = 1;\n    }\n    cnt = n;\n  }\n\n  inline int getCount() { return cnt; }\n\n  inline int get(int x) { return (x == root[x] ? x : (root[x] = get(root[x]))); }\n\n  inline bool unite(int x, int y) {\n    x = get(x);\n    y = get(y);\n    if (x != y) {\n        if (rank[x] > rank[y]) {\n            root[y] = x;\n        } else if (rank[x] < rank[y]) {\n            root[x] = y;\n        } else {\n            root[y] = x;\n            rank[x] += 1;\n        }\n        cnt--;\n      return true;\n    }\n    return false;\n  }\n};\n\nclass Solution {\npublic:\n    int countComponents(int n, vector<vector<int>>& edges) {\n        // init dsu\n        dsu d = dsu(n);\n        // unite each node\n        for (auto x: edges) d.unite(x[0], x[1]);\n        // return the number of connected components\n        return d.cnt;\n    }\n};\n")))))}b.isMDXComponent=!0}}]);