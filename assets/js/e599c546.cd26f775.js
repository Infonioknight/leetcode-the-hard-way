"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[77481],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var h=a.createContext({}),m=function(e){var t=a.useContext(h),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(h.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,h=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=m(n),u=r,d=s["".concat(h,".").concat(u)]||s[u]||c[u]||i;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var h in t)hasOwnProperty.call(t,h)&&(l[h]=t[h]);l.originalType=e,l[s]="string"==typeof e?e:r,o[1]=l;for(var m=2;m<i;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},13974:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>w,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var a=n(87462),r=(n(67294),n(3905));const i={description:"Author: @wingkwong, @ganajayant, @radojicic23 | https://leetcode.com/problems/container-with-most-water/"},o="0011 - Container With Most Water (Medium)",l={unversionedId:"0000-0099/container-with-most-water-medium",id:"0000-0099/container-with-most-water-medium",title:"0011 - Container With Most Water (Medium)",description:"Author: @wingkwong, @ganajayant, @radojicic23 | https://leetcode.com/problems/container-with-most-water/",source:"@site/solutions/0000-0099/0011-container-with-most-water-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/container-with-most-water-medium",permalink:"/solutions/0000-0099/container-with-most-water-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0011-container-with-most-water-medium.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{description:"Author: @wingkwong, @ganajayant, @radojicic23 | https://leetcode.com/problems/container-with-most-water/"},sidebar:"tutorialSidebar",previous:{title:"0010 - Regular Expression Matching (Hard)",permalink:"/solutions/0000-0099/regular-expression-matching-hard"},next:{title:"0012 - Integer to Roman (Medium)",permalink:"/solutions/0000-0099/integer-to-roman-medium"}},h={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two Pointers",id:"approach-1-two-pointers",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},s=p("Tabs"),c=p("TabItem"),u=p("SolutionAuthor"),d={toc:m},g="wrapper";function w(e){let{components:t,...n}=e;return(0,r.kt)(g,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0011---container-with-most-water-medium"},"0011 - Container With Most Water (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/container-with-most-water/"},"https://leetcode.com/problems/container-with-most-water/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given an integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," of length ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),". There are ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," vertical lines drawn such that the two endpoints of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," line are ",(0,r.kt)("inlineCode",{parentName:"p"},"(i, 0)")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"(i, height[i])"),"."),(0,r.kt)("p",null,"Find two lines that together with the x-axis form a container, such that the container contains the most water."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the maximum amount of water a container can store"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Notice")," that you may not slant the container."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: height = [1,1]\nOutput: 1\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"n == height.length")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"2 <= n <= 10^5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= height[i] <= 10^4"))),(0,r.kt)("h2",{id:"approach-1-two-pointers"},"Approach 1: Two Pointers"),(0,r.kt)("p",null,"We know that the area is $$width * height$$. Given two lines with different heights, we should only take the minimum one and the width is simply their distance. We use two pointers to track the lines, every time we calculate the area and move either one line. If the left line is shorter, then move the left one because we want to keep the maximum one, and vice versa."),(0,r.kt)(s,{mdxType:"Tabs"},(0,r.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        int ans = 0, l = 0, r = height.size() - 1;\n        while (l < r) {\n            // calculate the current area\n            ans = max(ans, min(height[l], height[r]) * (r - l));\n            // keep the max one and move the min one\n            if (height[l] < height[r]) l++;\n            else r--;\n        }\n        return ans;\n    }\n};\n"))),(0,r.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(u,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int maxArea(int[] height) {\n        int max = 0;\n        int i = 0;\n        int j = height.length - 1;\n        while (i < j) {\n            int leasth = Math.min(height[i], height[j]);\n            int width = (j - i);\n            if (max < leasth * width) {\n                max = leasth * width;\n            }\n            if (height[i] > height[j]) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n        return max;\n    }\n}\n"))),(0,r.kt)(c,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)(u,{name:"@MithunPrabhu777",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const maxArea = (height) => {\n    let [left, right, max] = [0, height.length - 1, 0];\n\n    while (left < right) {\n        max = Math.max(max, Math.min(height[left], height[right]) * (right - left));\n        if (height[right] > height[left]) {\n            left += 1;\n        } else {\n            right -= 1;\n        }\n    }\n\n    return max;\n};\n"))),(0,r.kt)(c,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(u,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def maxArea(height):\n    res = 0  \n    l, r = 0, len(height) - 1 \n\n    while l < r:\n        area = (r - l) * min(height[r], height[l])\n        res = max(res, area)\n        \n        if height[l] < height[r]: \n            l += 1 \n        else: \n            r -= 1\n    \n    return res\n")))))}w.isMDXComponent=!0}}]);