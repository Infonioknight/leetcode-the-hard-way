"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[40991],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},65633:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/longest-chunked-palindrome-decomposition/"},i="1147 - Longest Chunked Palindrome Decomposition (Hard)",l={unversionedId:"1100-1199/longest-chunked-palindrome-decomposition-hard",id:"1100-1199/longest-chunked-palindrome-decomposition-hard",title:"1147 - Longest Chunked Palindrome Decomposition (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/longest-chunked-palindrome-decomposition/",source:"@site/solutions/1100-1199/1147-longest-chunked-palindrome-decomposition-hard.md",sourceDirName:"1100-1199",slug:"/1100-1199/longest-chunked-palindrome-decomposition-hard",permalink:"/solutions/1100-1199/longest-chunked-palindrome-decomposition-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1100-1199/1147-longest-chunked-palindrome-decomposition-hard.md",tags:[],version:"current",sidebarPosition:1147,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/longest-chunked-palindrome-decomposition/"},sidebar:"tutorialSidebar",previous:{title:"1143 - Longest Common Subsequence (Medium)",permalink:"/solutions/1100-1199/longest-common-subsequence-medium"},next:{title:"1544 - Make The String Great (Easy)",permalink:"/solutions/1100-1199/make-the-string-great-easy"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Greedy",id:"approach-1-greedy",level:2}],c=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var u;const d={toc:s},m="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1147---longest-chunked-palindrome-decomposition-hard"},"1147 - Longest Chunked Palindrome Decomposition (Hard)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-chunked-palindrome-decomposition/"},"https://leetcode.com/problems/longest-chunked-palindrome-decomposition/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given a string ",(0,o.kt)("inlineCode",{parentName:"p"},"text"),". You should split it to k substrings ",(0,o.kt)("inlineCode",{parentName:"p"},"(subtext1, subtext2, ..., subtextk)")," such that:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"subtexti")," is a ",(0,o.kt)("strong",{parentName:"li"},"non-empty")," string."),(0,o.kt)("li",{parentName:"ul"},"The concatenation of all the substrings is equal to ",(0,o.kt)("inlineCode",{parentName:"li"},"text")," (i.e., ",(0,o.kt)("inlineCode",{parentName:"li"},"subtext1 + subtext2 + ... + subtextk == text"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"subtexti == subtextk - i + 1")," for all valid values of ",(0,o.kt)("inlineCode",{parentName:"li"},"i")," (i.e., ",(0,o.kt)("inlineCode",{parentName:"li"},"1 <= i <= k"),").")),(0,o.kt)("p",null,"Return the largest possible value of ",(0,o.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: text = "ghiabcdefhelloadamhelloabcdefghi"\nOutput: 7\nExplanation: We can split the string on "(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)".\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: text = "merchant"\nOutput: 1\nExplanation: We can split the string on "(merchant)".\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: text = "antaprezatepzapreanta"\nOutput: 11\nExplanation: We can split the string on "(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)".\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= text.length <= 1000")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"text")," consists only of lowercase English characters.")),(0,o.kt)("h2",{id:"approach-1-greedy"},"Approach 1: Greedy"),(0,o.kt)("p",null,"Build the subtext from the left $$l = l + text","[i]","$$ and from the right $$r = text","[n - 1 - i]"," + r$$. If at a point they are same, then increase the answer by $$1$$ and reset both $$l$$ and $$r$$."),(0,o.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    int longestDecomposition(string text) {\n        int n = text.size(), ans = 0;\n        string l, r;\n        for (int i = 0; i < n; i++) {\n            // build subtect from the left\n            l = l + text[i];\n            // build subtect from the right\n            r = text[n - 1 - i] + r;\n            // if they are same, \n            if (l == r) {\n                // then increase answer by 1\n                ans += 1;\n                // reset l & r\n                l = r = "";\n            }\n        }\n        return ans;\n    }\n};\n')))}h.isMDXComponent=!0}}]);