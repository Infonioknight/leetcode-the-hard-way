"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[15906],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},60464:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>b,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @jessicaribeiroalves | https://leetcode.com/problems/determine-if-two-strings-are-close/"},i="1657 - Determine If Two Strings Are Close (Medium)",s={unversionedId:"1600-1699/define-if-two-strings-are-close-medium",id:"1600-1699/define-if-two-strings-are-close-medium",title:"1657 - Determine If Two Strings Are Close (Medium)",description:"Author: @jessicaribeiroalves | https://leetcode.com/problems/determine-if-two-strings-are-close/",source:"@site/solutions/1600-1699/1657-define-if-two-strings-are-close-medium.md",sourceDirName:"1600-1699",slug:"/1600-1699/define-if-two-strings-are-close-medium",permalink:"/solutions/1600-1699/define-if-two-strings-are-close-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1600-1699/1657-define-if-two-strings-are-close-medium.md",tags:[],version:"current",sidebarPosition:1657,frontMatter:{description:"Author: @jessicaribeiroalves | https://leetcode.com/problems/determine-if-two-strings-are-close/"},sidebar:"tutorialSidebar",previous:{title:"1639 - Number of Ways to Form a Target String Given a Dictionary (Hard)",permalink:"/solutions/1600-1699/number-of-ways-to-form-a-target-string-given-a-dictionary-hard"},next:{title:"1662 - Check If Two String Arrays are Equivalent (Easy)",permalink:"/solutions/1600-1699/check-if-two-string-arrays-are-equivalent-easy"}},l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Comparing the strings (length, frequency and existing characters)",id:"approach-1-comparing-the-strings-length-frequency-and-existing-characters",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},d=p("Tabs"),m=p("TabItem"),u=p("SolutionAuthor"),h={toc:c},f="wrapper";function b(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1657---determine-if-two-strings-are-close-medium"},"1657 - Determine If Two Strings Are Close (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/determine-if-two-strings-are-close/"},"https://leetcode.com/problems/determine-if-two-strings-are-close/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Two strings are considered close if you can attain one from the other using the following operations:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Operation 1: Swap any two existing characters.\nFor example, ",(0,a.kt)("inlineCode",{parentName:"li"},"abcde -> aecdb"),"."),(0,a.kt)("li",{parentName:"ul"},"Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.\nFor example, ",(0,a.kt)("inlineCode",{parentName:"li"},"aacabb -> bbcbaa")," (all ",(0,a.kt)("inlineCode",{parentName:"li"},"a's")," turn into ",(0,a.kt)("inlineCode",{parentName:"li"},"b's"),", and all ",(0,a.kt)("inlineCode",{parentName:"li"},"b's")," turn into ",(0,a.kt)("inlineCode",{parentName:"li"},"a's"),")\nYou can use the operations on either string as many times as necessary.")),(0,a.kt)("p",null,"Given two strings, ",(0,a.kt)("inlineCode",{parentName:"p"},"word1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"word2"),", return ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"word1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"word2")," are close, and ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},'Input: word1 = "abc", word2 = "bca"\nOutput: true\nExplanation: You can attain word2 from word1 in 2 operations.\nApply Operation 1: "abc" -> "acb"\nApply Operation 1: "acb" -> "bca"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},'Input: word1 = "a", word2 = "aa"\nOutput: false\nExplanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},'Input: word1 = "cabbba", word2 = "abbccc"\nOutput: true\nExplanation: You can attain word2 from word1 in 3 operations.\nApply Operation 1: "cabbba" -> "caabbb"\nApply Operation 2: "caabbb" -> "baaccc"\nApply Operation 2: "baaccc" -> "abbccc"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= word1.length, word2.length <= 105")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"word1")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"word2")," contain only lowercase English letters.")),(0,a.kt)("h2",{id:"approach-1-comparing-the-strings-length-frequency-and-existing-characters"},"Approach 1: Comparing the strings (length, frequency and existing characters)"),(0,a.kt)("p",null,"A possible solution can be based on three main checks:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Making sure both strings $word1$ and $word2$ have the same length as neither operation would work correctly if they had different lengths.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Checking if the occurrences of each characters frequency are the same for both strings. For example, $word1 = 'aabbcccc'$ and $word2 = 'aabcbcaa'$ have the same number of occurrences in their character frequencies or, in other words, the same frequency of frequencies. So the characters frequency of $word1$ would be {'c': 4, 'a': 2, 'b': 2} and the frequency of its frequencies would be {2: 2, 4: 1}. For $word2$ the characters frequency would be {'a': 4, 'b': 2, 'c': 2} and its frequency of frequencies would be the same as $word1$, { 2: 2, 4: 1 }.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The last one is checking if all existing characters in one string also exist in the other string. For example, $word1 = 'aabbzzzz'$ and $word2 = 'aabcbcaa'$ attend the second check related to the characters frequency. However the strings are not composed of the same characters ('z' doesn't exist in $word2$ just as 'c' doesn't exist in $word1$) and this is something that none of the operations described in the problem statement can solve."))),(0,a.kt)(d,{mdxType:"Tabs"},(0,a.kt)(m,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(u,{name:"@jessicaribeiroalves",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"from collections import Counter\n\nclass Solution:\n    def closeStrings(self, word1: str, word2: str) -> bool:        \n        return (\n            len(word1) == len(word2) and\n            Counter(Counter(word1).values()) == Counter(Counter(word2).values()) and\n            set([*word1]) == set([*word2])\n        )\n")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Time Complexity: $O(n)$")),(0,a.kt)("p",null,"The time complexity for this solution is $O(n)$ as the algorithm execution time increases or decreases according to the strings length."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Space Complexity: $O(n)$")),(0,a.kt)("p",null,"The space complexity for this solution is also $O(n)$."))}b.isMDXComponent=!0}}]);