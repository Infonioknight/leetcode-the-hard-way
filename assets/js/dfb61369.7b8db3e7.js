"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[13750],{3905:function(e,t,r){r.d(t,{Zo:function(){return f},kt:function(){return m}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},f=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,f=u(e,["components","mdxType","originalType","parentName"]),c=p(r),m=i,d=c["".concat(l,".").concat(m)]||c[m]||s[m]||a;return r?n.createElement(d,o(o({ref:t},f),{},{components:r})):n.createElement(d,o({ref:t},f))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=c;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:i,o[1]=u;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},3525:function(e,t,r){r.r(t),r.d(t,{assets:function(){return f},contentTitle:function(){return l},default:function(){return y},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return s}});var n=r(87462),i=r(63366),a=(r(67294),r(3905)),o=["components"],u={title:"Prefix Sum",description:"",hide_table_of_contents:!1,keywords:["leetcode","template","prefix sum"]},l=void 0,p={unversionedId:"prefix-sum",id:"prefix-sum",title:"Prefix Sum",description:"",source:"@site/templates/prefix-sum.md",sourceDirName:".",slug:"/prefix-sum",permalink:"/templates/prefix-sum",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/templates/prefix-sum.md",tags:[],version:"current",frontMatter:{title:"Prefix Sum",description:"",hide_table_of_contents:!1,keywords:["leetcode","template","prefix sum"]},sidebar:"tutorialSidebar",previous:{title:"Ordered Set and GNU C++ PBDS",permalink:"/templates/ordered-set"},next:{title:"Segment Tree",permalink:"/templates/segment-tree"}},f={},s=[{value:"Prefix Sum - Starting with first element",id:"prefix-sum---starting-with-first-element",level:3},{value:"Prefix Sum - Starting with 0",id:"prefix-sum---starting-with-0",level:3},{value:"Suffix Sum - Starting with last element",id:"suffix-sum---starting-with-last-element",level:3},{value:"Suffix Sum - Starting with 0",id:"suffix-sum---starting-with-0",level:3}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)}},m=c("Tabs"),d=c("TabItem"),g={toc:s};function y(e){var t=e.components,r=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"prefix-sum---starting-with-first-element"},"Prefix Sum - Starting with first element"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> pref(n);\npref[0] = a[0];\nfor (int i = 1; i < n; i++) {\n    pref[i] = pref[i - 1] + a[i];\n}\n")))),(0,a.kt)("h3",{id:"prefix-sum---starting-with-0"},"Prefix Sum - Starting with 0"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> pref(n + 1);\nfor (int i = 0; i < n; i++) {\n    pref[i + 1] = pref[i] + a[i];\n}\n")))),(0,a.kt)("h3",{id:"suffix-sum---starting-with-last-element"},"Suffix Sum - Starting with last element"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> suff(n);\nsuff[n - 1] = a[n - 1];\nfor (int i = n - 2; i >= 0; i--) {\n    suff[i] = suff[i + 1] + a[i];\n}\n")))),(0,a.kt)("h3",{id:"suffix-sum---starting-with-0"},"Suffix Sum - Starting with 0"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> suff(n + 1);\nfor (int i = n - 1; i >= 0; i--) {\n    suff[i - 1] = suff[i] + a[i];\n}\n")))))}y.isMDXComponent=!0}}]);