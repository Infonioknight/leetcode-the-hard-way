"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[35713],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:i,a[1]=p;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},73216:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(87462),i=(n(67294),n(3905));const o={description:"Author: @heiheihang, @wingkwong | https://leetcode.com/problems/counting-words-with-a-given-prefix/"},a="2185 - Counting Words With a Given Prefix (Easy)",p={unversionedId:"2100-2199/counting-words-with-a-given-prefix-easy",id:"2100-2199/counting-words-with-a-given-prefix-easy",title:"2185 - Counting Words With a Given Prefix (Easy)",description:"Author: @heiheihang, @wingkwong | https://leetcode.com/problems/counting-words-with-a-given-prefix/",source:"@site/solutions/2100-2199/2185-counting-words-with-a-given-prefix-easy.md",sourceDirName:"2100-2199",slug:"/2100-2199/counting-words-with-a-given-prefix-easy",permalink:"/solutions/2100-2199/counting-words-with-a-given-prefix-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2185-counting-words-with-a-given-prefix-easy.md",tags:[],version:"current",sidebarPosition:2185,frontMatter:{description:"Author: @heiheihang, @wingkwong | https://leetcode.com/problems/counting-words-with-a-given-prefix/"},sidebar:"tutorialSidebar",previous:{title:"2183 -  Count Array Pairs Divisible by K (Hard)",permalink:"/solutions/2100-2199/count-array-pairs-divisible-by-k-hard"},next:{title:"2186 - Minimum Number of Steps to Make Two Strings Anagram II (Medium)",permalink:"/solutions/2100-2199/minimum-number-of-steps-to-make-two-strings-anagram-ii-medium"}},s={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Iteration",id:"approach-1-iteration",level:2}],c=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var u;const d={toc:l},m="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2185---counting-words-with-a-given-prefix-easy"},"2185 - Counting Words With a Given Prefix (Easy)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/counting-words-with-a-given-prefix/"},"https://leetcode.com/problems/counting-words-with-a-given-prefix/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given an array of strings ",(0,i.kt)("inlineCode",{parentName:"p"},"words")," and a string ",(0,i.kt)("inlineCode",{parentName:"p"},"pref"),"."),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the number of strings in")," ",(0,i.kt)("inlineCode",{parentName:"p"},"words")," ",(0,i.kt)("em",{parentName:"p"},"that contain")," ",(0,i.kt)("inlineCode",{parentName:"p"},"pref")," ",(0,i.kt)("em",{parentName:"p"},"as a ",(0,i.kt)("strong",{parentName:"em"},"prefix")),"."),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"prefix")," of a string ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," is any leading contiguous substring of ",(0,i.kt)("inlineCode",{parentName:"p"},"s"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: words = ["pay","attention","practice","attend"], pref = "at"\nOutput: 2\nExplanation: The 2 strings that contain "at" as a prefix are: "attention" and "attend".\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: words = ["leetcode","win","loops","success"], pref = "code"\nOutput: 0\nExplanation: There are no strings that contain "code" as a prefix.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= words.length <= 100")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= words[i].length, pref.length <= 100")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"words[i]")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"pref")," consist of lowercase English letters.")),(0,i.kt)("h2",{id:"approach-1-iteration"},"Approach 1: Iteration"),(0,i.kt)("p",null,"We can define the length of the prefix string to be ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," , then we need to grab the first ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," characters of each word and compare their substrings. In the case the word has length less than ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", we skip the word."),(0,i.kt)(c,{name:"@heiheihang",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def prefixCount(self, words: List[str], pref: str) -> int:\n        \n        #define the length of prefix\n        n = len(pref)\n        \n        res = 0\n        \n        #iterate each word\n        for s in words:\n        \n            #cannot get first n characters if it is shorter than n, so skip\n            if( len(s) < n):\n                continue\n            #compare the first n characters\n            if(s[:n] == pref):\n                res += 1\n                \n        return res\n")),(0,i.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int prefixCount(vector<string>& words, string pref) {\n        int ans = 0;\n        // string::find returns the first position \n        // of the first character of the first match\n        for (auto s: words) ans += s.find(pref) == 0;\n        return ans;\n    }\n};\n")))}f.isMDXComponent=!0}}]);