"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[57153],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,c=m["".concat(s,".").concat(d)]||m[d]||h[d]||i;return n?a.createElement(c,o(o({ref:t},u),{},{components:n})):a.createElement(c,o({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},35379:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/find-substring-with-given-hash-value/"},o="2156 - Find Substring With Given Hash Value (Medium)",l={unversionedId:"2100-2199/find-substring-with-given-hash-value-medium",id:"2100-2199/find-substring-with-given-hash-value-medium",title:"2156 - Find Substring With Given Hash Value (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/find-substring-with-given-hash-value/",source:"@site/solutions/2100-2199/2156-find-substring-with-given-hash-value-medium.md",sourceDirName:"2100-2199",slug:"/2100-2199/find-substring-with-given-hash-value-medium",permalink:"/solutions/2100-2199/find-substring-with-given-hash-value-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2156-find-substring-with-given-hash-value-medium.md",tags:[],version:"current",sidebarPosition:2156,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-substring-with-given-hash-value/"},sidebar:"tutorialSidebar",previous:{title:"2155 - All Divisions With the Highest Score of a Binary Array (Medium)",permalink:"/solutions/2100-2199/all-divisions-with-the-highest-score-of-a-binary-array-medium"},next:{title:"2160 - Minimum Sum of Four Digit Number After Splitting Digits (Easy)",permalink:"/solutions/2100-2199/minimum-sum-of-four-digit-number-after-splitting-digits-easy"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Reversed <strong>Rabin-Karp</strong>",id:"approach-1-reversed-rabin-karp",level:2}],u=(m="SolutionAuthor",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const h={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2156---find-substring-with-given-hash-value-medium"},"2156 - Find Substring With Given Hash Value (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-substring-with-given-hash-value/"},"https://leetcode.com/problems/find-substring-with-given-hash-value/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"The hash of a ",(0,r.kt)("strong",{parentName:"p"},"0-indexed")," string ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," of length ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),", given integers ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"m"),", is computed using the following function:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"hash(s, p, m) = (val(s[0]) * p^0 + val(s[1]) * p^1 + ... + val(s[k-1]) * p^k-1) mod m"),"."),(0,r.kt)("p",null,"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"val(s[i])")," represents the index of ",(0,r.kt)("inlineCode",{parentName:"p"},"s[i]")," in the alphabet from ",(0,r.kt)("inlineCode",{parentName:"p"},"val('a') = 1")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"val('z') = 26"),"."),(0,r.kt)("p",null,"You are given a string ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," and the integers ",(0,r.kt)("inlineCode",{parentName:"p"},"power"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"modulo"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"hashValue.")," Return ",(0,r.kt)("inlineCode",{parentName:"p"},"sub"),", ",(0,r.kt)("em",{parentName:"p"},"the ",(0,r.kt)("strong",{parentName:"em"},"first"),"  ",(0,r.kt)("strong",{parentName:"em"},"substring")," of")," ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," ",(0,r.kt)("em",{parentName:"p"},"of length")," ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," ",(0,r.kt)("em",{parentName:"p"},"such that")," ",(0,r.kt)("inlineCode",{parentName:"p"},"hash(sub, power, modulo) == hashValue"),"."),(0,r.kt)("p",null,"The test cases will be generated such that an answer always ",(0,r.kt)("strong",{parentName:"p"},"exists"),"."),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"substring")," is a contiguous non-empty sequence of characters within a string."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "leetcode", power = 7, modulo = 20, k = 2, hashValue = 0\nOutput: "ee"\nExplanation: The hash of "ee" can be computed to be hash("ee", 7, 20) = (5 * 1 + 5 * 7) mod 20 = 40 mod 20 = 0. \n"ee" is the first substring of length 2 with hashValue 0. Hence, we return "ee".\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "fbxzaad", power = 31, modulo = 100, k = 3, hashValue = 32\nOutput: "fbx"\nExplanation: The hash of "fbx" can be computed to be hash("fbx", 31, 100) = (6 * 1 + 2 * 31 + 24 * 312) mod 100 = 23132 mod 100 = 32. \nThe hash of "bxz" can be computed to be hash("bxz", 31, 100) = (2 * 1 + 24 * 31 + 26 * 312) mod 100 = 25732 mod 100 = 32. \n"fbx" is the first substring of length 3 with hashValue 32. Hence, we return "fbx".\nNote that "bxz" also has a hash of 32 but it appears later than "fbx".\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= k <= s.length <= 2 * 10^4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= power, modulo <= 10^9")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= hashValue < modulo")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s")," consists of lowercase English letters only."),(0,r.kt)("li",{parentName:"ul"},"The test cases are generated such that an answer always ",(0,r.kt)("strong",{parentName:"li"},"exists"),".")),(0,r.kt)("h2",{id:"approach-1-reversed-rabin-karp"},"Approach 1: Reversed ",(0,r.kt)("strong",{parentName:"h2"},"Rabin-Karp")),(0,r.kt)("p",null,"In Rabin-Karp Rolling Hash, we know that"),(0,r.kt)("p",null,"$$\nH = s",(0,r.kt)("em",{parentName:"p"},"0",(0,r.kt)("em",{parentName:"em"},"p^{k-1}+s_1"),"p^{k-2}+...+s"),"{k-1}*p^{0}\n$$"),(0,r.kt)("p",null,"In this question, we got the following function"),(0,r.kt)("p",null,"$$\nH = (s",(0,r.kt)("em",{parentName:"p"},"0",(0,r.kt)("em",{parentName:"em"},"p^{0}+s_1"),"p^{1}+...+s"),"{k-1}*p^{k-1}) \\mod m\n$$"),(0,r.kt)("p",null,"Given a substring problem with a fixed length $$k$$, we may think of Sliding Window. However, if we do it normally from the left to right, it may lead to some problems. For example, if the string is ",(0,r.kt)("inlineCode",{parentName:"p"},"fbxzaad")," and $$k$$ is ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),". Then $$H('fbx') = (f ",(0,r.kt)("em",{parentName:"p"}," p^0 + b ")," p^1 + c ",(0,r.kt)("em",{parentName:"p"}," p^2) \\mod m$$. If we shift the window to the right by 1 character, we have to remove the first character that is out of the window. In order to get $$H('bxz') = (b ")," p^0 + c ",(0,r.kt)("em",{parentName:"p"}," p^1 + d ")," p^2) \\mod m$$, we need to subtract $$f$$ and then divide the whole sum by $$p$$ so that we can reduce each exponent by 1 for other terms. At the end, we add the $$d ",(0,r.kt)("em",{parentName:"p"}," p^2$$ to the new window. Division may cause problems with modulo. A workaround is to do it in a reversed order so that we just need to add $$f$$ and subtract $$d ")," p^3$$."),(0,r.kt)("p",null,"We can precompute the hash backwards $$h","[i]","$$ and check all possible starting point $$i$$ of the window. Generally we can obtain the hash between $$","[i .. i + k]","$$ by $$h","[i]"," - h","[i - k]"," * p^k$$. We need to take care of the modulo as well. To get $$p ^ k$$efficiently, we apply ",(0,r.kt)("a",{parentName:"p",href:"../../tutorials/math/number-theory/binary-exponentiation"},"Binary Exponentiation")," with modulo."),(0,r.kt)("p",null,"You can also pre-calculate it in the following approach."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<long long> p(n + 1);\np[0] = 1;\nfor (int i = 1; i < n + 1; i++) p[i] = (p[i - 1] * 1LL * power) % modulo;\n// do something with p[k]\n")),(0,r.kt)("p",null,"$$target$$ is possible to be negative so we need to do the trick$$(target + modulo) \\mod modulo$$ before comparing with the hashValue."),(0,r.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    long long modpow(long long base, long long exp, long long mod) {\n      base %= mod;\n      long long res = 1;\n      while (exp > 0) {\n        if (exp & 1) res = (res * base) % mod;\n        base = (base * base) % mod;\n        exp >>= 1;\n      }\n      return res;\n    }\n    \n    string subStrHash(string s, int power, int modulo, int k, int hashValue) {\n        int n = s.size();\n        vector<long long> h(n + 1);\n        for (int i = n - 1; i >= 0; i--) h[i] = (h[i + 1] * power + (s[i] - 'a' + 1)) % modulo;\n        for (int i = 0; i + k - 1 < n; i++) { \n            long long target = (h[i] - h[i + k] * modpow(power, k, modulo)) % modulo;\n            if((target + modulo) % modulo == hashValue){\n                return s.substr(i, k);\n            }\n        }\n        return s;\n    }\n};\n")))}c.isMDXComponent=!0}}]);