"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[14719],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var i=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=i.createContext({}),d=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=d(e.components);return i.createElement(o.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,s=e.originalType,o=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=d(n),c=l,g=m["".concat(o,".").concat(c)]||m[c]||p[c]||s;return n?i.createElement(g,r(r({ref:t},u),{},{components:n})):i.createElement(g,r({ref:t},u))}));function g(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var s=n.length,r=new Array(s);r[0]=c;var a={};for(var o in t)hasOwnProperty.call(t,o)&&(a[o]=t[o]);a.originalType=e,a[m]="string"==typeof e?e:l,r[1]=a;for(var d=2;d<s;d++)r[d]=n[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},39844:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=n(87462),l=(n(67294),n(3905));const s={description:"Author: @wingkwong, @rahulvarma5297, @radojicic23 | https://leetcode.com/problems/merge-k-sorted-lists/",tags:["Linked List","Divide and Conquer","Heap (Priority Queue)","Merge Sort"]},r="0023 - Merge k Sorted Lists (Hard)",a={unversionedId:"0000-0099/merge-k-sorted-lists-hard",id:"0000-0099/merge-k-sorted-lists-hard",title:"0023 - Merge k Sorted Lists (Hard)",description:"Author: @wingkwong, @rahulvarma5297, @radojicic23 | https://leetcode.com/problems/merge-k-sorted-lists/",source:"@site/solutions/0000-0099/0023-merge-k-sorted-lists-hard.md",sourceDirName:"0000-0099",slug:"/0000-0099/merge-k-sorted-lists-hard",permalink:"/solutions/0000-0099/merge-k-sorted-lists-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0023-merge-k-sorted-lists-hard.md",tags:[{label:"Linked List",permalink:"/solutions/tags/linked-list"},{label:"Divide and Conquer",permalink:"/solutions/tags/divide-and-conquer"},{label:"Heap (Priority Queue)",permalink:"/solutions/tags/heap-priority-queue"},{label:"Merge Sort",permalink:"/solutions/tags/merge-sort"}],version:"current",sidebarPosition:23,frontMatter:{description:"Author: @wingkwong, @rahulvarma5297, @radojicic23 | https://leetcode.com/problems/merge-k-sorted-lists/",tags:["Linked List","Divide and Conquer","Heap (Priority Queue)","Merge Sort"]},sidebar:"tutorialSidebar",previous:{title:"0022 - Generate Parentheses (Medium)",permalink:"/solutions/0000-0099/generate-parentheses-medium"},next:{title:"0024 - Swap Nodes in Pairs (Medium)",permalink:"/solutions/0000-0099/swap-nodes-in-pairs-medium"}},o={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Divide and Conquer",id:"approach-1-divide-and-conquer",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",t)},m=u("Tabs"),p=u("TabItem"),c=u("SolutionAuthor"),g={toc:d},k="wrapper";function h(e){let{components:t,...n}=e;return(0,l.kt)(k,(0,i.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"0023---merge-k-sorted-lists-hard"},"0023 - Merge k Sorted Lists (Hard)"),(0,l.kt)("h2",{id:"problem-link"},"Problem Link"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/merge-k-sorted-lists/"},"https://leetcode.com/problems/merge-k-sorted-lists/")),(0,l.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,l.kt)("p",null,"You are given an array of ",(0,l.kt)("inlineCode",{parentName:"p"},"k")," linked-lists ",(0,l.kt)("inlineCode",{parentName:"p"},"lists"),", each linked-list is sorted in ascending order."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Merge all the linked-lists into one sorted linked-list and return it.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example 1:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example 2:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: lists = []\nOutput: []\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example 3:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: lists = [[]]\nOutput: []\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constraints:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"k == lists.length")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"0 <= k <= 10^4")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"0 <= lists[i].length <= 500")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-10^4 <= lists[i][j] <= 10^4")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"lists[i]")," is sorted in ",(0,l.kt)("strong",{parentName:"li"},"ascending order"),"."),(0,l.kt)("li",{parentName:"ul"},"The sum of ",(0,l.kt)("inlineCode",{parentName:"li"},"lists[i].length")," won't exceed ",(0,l.kt)("inlineCode",{parentName:"li"},"10^4"),".")),(0,l.kt)("h2",{id:"approach-1-divide-and-conquer"},"Approach 1: Divide and Conquer"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"It is recommended to solve ",(0,l.kt)("a",{parentName:"p",href:"merge-two-sorted-lists-easy"},"0021 - Merge Two Sorted Lists (Easy)")," first.")),(0,l.kt)("p",null,"We can directly use the solution from ",(0,l.kt)("a",{parentName:"p",href:"merge-two-sorted-lists-easy"},"0021 - Merge Two Sorted Lists (Easy)")," to solve this problem because merging K sorted lists is same as merging two sorted lists $$log_2k$$ times."),(0,l.kt)("p",null,"The idea is to merge the $$k$$ lists into $$k / 2$$, then $$k / 4$$, $$k / 8$$ and so on. Therefore, we merge the pairs$$(0, 1), (2,3), (4,5),(6,7)$$, then $$(0, 2), (4,6)$$, then $$(0, 4)$$ and get the final result."),(0,l.kt)(m,{mdxType:"Tabs"},(0,l.kt)(p,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,l.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *mergeKLists(vector<ListNode*> &lists) {\n        if (lists.size() == 0) return nullptr;\n        while (lists.size() > 1) {\n            vector<ListNode *> nlists;\n            for (int i = 0; i < lists.size(); i += 2) {\n                ListNode* l = lists[i];\n                ListNode* r = i + 1 < lists.size() ? lists[i + 1] : nullptr;\n                ListNode* merged = mergeTwoLists(l, r);\n                nlists.push_back(merged);\n            }\n            lists = nlists;\n        }\n        return lists[0];\n    }\n\n    // Solution from 0021 - Merge Two Sorted Lists (Easy)\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        if (list1 == nullptr) return list2;\n        else if (list2 == nullptr) return list1;\n        else if (list1->val < list2->val) {\n            list1->next = mergeTwoLists(list1->next, list2);\n            return list1;\n        } else {\n            list2->next = mergeTwoLists(list2->next, list1);\n            return list2;\n        }\n    }\n};\n"))),(0,l.kt)(p,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)(c,{name:"@rahulvarma5297",mdxType:"SolutionAuthor"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        int len = lists.length;\n        if (len == 0) {\n            return null;\n        }\n\n        return mergeKLists(lists, 0, len - 1);\n    }\n\n    public ListNode mergeKLists(ListNode[] lists, int start, int end) {\n        if (end - start == 0) {\n            return lists[start];\n        }\n        if (end - start == 1) {\n            return mergeLists(lists[start], lists[end]);\n        }\n        int mid = start + ((end - start) / 2);\n        ListNode listA = mergeKLists(lists, start, mid);\n        ListNode listB = mergeKLists(lists, mid + 1, end);\n        return mergeLists(listA, listB);\n    }\n\n    public ListNode mergeLists(ListNode listA, ListNode listB) {\n        if (listA == null) {\n            return listB;\n        }\n        if (listB == null) {\n            return listA;\n        }\n        if (listA.val < listB.val) {\n            listA.next = mergeLists(listA.next, listB);\n            return listA;\n        } else {\n            listB.next = mergeLists(listA, listB.next);\n            return listB;\n        }\n    }\n}\n"))),(0,l.kt)(p,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)(c,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        # edgecases: if length is 0 and lists is None\n        if not lists or len(lists) == 0:\n            return None\n        # take pairs of LL and merge them each time and\n        # keep doing it until there is one LL remaining\n        while len(lists) > 1:\n            merged_lists = []\n            # iterate through each of these lists\n            for i in range(0, len(lists), 2):\n                l1 = lists[i]\n                # make sure if i + 1 is in bounds because l2 might be out of bound\n                # maybe we can have odd number of lists\n                l2 = lists[i + 1] if (i + 1) < len(lists) else None\n                # merge them together and add to merged lists\n                merged_lists.append(self.mergeLists(l1, l2))\n            # update lists variable\n            lists = merged_lists\n            # keep doing that until there is one list\n        return lists[0]\n\n    # solution from 0021 - Merge Two Sorted Lists (Easy)\n    def mergeLists(self, l1, l2):\n        dymmy = ListNode()\n        tail = dymmy\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n\n        if l1:\n            tail.next = l1\n        elif l2:\n            tail.next = l2\n\n        return dymmy.next\n"))),(0,l.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)(c,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode[]} lists\n * @return {ListNode}\n */\nvar mergeKLists = function (lists) {\n  if (!lists || lists.length == 0) return null;\n  while (lists.length > 1) {\n    let merged_lists = [];\n    for (i = 0; i < lists.length; i += 2) {\n      let l1 = lists[i];\n      let l2 = i + 1 < lists.length ? lists[i + 1] : null;\n      merged_lists.push(merge(l1, l2));\n    }\n    lists = merged_lists;\n  }\n  return lists[0];\n};\n\nvar merge = function (l1, l2) {\n  dummy = new ListNode();\n  tail = dummy;\n  while (l1 && l2) {\n    if (l1.val < l2.val) {\n      tail.next = l1;\n      l1 = l1.next;\n    } else {\n      tail.next = l2;\n      l2 = l2.next;\n    }\n    tail = tail.next;\n  }\n  if (l1) tail.next = l1;\n  if (l2) tail.next = l2;\n  return dummy.next;\n};\n")))))}h.isMDXComponent=!0}}]);