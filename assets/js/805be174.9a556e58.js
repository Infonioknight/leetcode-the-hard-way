"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[19507],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=r.createContext({}),p=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=i,d=u["".concat(m,".").concat(h)]||u[h]||c[h]||o;return n?r.createElement(d,a(a({ref:t},s),{},{components:n})):r.createElement(d,a({ref:t},s))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=h;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},12398:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/path-with-minimum-effort/"},a="1631 - Path With Minimum Effort (Medium)",l={unversionedId:"1600-1699/path-with-minimum-effort-medium",id:"1600-1699/path-with-minimum-effort-medium",title:"1631 - Path With Minimum Effort (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/path-with-minimum-effort/",source:"@site/solutions/1600-1699/1631-path-with-minimum-effort-medium.md",sourceDirName:"1600-1699",slug:"/1600-1699/path-with-minimum-effort-medium",permalink:"/solutions/1600-1699/path-with-minimum-effort-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1600-1699/1631-path-with-minimum-effort-medium.md",tags:[],version:"current",sidebarPosition:1631,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/path-with-minimum-effort/"},sidebar:"tutorialSidebar",previous:{title:"1626 - Best Team With No Conflicts (Medium)",permalink:"/solutions/1600-1699/best-team-with-no-conflicts-medium"},next:{title:"1633 - Smallest String With A Given Numeric Value (Medium)",permalink:"/solutions/1600-1699/smallest-string-with-a-given-numeric-value-medium"}},m={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS + Binary Search",id:"approach-1-dfs--binary-search",level:2}],s=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var u;const c={toc:p},h="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(h,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"1631---path-with-minimum-effort-medium"},"1631 - Path With Minimum Effort (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/path-with-minimum-effort/"},"https://leetcode.com/problems/path-with-minimum-effort/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are a hiker preparing for an upcoming hike. You are given ",(0,i.kt)("inlineCode",{parentName:"p"},"heights"),", a 2D array of size ",(0,i.kt)("inlineCode",{parentName:"p"},"rows x columns"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"heights[row][col]")," represents the height of cell ",(0,i.kt)("inlineCode",{parentName:"p"},"(row, col)"),". You are situated in the top-left cell, ",(0,i.kt)("inlineCode",{parentName:"p"},"(0, 0)"),", and you hope to travel to the bottom-right cell, ",(0,i.kt)("inlineCode",{parentName:"p"},"(rows-1, columns-1)")," (i.e., ",(0,i.kt)("strong",{parentName:"p"},"0-indexed"),"). You can move ",(0,i.kt)("strong",{parentName:"p"},"up"),", ",(0,i.kt)("strong",{parentName:"p"},"down"),", ",(0,i.kt)("strong",{parentName:"p"},"left"),", or ",(0,i.kt)("strong",{parentName:"p"},"right"),", and you wish to find a route that requires the minimum ",(0,i.kt)("strong",{parentName:"p"},"effort"),"."),(0,i.kt)("p",null,"A route's ",(0,i.kt)("strong",{parentName:"p"},"effort")," is the ",(0,i.kt)("strong",{parentName:"p"},"maximum absolute difference")," in heights between two consecutive cells of the route."),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the minimum ",(0,i.kt)("strong",{parentName:"em"},"effort")," required to travel from the top-left cell to the bottom-right cell.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/04/ex1.png",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: heights = [[1,2,2],[3,8,2],[5,3,5]]\nOutput: 2\nExplanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.\nThis is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/04/ex2.png",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: heights = [[1,2,3],[3,8,4],[5,3,5]]\nOutput: 1\nExplanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/04/ex3.png",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]\nOutput: 0\nExplanation: This route does not require any effort. \n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rows == heights.length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"columns == heights[i].length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= rows, columns <= 100")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= heights[i][j] <= 10^6"))),(0,i.kt)("h2",{id:"approach-1-dfs--binary-search"},"Approach 1: DFS + Binary Search"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use Binary Search to look for the possible absolute difference $$k$$"),(0,i.kt)("li",{parentName:"ul"},"Use DFS to walk the grid to see if the destination can be reached given $$k$$.")),(0,i.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int dirx[4] = { -1, 0, 0, 1 };\n    int diry[4] = { 0, 1, -1, 0 };\n    void dfs(vector<vector<int>>& heights, vector<vector<int>>& vis, int i, int j, int mid) {\n        vis[i][j] = 1;\n        for(int d = 0; d < 4; d++) {\n            int x = i + dirx[d], y = j + diry[d];\n            if(x < 0 || x >= heights.size() || y < 0 || y >= heights[0].size() || vis[x][y]) continue;\n            // if it is out of the target mid, then skip\n            if(abs(heights[i][j] - heights[x][y]) > mid) continue;\n            dfs(heights, vis, x, y, mid);\n        }\n    }\n    \n    int minimumEffortPath(vector<vector<int>>& heights) {\n        int m = (int) heights.size(), n = m ? (int) heights[0].size() : 0;\n        // init possible range\n        int l = 0, r = 1e6;\n        while(l < r) {\n            // get the middle one\n            // for even number of elements, take the lower one\n            int mid = l + (r - l) / 2;\n            vector<vector<int>> vis(m, vector<int>(n, 0));\n            // call dfs to check if the dist can be reached or not\n            dfs(heights, vis, 0, 0, mid);\n            // exclude m\n            if(!vis[m - 1][n - 1]) l = mid + 1;\n            // include m\n            else r = mid;\n        }\n        return l;\n    }\n};\n")))}d.isMDXComponent=!0}}]);