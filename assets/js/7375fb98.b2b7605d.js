"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[93063],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>$});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),c=i,$=u["".concat(p,".").concat(c)]||u[c]||m[c]||a;return n?r.createElement($,o(o({ref:t},d),{},{components:n})):r.createElement($,o({ref:t},d))}));function $(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},32922:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>$,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/add-digits/"},o="0258 - Add Digits (Easy)",l={unversionedId:"0200-0299/add-digits-easy",id:"0200-0299/add-digits-easy",title:"0258 - Add Digits (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/add-digits/",source:"@site/solutions/0200-0299/0258-add-digits-easy.md",sourceDirName:"0200-0299",slug:"/0200-0299/add-digits-easy",permalink:"/solutions/0200-0299/add-digits-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0258-add-digits-easy.md",tags:[],version:"current",sidebarPosition:258,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/add-digits/"},sidebar:"tutorialSidebar",previous:{title:"0246 - Strobogrammatic Number (Easy)",permalink:"/solutions/0200-0299/strobogrammatic-number-easy"},next:{title:"0261 - Graph Valid Tree (Medium)",permalink:"/solutions/0200-0299/graph-valid-tree-medium"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Repeated Digit Sum",id:"approach-1-repeated-digit-sum",level:2},{value:"Approach 2: Congruence Formula",id:"approach-2-congruence-formula",level:2}],d=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var u;const m={toc:s},c="wrapper";function $(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0258---add-digits-easy"},"0258 - Add Digits (Easy)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/add-digits/"},"https://leetcode.com/problems/add-digits/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"num"),", repeatedly add all its digits until the result has only one digit, and return it."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: num = 38\nOutput: 2\nExplanation: The process is\n38 --\x3e 3 + 8 --\x3e 11\n11 --\x3e 1 + 1 --\x3e 2 \nSince 2 has only one digit, return it.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: num = 0\nOutput: 0\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= num <= 2^31 - 1"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Follow up:")," Could you do it without any loop/recursion in ",(0,i.kt)("inlineCode",{parentName:"p"},"O(1)")," runtime?"),(0,i.kt)("h2",{id:"approach-1-repeated-digit-sum"},"Approach 1: Repeated Digit Sum"),(0,i.kt)("p",null,"Let's have a quick review on how to get digit sum first. Given that a number $$n$$, we can use the following approach to get the digit sum."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"int digitSum(int n) {\n    int sum = 0;\n    while (n > 0) {\n        // get the last digit and add it to sum\n        // e.g. 123 % 10 = 3. Add 3 to sum\n        sum += n % 10;\n        // dividing by 10 for the next run\n        // e.g. 123 / 10 -> 12\n        n /= 10;\n    }\n    return sum;\n}\n")),(0,i.kt)("p",null,"We initialise $$sum := 0$$ first. Then we take modulo operation $$n \\ mod 10$$ to get the last digit and add it to $$sum$$. Then we divide $$n$$ by 10 to eliminate the last digit and perform the same operation until $$n$$ becomes $$0$$."),(0,i.kt)("p",null,"Now we just need to calculate the digit sum repeatedly until $$n$$ has only one digit."),(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int digitSum(int n) {\n        int sum = 0;\n        while (n > 0) {\n            // get the last digit and add it to sum\n            // e.g. 123 % 10 = 3. Add 3 to sum\n            sum += n % 10;\n            // dividing by 10 for the next run\n            // e.g. 123 / 10 -> 12\n            n /= 10;\n        }\n        return sum;\n    }\n    int addDigits(int n) {\n        // calculate digit sum until n has only one digit\n        while (n >= 10) {\n            n = digitSum(n);\n        }\n        return n;\n    }\n};\n")),(0,i.kt)("h2",{id:"approach-2-congruence-formula"},"Approach 2: Congruence Formula"),(0,i.kt)("p",null,"If $$n$$ is $$0$$, then obviously it is $$0$$."),(0,i.kt)("p",null,"If $$n$$ can be divisible by $$9$$ , then it is $$9$$. E.g 27 % 9 == 0 -> 2 + 7 -> 9."),(0,i.kt)("p",null,"Otherwise, it would be $$n \\mod 9$$. Why? "),(0,i.kt)("p",null,"Let's say $$n = a_0 ",(0,i.kt)("em",{parentName:"p"}," 1 + a_1 ")," 10 + a_2 ",(0,i.kt)("em",{parentName:"p"}," 100 + ... + a_n ")," 10^n$$  where $$a_i$$ \u2208 $$","[0, 9]","$$ and let $$x$$ be $$a_0 + a_1 + a_2 + ... + a_n$$. We know that $$1 \\mod 9 = 10 \\mod 9 = 100 \\mod 9 = 1$$. Then, $$n \\mod 9$$ would be $$x$$. For example, $$n = 123 = 3 ",(0,i.kt)("em",{parentName:"p"}," 1 + 2 ")," 10 + 1 * 100$$ and $$x = 1 + 2 + 3$$. We can see that $$123 \\mod 9 = 6$$, which is also the difference between $$n$$ and the closest number  which can be divisible by $$9$$."),(0,i.kt)("p",null,"To generalise, for base $$b$$, we'll have"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/35857179/168303513-5e58fd4a-8775-487c-9a21-25d0e061e418.png",alt:"image"})),(0,i.kt)("p",null,"which can be further simplified as"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/35857179/168303537-9079b250-0106-41d0-84ab-bc4d8d672541.png",alt:"image"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int addDigits(int num) {\n        return 1 + (num - 1) % 9;\n    }\n};\n")))}$.isMDXComponent=!0}}]);