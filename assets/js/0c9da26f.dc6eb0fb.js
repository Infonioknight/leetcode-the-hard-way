"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[23008],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=m(e,["components","mdxType","originalType","parentName"]),s=p(n),d=a,f=s["".concat(l,".").concat(d)]||s[d]||c[d]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var m={};for(var l in t)hasOwnProperty.call(t,l)&&(m[l]=t[l]);m.originalType=e,m[s]="string"==typeof e?e:a,o[1]=m;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},70025:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>m,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/maximum-or/"},o="2680 - Maximum OR (Medium)",m={unversionedId:"2600-2699/maximum-or-medium",id:"2600-2699/maximum-or-medium",title:"2680 - Maximum OR (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/maximum-or/",source:"@site/solutions/2600-2699/2680-maximum-or-medium.md",sourceDirName:"2600-2699",slug:"/2600-2699/maximum-or-medium",permalink:"/solutions/2600-2699/maximum-or-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2600-2699/2680-maximum-or-medium.md",tags:[],version:"current",sidebarPosition:2680,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximum-or/"},sidebar:"tutorialSidebar",previous:{title:"2679 - Sum in a Matrix (Medium)",permalink:"/solutions/2600-2699/sum-in-a-matrix-medium"},next:{title:"2681 - Power of Heroes (Hard)",permalink:"/solutions/2600-2699/power-of-heroes-hard"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Prefix &amp; Suffix",id:"approach-1-prefix--suffix",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},s=u("Tabs"),c=u("TabItem"),d=u("SolutionAuthor"),f={toc:p},h="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2680---maximum-or-medium"},"2680 - Maximum OR (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-or/"},"https://leetcode.com/problems/maximum-or/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a ",(0,a.kt)("strong",{parentName:"p"},"0-indexed")," integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," of length ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," and an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),". In an operation, you can choose an element and multiply it by ",(0,a.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the maximum possible value of"),(0,a.kt)("inlineCode",{parentName:"p"},"nums[0] | nums[1] | ... | nums[n - 1]")," ",(0,a.kt)("em",{parentName:"p"},"that can be obtained after applying the operation on nums at most"),(0,a.kt)("inlineCode",{parentName:"p"},"k"),(0,a.kt)("em",{parentName:"p"},"times"),"."),(0,a.kt)("p",null,"Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"a | b")," denotes the ",(0,a.kt)("strong",{parentName:"p"},"bitwise or")," between two integers ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"b"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [12,9], k = 1\nOutput: 30\nExplanation: If we apply the operation to index 1, our new array nums will be equal to [12,18]. Thus, we return the bitwise or of 12 and 18, which is 30.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [8,1,2], k = 2\nOutput: 35\nExplanation: If we apply the operation twice on index 0, we yield a new array of [32,1,2]. Thus, we return 32|1|2 = 35.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 10^9")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= k <= 15"))),(0,a.kt)("h2",{id:"approach-1-prefix--suffix"},"Approach 1: Prefix & Suffix"),(0,a.kt)(s,{mdxType:"Tabs"},(0,a.kt)(c,{value:"cpp",label:"Python",mdxType:"TabItem"},(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def maximumOr(self, nums: List[int], k: int) -> int:\n        n, res = len(nums), 0\n        pre, suf = [0] * n, [0] * n\n        # calculate the prefix OR \n        for i in range(n - 1): pre[i + 1] = pre[i] | nums[i]\n        # calculate the suffix OR\n        for i in range(n - 1, 0, -1): suf[i - 1] = suf[i] | nums[i]\n        # iterate each number\n        # we apply k operations on nums[i], i.e. shift k bits to the left\n        # why not applying on multiple numbers? \n        # first in binary format, multiplying a number by 2 is shifting 1 bit to the left\n        # e.g. 0010 (2) -> 0100 (4)\n        # e.g. 0101 (5) -> 1010 (10)\n        # second, in OR operation, we wish there is a 1 as left as possible\n        # which produces the greater value\n        # hence, we apply on the same number to achieve the max value\n        # which produces the max OR value\n        # now we calculate nums[0] | nums[1] | ... | nums[n - 1]\n        # by utilising the prefix OR and suffix OR\n        # the reason is simple\n        # we precompute the result instead of calculate the OR values on each iteration\n        for i in range(n): res = max(res, pre[i] | nums[i] << k | suf[i])\n        return res\n")))))}k.isMDXComponent=!0}}]);