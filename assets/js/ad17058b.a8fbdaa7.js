"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[34026],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),h=s,d=p["".concat(l,".").concat(h)]||p[h]||m[h]||a;return n?r.createElement(d,o(o({ref:t},c),{},{components:n})):r.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:s,o[1]=i;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},49750:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>y,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(87462),s=(n(67294),n(3905));const a={description:"Author: @saloni33 | https://leetcode.com/problems/count-subarrays-with-score-less-than-k/"},o="2302 - Count Subarrays With Score Less Than K (Hard)",i={unversionedId:"2300-2399/count-subarrays-with-score-less-than-k",id:"2300-2399/count-subarrays-with-score-less-than-k",title:"2302 - Count Subarrays With Score Less Than K (Hard)",description:"Author: @saloni33 | https://leetcode.com/problems/count-subarrays-with-score-less-than-k/",source:"@site/solutions/2300-2399/2302-count-subarrays-with-score-less-than-k.md",sourceDirName:"2300-2399",slug:"/2300-2399/count-subarrays-with-score-less-than-k",permalink:"/solutions/2300-2399/count-subarrays-with-score-less-than-k",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2300-2399/2302-count-subarrays-with-score-less-than-k.md",tags:[],version:"current",sidebarPosition:2302,frontMatter:{description:"Author: @saloni33 | https://leetcode.com/problems/count-subarrays-with-score-less-than-k/"},sidebar:"tutorialSidebar",previous:{title:"2300 - Successful Pairs of Spells and Potions (Medium)",permalink:"/solutions/2300-2399/successful-pairs-of-spells-and-potions-medium"},next:{title:"2331 - Evaluate Boolean Binary Tree (Easy)",permalink:"/solutions/2300-2399/evaluate-boolean-binary-tree-easy"}},l={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window",id:"approach-1-sliding-window",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",t)},p=c("Tabs"),m=c("TabItem"),h=c("SolutionAuthor"),d={toc:u},b="wrapper";function y(e){let{components:t,...n}=e;return(0,s.kt)(b,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"2302---count-subarrays-with-score-less-than-k-hard"},"2302 - Count Subarrays With Score Less Than K (Hard)"),(0,s.kt)("h2",{id:"problem-link"},"Problem Link"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/count-subarrays-with-score-less-than-k/"},"https://leetcode.com/problems/count-subarrays-with-score-less-than-k/")),(0,s.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,s.kt)("p",null,"The ",(0,s.kt)("strong",{parentName:"p"},"score")," of an array is defined as the ",(0,s.kt)("strong",{parentName:"p"},"product")," of its sum and its length."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"For example, the score of $","[1, 2, 3, 4, 5]","$ is $(1 + 2 + 3 + 4 + 5) * 5 = 75$.\nGiven a positive integer array $nums$ and an integer $k$, return the ",(0,s.kt)("strong",{parentName:"li"},"number of non-empty subarrays")," of $nums$ whose score is ",(0,s.kt)("strong",{parentName:"li"},"strictly less")," than $k$.")),(0,s.kt)("p",null,"A subarray is a contiguous sequence of elements within an array."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 1:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: nums = [2,1,4,3,5], k = 10\nOutput: 6\nExplanation: The 6 subarrays having scores less than 10 are:\n- [2] with score 2 * 1 = 2.\n- [1] with score 1 * 1 = 1.\n- [4] with score 4 * 1 = 4.\n- [3] with score 3 * 1 = 3. \n- [5] with score 5 * 1 = 5.\n- [2,1] with score (2 + 1) * 2 = 6.\nNote that subarrays such as [1,4] and [4,3,5] are not considered because their scores are 10 and 36 respectively, while we need scores strictly less than 10.\n\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 2:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: nums = [1,1,1], k = 5\nOutput: 5\nExplanation: Every subarray except [1,1,1] has a score less than 5.\n[1,1,1] has a score (1 + 1 + 1) * 3 = 9, which is greater than 5.\nThus, there are 5 subarrays having scores less than 5.\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Constraints:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"$1 <= nums.length <= 10^5$"),(0,s.kt)("li",{parentName:"ul"},"$1 <= nums","[i]"," <= 10^5$"),(0,s.kt)("li",{parentName:"ul"},"$1 <= k <= 10$",(0,s.kt)("sup",null,"$15$"))),(0,s.kt)("h2",{id:"approach-1-sliding-window"},"Approach 1: Sliding Window"),(0,s.kt)("p",null,"In this approach we will maintain a sliding window from $nums","[i]","$ to $nums","[j]","$, subarray starting with $i$ and ending at $j$ which has score less than $k$. $sum$ contains the current sum of element between the window.  "),(0,s.kt)("p",null,"We will start iterating $j$ from 0 to $nums.size() - 1$, first we will add $nums","[j]","$ to $sum$.  "),(0,s.kt)("p",null,"The current sum is denoted by $sum$ and length is $j - i + 1$. If the score $sum * (j - i + 1) >= k$, the window is too big, we will remove $nums","[i]","$ and update i++. We continue doing this until the score is less than $k$.  "),(0,s.kt)("p",null,"If we find a subarray $nums","[i]","$ to $nums","[j]","$ which has score less than $k$, we will update answer $ans += j - i + 1$ as there will be $j - i + 1$ total subarrays in total."),(0,s.kt)("p",null,"Time Complexity: $O(n)$, where $n$ is the size of array"),(0,s.kt)("p",null,"Space complexity: $O(1)$ "),(0,s.kt)(p,{mdxType:"Tabs"},(0,s.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,s.kt)(h,{name:"@saloni33",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"long long countSubarrays(vector<int>& nums, long long k) {\n        int n = nums.size();\n        long long sum = 0;\n        long long ans = 0;\n        int i = 0,j = 0;\n        \n        while (j < n) {\n            sum += nums[j];\n            // increment j if score is less than k\n            if (sum * (j - i + 1) < k) {\n                ans += j - i + 1;\n                j++;\n            } else {\n                // go on incrementing i until score becomes less than k again\n                while (sum * (j - i + 1) >=k) {\n                    sum -= nums[i];\n                    i++;\n                }\n                ans += j - i + 1;\n                j++;\n            }\n        } \n        return ans;\n    }\n")))))}y.isMDXComponent=!0}}]);