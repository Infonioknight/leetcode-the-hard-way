"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[48835],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),k=r,d=u["".concat(l,".").concat(k)]||u[k]||m[k]||i;return n?a.createElement(d,s(s({ref:t},c),{},{components:n})):a.createElement(d,s({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=k;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},56931:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal/"},s="1790 - Check if One String Swap Can Make Strings Equal (Easy)",o={unversionedId:"1700-1799/check-if-one-string-swap-can-make-strings-equal-easy",id:"1700-1799/check-if-one-string-swap-can-make-strings-equal-easy",title:"1790 - Check if One String Swap Can Make Strings Equal (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal/",source:"@site/solutions/1700-1799/1790-check-if-one-string-swap-can-make-strings-equal-easy.md",sourceDirName:"1700-1799",slug:"/1700-1799/check-if-one-string-swap-can-make-strings-equal-easy",permalink:"/solutions/1700-1799/check-if-one-string-swap-can-make-strings-equal-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1700-1799/1790-check-if-one-string-swap-can-make-strings-equal-easy.md",tags:[],version:"current",sidebarPosition:1790,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal/"},sidebar:"tutorialSidebar",previous:{title:"1770 - Maximum Score from Performing Multiplication Operations (Medium)",permalink:"/solutions/1700-1799/maximum-score-from-performing-multiplication-operations-medium"},next:{title:"1900 - 1999",permalink:"/solutions/category/1900---1999"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Simulation",id:"approach-1-simulation",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=c("Tabs"),m=c("TabItem"),k=c("SolutionAuthor"),d={toc:p},f="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1790---check-if-one-string-swap-can-make-strings-equal-easy"},"1790 - Check if One String Swap Can Make Strings Equal (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal/"},"https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given two strings ",(0,r.kt)("inlineCode",{parentName:"p"},"s1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"s2")," of equal length. A ",(0,r.kt)("strong",{parentName:"p"},"string swap")," is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices."),(0,r.kt)("p",null,"Return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," ",(0,r.kt)("em",{parentName:"p"},"if it is possible to make both strings equal by performing ",(0,r.kt)("strong",{parentName:"em"},"at most one string swap")," on ",(0,r.kt)("strong",{parentName:"em"},"exactly one")," of the strings.")," Otherwise, return ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s1 = "bank", s2 = "kanb"\nOutput: true\nExplanation: For example, swap the first character with the last character of s2 to make "bank".\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s1 = "attack", s2 = "defend"\nOutput: false\nExplanation: It is impossible to make them equal with one string swap.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s1 = "kelb", s2 = "kelb"\nOutput: true\nExplanation: The two strings are already equal, so no string swap operation is required.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= s1.length, s2.length <= 100")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s1.length == s2.length")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"s2")," consist of only lowercase English letters.")),(0,r.kt)("h2",{id:"approach-1-simulation"},"Approach 1: Simulation"),(0,r.kt)("p",null,"We iterate each index $$i$$ and look for the first difference, mark the index as $$last$$. If we have another difference at index $$j$$, then swap $$s1","[j]","$$ with $$s1","[last]","$$ and check if it is same as $$s2$$ (as we can only make at most one swap). At the end, check if both string is equal to handle the case that we don't swap."),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(k,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool areAlmostEqual(string s1, string s2) {\n        int n = s1.size(), last = -1;\n        for (int i = 0; i < n; i++) {\n            // potentially need to swap\n            if (s1[i] != s2[i]) {\n                // any previous character to swap?\n                if (last == -1) {\n                    // if not found, mark the current index as last\n                    last = i;\n                } else {\n                    // if found, swap it and check if they are same\n                    swap(s1[last], s1[i]);\n                    return s1 == s2;\n                }\n            }\n        }\n        // no swap is needed\n        return s1 == s2;\n    }\n};\n"))),(0,r.kt)(m,{value:"rs",label:"Rust",mdxType:"TabItem"},(0,r.kt)(k,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rs"},"impl Solution {\n    pub fn are_almost_equal(s1: String, s2: String) -> bool {\n        let n = s1.len();\n        let mut last = usize::MAX;\n        let mut c1: Vec<_> = s1.chars().collect();\n        let c2: Vec<_> = s2.chars().collect();\n        for i in 0 .. n { \n            if c1[i] != c2[i] {\n                if last == usize::MAX {\n                    last = i;\n                } else {\n                    c1.swap(i, last);\n                    return c1 == c2;\n                }\n            }\n        }\n        c1 == c2\n    }\n}\n")))))}g.isMDXComponent=!0}}]);