"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[94702],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,g=u["".concat(l,".").concat(d)]||u[d]||c[d]||i;return n?r.createElement(g,s(s({ref:t},m),{},{components:n})):r.createElement(g,s({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},73229:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return c}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),s=["components"],a={description:"Author: @wingkwong | https://leetcode.com/problems/greatest-common-divisor-of-strings/",tags:["Math","String"]},l="1071 - Greatest Common Divisor of Strings (Easy)",p={unversionedId:"1000-1099/greatest-common-divisor-of-strings-easy",id:"1000-1099/greatest-common-divisor-of-strings-easy",title:"1071 - Greatest Common Divisor of Strings (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/greatest-common-divisor-of-strings/",source:"@site/solutions/1000-1099/1071-greatest-common-divisor-of-strings-easy.md",sourceDirName:"1000-1099",slug:"/1000-1099/greatest-common-divisor-of-strings-easy",permalink:"/solutions/1000-1099/greatest-common-divisor-of-strings-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1000-1099/1071-greatest-common-divisor-of-strings-easy.md",tags:[{label:"Math",permalink:"/solutions/tags/math"},{label:"String",permalink:"/solutions/tags/string"}],version:"current",sidebarPosition:1071,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/greatest-common-divisor-of-strings/",tags:["Math","String"]},sidebar:"tutorialSidebar",previous:{title:"1066 - Campus Bikes II (Medium)",permalink:"/solutions/1000-1099/campus-bikes-ii-medium"},next:{title:"1100 - 1199",permalink:"/solutions/category/1100---1199"}},m={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: TBC",id:"approach-1-tbc",level:2}],u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},d=u("Tabs"),g=u("TabItem"),f=u("SolutionAuthor"),k={toc:c};function h(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"1071---greatest-common-divisor-of-strings-easy"},"1071 - Greatest Common Divisor of Strings (Easy)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/greatest-common-divisor-of-strings/"},"https://leetcode.com/problems/greatest-common-divisor-of-strings/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"For two strings ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),', we say "',(0,i.kt)("inlineCode",{parentName:"p"},"t")," divides ",(0,i.kt)("inlineCode",{parentName:"p"},"s"),'" if and only if ',(0,i.kt)("inlineCode",{parentName:"p"},"s = t + ... + t")," (i.e., ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," is concatenated with itself one or more times)."),(0,i.kt)("p",null,"Given two strings ",(0,i.kt)("inlineCode",{parentName:"p"},"str1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"str2"),", return ",(0,i.kt)("em",{parentName:"p"},"the largest string"),(0,i.kt)("inlineCode",{parentName:"p"},"x"),(0,i.kt)("em",{parentName:"p"},"such that"),(0,i.kt)("inlineCode",{parentName:"p"},"x"),(0,i.kt)("em",{parentName:"p"},"divides both"),(0,i.kt)("inlineCode",{parentName:"p"},"str1"),(0,i.kt)("em",{parentName:"p"},"and"),(0,i.kt)("inlineCode",{parentName:"p"},"str2"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: str1 = "ABCABC", str2 = "ABC"\nOutput: "ABC"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: str1 = "ABABAB", str2 = "ABAB"\nOutput: "AB"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: str1 = "LEET", str2 = "CODE"\nOutput: ""\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= str1.length, str2.length <= 1000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"str2")," consist of English uppercase letters.")),(0,i.kt)("h2",{id:"approach-1-tbc"},"Approach 1: TBC"),(0,i.kt)(d,{mdxType:"Tabs"},(0,i.kt)(g,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'class Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        # if str1 + str2 == str2 + str1 is true, that means they have the same divisor\n        # see example 1: "ABCABC" + "ABC" = "ABC" + "ABCABC"\n        # if there is no such divisor, then return ""\n        # otherwise, we can use gcd to find the lengths\n        # the answer is either \n        # - str1[0 .. g] or \n        # - str2[0 .. g]\n        # where g is the gcd of their length\n        return "" if str1 + str2 != str2 + str1 else str1[:gcd(len(str1), len(str2))]\n')))))}h.isMDXComponent=!0}}]);