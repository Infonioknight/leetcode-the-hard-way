"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[5008],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>b});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),c=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},s=function(t){var e=c(t.components);return a.createElement(p.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,p=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),u=c(n),m=r,b=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(b,i(i({ref:e},s),{},{components:n})):a.createElement(b,i({ref:e},s))}));function b(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l[u]="string"==typeof t?t:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},17252:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={description:"Author: @wingkwong, @radojicic23, @ColeB2 | https://leetcode.com/problems/combination-sum/",tags:["Array","Backtracking"]},i="0039 - Combination Sum (Medium)",l={unversionedId:"0000-0099/combination-sum-medium",id:"0000-0099/combination-sum-medium",title:"0039 - Combination Sum (Medium)",description:"Author: @wingkwong, @radojicic23, @ColeB2 | https://leetcode.com/problems/combination-sum/",source:"@site/solutions/0000-0099/0039-combination-sum-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/combination-sum-medium",permalink:"/solutions/0000-0099/combination-sum-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0039-combination-sum-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Backtracking",permalink:"/solutions/tags/backtracking"}],version:"current",sidebarPosition:39,frontMatter:{description:"Author: @wingkwong, @radojicic23, @ColeB2 | https://leetcode.com/problems/combination-sum/",tags:["Array","Backtracking"]},sidebar:"tutorialSidebar",previous:{title:"0037 - Sudoku Solver (Hard)",permalink:"/solutions/0000-0099/sudoku-solver-hard"},next:{title:"0040 - Combination Sum II (Medium)",permalink:"/solutions/0000-0099/combination-sum-ii-medium"}},p={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Backtracking",id:"approach-1-backtracking",level:2},{value:"Approach 2: Dynamic Programming - Tabulation",id:"approach-2-dynamic-programming---tabulation",level:2}],s=t=>function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)},u=s("Tabs"),d=s("TabItem"),m=s("SolutionAuthor"),b={toc:c},g="wrapper";function k(t){let{components:e,...n}=t;return(0,r.kt)(g,(0,a.Z)({},b,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0039---combination-sum-medium"},"0039 - Combination Sum (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/combination-sum/"},"https://leetcode.com/problems/combination-sum/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given an array of ",(0,r.kt)("strong",{parentName:"p"},"distinct")," integers ",(0,r.kt)("inlineCode",{parentName:"p"},"candidates")," and a target integer ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),", return ",(0,r.kt)("em",{parentName:"p"},"a list of all ",(0,r.kt)("strong",{parentName:"em"},"unique combinations")," of")," ",(0,r.kt)("inlineCode",{parentName:"p"},"candidates")," ",(0,r.kt)("em",{parentName:"p"},"where the chosen numbers sum to")," ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),(0,r.kt)("em",{parentName:"p"},".")," You may return the combinations in ",(0,r.kt)("strong",{parentName:"p"},"any order"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"same")," number may be chosen from ",(0,r.kt)("inlineCode",{parentName:"p"},"candidates")," an ",(0,r.kt)("strong",{parentName:"p"},"unlimited number of times"),". Two combinations are unique if the frequency of at least one of the chosen numbers is different."),(0,r.kt)("p",null,"It is ",(0,r.kt)("strong",{parentName:"p"},"guaranteed")," that the number of unique combinations that sum up to ",(0,r.kt)("inlineCode",{parentName:"p"},"target")," is less than ",(0,r.kt)("inlineCode",{parentName:"p"},"150")," combinations for the given input."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: candidates = [2,3,5], target = 8\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: candidates = [2], target = 1\nOutput: [] \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= candidates.length <= 30")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= candidates[i] <= 200")),(0,r.kt)("li",{parentName:"ul"},"All elements of ",(0,r.kt)("inlineCode",{parentName:"li"},"candidates")," are ",(0,r.kt)("strong",{parentName:"li"},"distinct"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= target <= 500"))),(0,r.kt)("h2",{id:"approach-1-backtracking"},"Approach 1: Backtracking"),(0,r.kt)("p",null,"We can apply backtracking in this problem."),(0,r.kt)("p",null,"First, we sort the array and build our candidates incrementally. We iterate from starting point and  push each candidate to ",(0,r.kt)("inlineCode",{parentName:"p"},"tmp")," and call ",(0,r.kt)("inlineCode",{parentName:"p"},"backtrack()")," with the updated  $$target",(0,r.kt)("em",{parentName:"p"},"{new} = target"),"{old} - candidates","[i]","$$."),(0,r.kt)("p",null,"If we have a valid solution, we push ",(0,r.kt)("inlineCode",{parentName:"p"},"tmp")," to answer and abandon a candidate."),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void backtrack(vector<int>& candidates, int target, vector<vector<int>>& ans, vector<int>& tmp, int start) {\n        if(target == 0) {\n            ans.push_back(tmp);\n            return;\n        }\n        for(int i = start; i < candidates.size() && target >= candidates[i]; i++){\n            tmp.push_back(candidates[i]);\n            backtrack(candidates, target - candidates[i], ans, tmp, i);\n            tmp.pop_back();\n        }\n    }\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n        sort(candidates.begin(), candidates.end());\n        vector<vector<int>> ans;\n        vector<int> tmp;\n        backtrack(candidates, target, ans, tmp, 0);\n        return ans;\n    }\n};\n"))),(0,r.kt)(d,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(m,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        res = []\n\n        def dfs(i, curr, total):\n            if total == target:\n                res.append(curr.copy())\n                return \n            if i >= len(candidates) or total > target:\n                return \n            curr.append(candidates[i])\n            dfs(i, curr, total + candidates[i])\n            curr.pop()\n            dfs(i + 1, curr, total)\n        \n        dfs(0, [], 0)\n        return res \n"))),(0,r.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)(m,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum = function(candidates, target) {\n    candidates.sort((a, b) => a - b);\n    let res = [];\n    backtrack(0, [], target);\n    return res;\n\n    function backtrack(i, curr, target) {\n        if (target == 0) {\n            res.push(curr.slice());\n        }\n        if (target <= 0 || i == candidates.length) {\n            return;\n        }\n        curr.push(candidates[i]);\n        backtrack(i, curr, target - candidates[i]);\n        curr.pop();\n        backtrack(i + 1, curr, target);\n    }\n};\n")))),(0,r.kt)("h2",{id:"approach-2-dynamic-programming---tabulation"},"Approach 2: Dynamic Programming - Tabulation"),(0,r.kt)("p",null,"For our dynamic programming approach, we can solve how many combinations sum up to all the targets from 0 to the target. That is how many combinations can we create to solve for $$0,1,2...target$$."),(0,r.kt)("p",null,"First, we would need a 2D dynamic programming array, $$dp$$ which would be an array of arrays that contains all possible combinations to reach that index of the array. Ie, for index $$0$$, how many combinations of candidates reach $$0$$, and that would repeat all the way up to an index of $$target + 1$$ which is our $$target$$ number."),(0,r.kt)("p",null,"We can do that by looping through each number, $$num$$ of candidates, and looping through each sub-target, $$sub_target$$ inside our $$dp$$ array starting at our $$num$$ and ending at $$target + 1$$. Then for each $$sub","_","target$$, we can do 2 things."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"On the first iteration, obviously the $$num$$ will equal our $$sub","_","target$$ so we can append an array of just that number to the $$dp$$ array at an index of $$sub_target$$."),(0,r.kt)("li",{parentName:"ol"},"Then we can also append every combination from our $$dp$$ array at the position of $$sub","_","target - num$$.")),(0,r.kt)("p",null,"For example 2, starting at candidate number 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"candidates = [2,3,5]\ntarget = 8:\n       0  1  2  3  4  5  6  7  8\ndp = [[ ][ ][ ][ ][ ][ ][ ][ ][ ]]\n             ^ start our loop at candidate number, 2.\n             ^ since we are starting here, we know 2 adds up to 2, so we can add 2.\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"       0  1  2  3  4  5  6  7  8\ndp = [[ ][ ][2][ ][ ][ ][ ][ ][ ]]\n       ^  check 2-candidate number = 2-2=0 and add all those to current array.\n                ^ repeat the process for all sub_targets until we reach the end.\n")),(0,r.kt)("p",null,"For explanation's sake, I will skip the odds, since we can see we have nothing at positions $$3-2=1$$, $$5-2=3$$, $$7-2=5$$."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"       0  1   2   3    4    5  6  7  8\ndp = [[ ][ ][[2]][ ][[2,2]][ ][ ][ ][ ]]\n                   ^ add all from 4-2=2\n                        ...... ^ add all from 6-2 = 4\n       0  1   2   3    4    5     6     7  8\ndp = [[ ][ ][[2]][ ][[2,2]][ ][[2,2,2]][ ][ ]]\n                                           ^add all from 8-2=6\n       0  1   2   3    4    5     6     7     8\ndp = [[ ][ ][[2]][ ][[2,2]][ ][[2,2,2]][ ][2,2,2,2]]\n")),(0,r.kt)("p",null,"For candidate number $$3$$, you can imagine we would add a combo array with number $$3$$ to $$dp$$ array at $$sub","_","target$$ 3, and all the combinations from $$dp$$ array at $$0$$, and repeat for numbers, $$4,5,6,7,8$$, and similarly for $$5$$ we would start at $$5$$, and repeat for $$6,7,8$$\nThe finished product would look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"dp = [\n    0   1   2      3\n    [], [], [[2]], [[3]],\n    4         5              6                    7\n    [[2, 2]], [[2, 3], [5]], [[2, 2, 2], [3, 3]], [[2, 2, 3], [2, 5]],\n    8\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n]\n")),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(d,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(m,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        # initialize our DP array. This will have empty lists of\n        # all possible combos to reach target index from\n        # 0 to target + 1 and contain all state so we can access it\n        # quickly.\n        dp = [[] for _ in range(target + 1)]\n        # loop through each candidate number, nums\n        for num in candidates:\n            # loop through all the sub targets starting at the num\n            # and going until we reach our target. Since we are 0-indexed\n            # our target will be at target + 1\n            for sub_target in range(num, target + 1):\n                # first iteration our num will be the sub target, so\n                # we can add list containing that number to the \n                # dp array.\n                if num == sub_target:\n                    dp[sub_target].append([num])\n                # loop through each combo we created at position:\n                # sub_target - num\n                for combo in dp[sub_target - num]:\n                    # add those with current num to current sub_target\n                    # position\n                    dp[sub_target].append(combo + [num])\n        # our answer will reside in the last position of our\n        # dp array, so we can return it.\n        return dp[-1]\n        \n")))))}k.isMDXComponent=!0}}]);