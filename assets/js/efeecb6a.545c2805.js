"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[55622],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},73656:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/find-the-difference/"},i="0389 - Find the Difference (Easy)",l={unversionedId:"0300-0399/find-the-difference-easy",id:"0300-0399/find-the-difference-easy",title:"0389 - Find the Difference (Easy)",description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/find-the-difference/",source:"@site/solutions/0300-0399/0389-find-the-difference-easy.md",sourceDirName:"0300-0399",slug:"/0300-0399/find-the-difference-easy",permalink:"/solutions/0300-0399/find-the-difference-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0300-0399/0389-find-the-difference-easy.md",tags:[],version:"current",sidebarPosition:389,frontMatter:{description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/find-the-difference/"},sidebar:"tutorialSidebar",previous:{title:"0383 - Ransom Note (Easy)",permalink:"/solutions/0300-0399/ransom-note-easy"},next:{title:"0392 - Is Subsequence (Easy)",permalink:"/solutions/0300-0399/is-subsequence-easy"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Bit Manipulation",id:"approach-1-bit-manipulation",level:2},{value:"Approach 2: Hash Map",id:"approach-2-hash-map",level:2},{value:"Approach 3: Sorting",id:"approach-3-sorting",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=c("Tabs"),d=c("TabItem"),m=c("SolutionAuthor"),h={toc:p},f="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0389---find-the-difference-easy"},"0389 - Find the Difference (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-the-difference/"},"https://leetcode.com/problems/find-the-difference/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given two strings ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"t"),"."),(0,a.kt)("p",null,"String ",(0,a.kt)("inlineCode",{parentName:"p"},"t")," is generated by random shuffling string ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," and then add one more letter at a random position."),(0,a.kt)("p",null,"Return the letter that was added to ",(0,a.kt)("inlineCode",{parentName:"p"},"t"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "abcd", t = "abcde"\nOutput: "e"\nExplanation: \'e\' is the letter that was added.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "", t = "y"\nOutput: "y"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= s.length <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"t.length == s.length + 1")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"t")," consist of lowercase English letters.")),(0,a.kt)("h2",{id:"approach-1-bit-manipulation"},"Approach 1: Bit Manipulation"),(0,a.kt)("p",null,"Same idea as ",(0,a.kt)("a",{parentName:"p",href:"../0100-0199/single-number-easy"},"0136 - Single Number (Easy)"),"."),(0,a.kt)("p",null,"Prerequisite: You should understand properties of XOR."),(0,a.kt)("p",null,"Let's have a quick review."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If we take XOR of a number and a zero, the result will be that number, i.e. $$a \\oplus 0 = a$$."),(0,a.kt)("li",{parentName:"ul"},"If we take XOR of two same numbers, it will return 0, i.e. $$a \\oplus a = 0$$."),(0,a.kt)("li",{parentName:"ul"},"If we take XOR of multiple numbers, the order doesn't affect the result, i.e. $$a \\oplus b \\oplus c = a \\oplus c \\oplus b$$.")),(0,a.kt)("p",null,"Therefore, we apply XOR on each character. The same characters will cancel out each other. What's left is the answer."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    char findTheDifference(string s, string t) {\n        char ans = 0;\n        // take XOR for each character: ans = ans ^ x\n        for (auto x : s) ans ^= x;\n        for (auto x : t) ans ^= x;\n        return ans;\n    }\n};\n")))),(0,a.kt)("h2",{id:"approach-2-hash-map"},"Approach 2: Hash Map"),(0,a.kt)("p",null,"We can store the occurrence for each character. As ",(0,a.kt)("inlineCode",{parentName:"p"},"t")," has one more character, we can count ",(0,a.kt)("inlineCode",{parentName:"p"},"t")," first, iterate ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," to subtract the occurrences. The answer will be the one which has one occurrence."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    char findTheDifference(string s, string t) {\n        unordered_map<char, int> m;\n        // count the occurrence for t\n        for (auto x : t) m[x]++;\n        // instead of using an extra hash map,\n        // we decrease the occurrence\n        for (auto x : s) m[x]--;\n        for (auto x : m) {\n            // the answer will be the one with occurrence = 1\n            if (x.second == 1) {\n                return x.first;\n            }\n        }\n        // returning any character would work as it never reaches here\n        return 'a';\n    }\n};\n")))),(0,a.kt)("h2",{id:"approach-3-sorting"},"Approach 3: Sorting"),(0,a.kt)("p",null,"We can sort both input and compare each character one by one. If there is a difference, then return $$t","[i]","$$. Otherwise, return the last character of $$t$$ as the first $$len(s)$$ characters are same."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    char findTheDifference(string s, string t) {\n        // sort s in ascending order\n        sort(s.begin(), s.end());\n        // sort t in ascending order\n        sort(t.begin(), t.end());\n        for (int i = 0; i < s.size(); i++) {\n            // s = "abcde"\n            // t = "abcdde"\n            // "e" is not same as "d" at position 4 (0-base)\n            // hence, return t[i], i.e. "d"\n            if (s[i] != t[i]) {\n                return t[i];\n            }\n        }\n        // for the case like\n        // s = "abcd"\n        // t = "abcde"\n        return t.back();\n    }\n};\n'))),(0,a.kt)(d,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(m,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'class Solution:\n    def findTheDifference(self, s: str, t: str) -> str:\n        s = "".join(sorted(list(s)))\n        t = "".join(sorted(list(t)))\n        for i in range(len(s)):\n            if s[i] != t[i]:\n                return t[i]\n        return t[-1]\n'))),(0,a.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)(m,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * @param {string} s\n * @param {string} t\n * @return {character}\n */\nvar findTheDifference = function (s, t) {\n  const sortedS = s.split("").sort().join("");\n  const sortedT = t.split("").sort().join("");\n  for (let i = 0; i < s.length; i++) {\n    if (sortedS[i] != sortedT[i]) {\n      return sortedT[i];\n    }\n  }\n  return sortedT[sortedT.length - 1];\n};\n')))))}k.isMDXComponent=!0}}]);