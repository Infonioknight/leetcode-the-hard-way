"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[3603],{183:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var i=t(85893),r=t(11151);const o={description:"Author: @wingkwong | https://leetcode.com/problems/maximum-profit-in-job-scheduling/"},s="1235 - Maximum Profit in Job Scheduling (Hard)",d={id:"1200-1299/maximum-profit-in-job-scheduling-hard",title:"1235 - Maximum Profit in Job Scheduling (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/maximum-profit-in-job-scheduling/",source:"@site/solutions/1200-1299/1235-maximum-profit-in-job-scheduling-hard.md",sourceDirName:"1200-1299",slug:"/1200-1299/maximum-profit-in-job-scheduling-hard",permalink:"/solutions/1200-1299/maximum-profit-in-job-scheduling-hard",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1200-1299/1235-maximum-profit-in-job-scheduling-hard.md",tags:[],version:"current",sidebarPosition:1235,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximum-profit-in-job-scheduling/"},sidebar:"tutorialSidebar",previous:{title:"1232 - Check If It Is a Straight Line (Easy)",permalink:"/solutions/1200-1299/check-if-it-is-a-straight-line-easy"},next:{title:"1259 - Handshakes That Don't Cross (Hard)",permalink:"/solutions/1200-1299/handshakes-that-dont-cross-hard"}},a={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2},{value:"Similar Problems:",id:"similar-problems",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{SolutionAuthor:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"1235---maximum-profit-in-job-scheduling-hard",children:"1235 - Maximum Profit in Job Scheduling (Hard)"}),"\n",(0,i.jsx)(n.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-profit-in-job-scheduling/",children:"https://leetcode.com/problems/maximum-profit-in-job-scheduling/"})}),"\n",(0,i.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,i.jsxs)(n.p,{children:["We have ",(0,i.jsx)(n.code,{children:"n"})," jobs, where every job is scheduled to be done from ",(0,i.jsx)(n.code,{children:"startTime[i]"})," to ",(0,i.jsx)(n.code,{children:"endTime[i]"}),", obtaining a profit of ",(0,i.jsx)(n.code,{children:"profit[i]"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You're given the ",(0,i.jsx)(n.code,{children:"startTime"}),", ",(0,i.jsx)(n.code,{children:"endTime"})," and ",(0,i.jsx)(n.code,{children:"profit"})," arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range."]}),"\n",(0,i.jsxs)(n.p,{children:["If you choose a job that ends at time ",(0,i.jsx)(n.code,{children:"X"})," you will be able to start another job that starts at time ",(0,i.jsx)(n.code,{children:"X"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2019/10/10/sample1_1584.png",alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\nOutput: 120\nExplanation: The subset chosen is the first and fourth job. \nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2019/10/10/sample22_1584.png",alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\nOutput: 150\nExplanation: The subset chosen is the first, fourth and fifth job. \nProfit obtained 150 = 20 + 70 + 60.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2019/10/10/sample3_1584.png",alt:""})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]\nOutput: 6\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= startTime.length == endTime.length == profit.length <= 5 * 10^4"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= startTime[i] < endTime[i] <= 10^9"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= profit[i] <= 10^4"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"approach-1-dynamic-programming",children:"Approach 1: Dynamic Programming"}),"\n",(0,i.jsx)(t,{name:"@wingkwong"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {\n        int n = startTime.size();\n        // rearrange the input\n        vector<array<int, 3>> events;\n        // put them together\n        for (int i = 0; i < n; i++) events.push_back({startTime[i], endTime[i], profit[i]});\n        // sort by startTime\n        sort(events.begin(), events.end());\n        // 1D dp\n        vector<int> dp(n, -1);\n        function<int(int,int)> dfs = [&](int idx, int end) {\n            // reached all events\n            if (idx == n) return 0;\n            // current start time < previous end time\n            // cannot take it -> move to the next one\n            if (events[idx][0] < end) return dfs(idx + 1, end);\n            // calculate before -> return immediately\n            if (dp[idx] != -1) return dp[idx];\n            // so we only have two choices left, we either\n            return dp[idx] = max(\n                // choice 1: take this job and move to the next one from this end time\n                events[idx][2] + dfs(idx + 1, events[idx][1]),\n                // choice 2: not take this job and move to the next one\n                dfs(idx + 1, end)\n            );\n        };\n        return dfs(0, 0);\n    }\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"similar-problems",children:"Similar Problems:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../1700-1799/maximum-number-of-events-that-can-be-attended-ii-hard",children:"1751 - Maximum Number of Events That Can Be Attended II (Hard)"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>s});var i=t(67294);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);