"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[76673],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(t),u=r,g=d["".concat(s,".").concat(u)]||d[u]||c[u]||i;return t?a.createElement(g,o(o({ref:n},m),{},{components:t})):a.createElement(g,o({ref:n},m))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},32277:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/find-all-anagrams-in-a-string/",tags:["Hash Table","String","Sliding Window"]},o="0438 - Find All Anagrams in a String (Medium)",l={unversionedId:"0400-0499/find-all-anagrams-in-a-string-medium",id:"0400-0499/find-all-anagrams-in-a-string-medium",title:"0438 - Find All Anagrams in a String (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/find-all-anagrams-in-a-string/",source:"@site/solutions/0400-0499/0438-find-all-anagrams-in-a-string-medium.md",sourceDirName:"0400-0499",slug:"/0400-0499/find-all-anagrams-in-a-string-medium",permalink:"/solutions/0400-0499/find-all-anagrams-in-a-string-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0438-find-all-anagrams-in-a-string-medium.md",tags:[{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"String",permalink:"/solutions/tags/string"},{label:"Sliding Window",permalink:"/solutions/tags/sliding-window"}],version:"current",sidebarPosition:438,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-all-anagrams-in-a-string/",tags:["Hash Table","String","Sliding Window"]},sidebar:"tutorialSidebar",previous:{title:"0435 - Non-overlapping Intervals (Medium)",permalink:"/solutions/0400-0499/non-overlapping-intervals-medium"},next:{title:"0441 - Arranging Coins (Easy)",permalink:"/solutions/0400-0499/arranging-coins-easy"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window",id:"approach-1-sliding-window",level:2}],m=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)},d=m("Tabs"),c=m("TabItem"),u=m("SolutionAuthor"),g={toc:p},h="wrapper";function f(e){let{components:n,...t}=e;return(0,r.kt)(h,(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0438---find-all-anagrams-in-a-string-medium"},"0438 - Find All Anagrams in a String (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-all-anagrams-in-a-string/"},"https://leetcode.com/problems/find-all-anagrams-in-a-string/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given two strings ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"p"),", return ",(0,r.kt)("em",{parentName:"p"},"an array of all the start indices of")," ",(0,r.kt)("inlineCode",{parentName:"p"},"p"),(0,r.kt)("em",{parentName:"p"},"'s anagrams in")," ",(0,r.kt)("inlineCode",{parentName:"p"},"s"),". You may return the answer in ",(0,r.kt)("strong",{parentName:"p"},"any order"),"."),(0,r.kt)("p",null,"An ",(0,r.kt)("strong",{parentName:"p"},"Anagram")," is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "cbaebabacd", p = "abc"\nOutput: [0,6]\nExplanation:\nThe substring with start index = 0 is "cba", which is an anagram of "abc".\nThe substring with start index = 6 is "bac", which is an anagram of "abc".\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "abab", p = "ab"\nOutput: [0,1,2]\nExplanation:\nThe substring with start index = 0 is "ab", which is an anagram of "ab".\nThe substring with start index = 1 is "ba", which is an anagram of "ab".\nThe substring with start index = 2 is "ab", which is an anagram of "ab".\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= s.length, p.length <= 3 * 10^4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"p")," consist of lowercase English letters.")),(0,r.kt)("h2",{id:"approach-1-sliding-window"},"Approach 1: Sliding Window"),(0,r.kt)("p",null,"First we build the count ",(0,r.kt)("inlineCode",{parentName:"p"},"m2")," of each character in string ",(0,r.kt)("inlineCode",{parentName:"p"},"p"),". Then we keep the window size as ",(0,r.kt)("inlineCode",{parentName:"p"},"m"),". If it is within the window, then we update ",(0,r.kt)("inlineCode",{parentName:"p"},"m1")," until the pointer ",(0,r.kt)("inlineCode",{parentName:"p"},"j")," is out of the window. If ",(0,r.kt)("inlineCode",{parentName:"p"},"m1")," is equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"m2"),", then we can add the current ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," to the answer vector. After that, we need to move decrease ",(0,r.kt)("inlineCode",{parentName:"p"},"m1[s[i] - 'a']]")," by 1 as the character ",(0,r.kt)("inlineCode",{parentName:"p"},"s[i]")," will be out of the window."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Time Complexity: $O(n + m)$")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Space Complexity: $O(1)$"))),(0,r.kt)(d,{mdxType:"Tabs"},(0,r.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n public:\n  vector<int> findAnagrams(string s, string p) {\n      vector<int> ans, m1(26, 0), m2(26, 0);\n      int n = (int) s.size(), m = (int) p.size(), j = 0;\n      for (auto x : p) m2[x - 'a']++;\n      for (int i = 0; i < n; i++) {\n          while (j < n && j - i + 1 <= m) m1[s[j++] - 'a']++;\n          if (m1 == m2) ans.push_back(i);\n          m1[s[i] - 'a']--;\n      }\n      return ans;\n  }\n};\n"))),(0,r.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        # sliding window -> substring with same set of freq of chars\n        ans = []\n        # cnt_s: store frequency of characters in s\n        # cnt_p: store frequency of characters in p\n        cnt_s, cnt_p = [0] * 26, [0] * 26\n        n, m = len(s), len(p)\n        j = 0\n        # count frequency of characters in p\n        for x in p:\n            cnt_p[ord(x) - ord('a')] += 1\n        for i in range(n):\n            # add s[j] to the window if the window is not full\n            while j < n and j - i + 1 <= m:\n                cnt_s[ord(s[j]) - ord('a')] += 1\n                j += 1\n            # check if both frequency matches\n            if cnt_s == cnt_p:\n                # i is the starting index of the window\n                ans.append(i)\n            # remove the leftmost element from the window\n            cnt_s[ord(s[i]) - ord('a')] -= 1\n        return ans\n")))))}f.isMDXComponent=!0}}]);