"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[73453],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>k});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),u=s(t),d=r,k=u["".concat(p,".").concat(d)]||u[d]||c[d]||i;return t?a.createElement(k,o(o({ref:n},l),{},{components:t})):a.createElement(k,o({ref:n},l))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var m={};for(var p in n)hasOwnProperty.call(n,p)&&(m[p]=n[p]);m.originalType=e,m[u]="string"==typeof e?e:r,o[1]=m;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},30690:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>m,toc:()=>s});var a=t(87462),r=(t(67294),t(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/maximum-distance-between-a-pair-of-values/"},o="1855 - Maximum Distance Between a Pair of Values (Medium)",m={unversionedId:"1800-1899/maximum-distance-between-a-pair-of-values-medium",id:"1800-1899/maximum-distance-between-a-pair-of-values-medium",title:"1855 - Maximum Distance Between a Pair of Values (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/maximum-distance-between-a-pair-of-values/",source:"@site/solutions/1800-1899/1855-maximum-distance-between-a-pair-of-values-medium.md",sourceDirName:"1800-1899",slug:"/1800-1899/maximum-distance-between-a-pair-of-values-medium",permalink:"/solutions/1800-1899/maximum-distance-between-a-pair-of-values-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1800-1899/1855-maximum-distance-between-a-pair-of-values-medium.md",tags:[],version:"current",sidebarPosition:1855,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximum-distance-between-a-pair-of-values/"},sidebar:"tutorialSidebar",previous:{title:"1854 - Maximum Population Year (Easy)",permalink:"/solutions/1800-1899/maximum-population-year-easy"},next:{title:"1859 - Sorting the Sentence (Easy)",permalink:"/solutions/1800-1899/sorting-the-sentence-easy"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two Pointers",id:"approach-1-two-pointers",level:2},{value:"Approach 2: Lower Bound",id:"approach-2-lower-bound",level:2}],l=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const c={toc:s},d="wrapper";function k(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1855---maximum-distance-between-a-pair-of-values-medium"},"1855 - Maximum Distance Between a Pair of Values (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-distance-between-a-pair-of-values/"},"https://leetcode.com/problems/maximum-distance-between-a-pair-of-values/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given two ",(0,r.kt)("strong",{parentName:"p"},"non-increasing 0-indexed")," integer arrays ",(0,r.kt)("inlineCode",{parentName:"p"},"nums1"),"\u200b\u200b\u200b\u200b\u200b\u200b and ",(0,r.kt)("inlineCode",{parentName:"p"},"nums2"),"\u200b\u200b\u200b\u200b\u200b\u200b."),(0,r.kt)("p",null,"A pair of indices ",(0,r.kt)("inlineCode",{parentName:"p"},"(i, j)"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"0 <= i < nums1.length")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"0 <= j < nums2.length"),", is ",(0,r.kt)("strong",{parentName:"p"},"valid")," if both ",(0,r.kt)("inlineCode",{parentName:"p"},"i <= j")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nums1[i] <= nums2[j]"),". The ",(0,r.kt)("strong",{parentName:"p"},"distance")," of the pair is ",(0,r.kt)("inlineCode",{parentName:"p"},"j - i"),"\u200b\u200b\u200b\u200b."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the ",(0,r.kt)("strong",{parentName:"em"},"maximum distance")," of any ",(0,r.kt)("strong",{parentName:"em"},"valid")," pair")," ",(0,r.kt)("inlineCode",{parentName:"p"},"(i, j)"),(0,r.kt)("em",{parentName:"p"},". If there are no valid pairs, return")," ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("p",null,"An array ",(0,r.kt)("inlineCode",{parentName:"p"},"arr")," is ",(0,r.kt)("strong",{parentName:"p"},"non-increasing")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"arr[i-1] >= arr[i]")," for every ",(0,r.kt)("inlineCode",{parentName:"p"},"1 <= i < arr.length"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]\nOutput: 2\nExplanation: The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).\nThe maximum distance is 2 with pair (2,4).\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums1 = [2,2,2], nums2 = [10,10,1]\nOutput: 1\nExplanation: The valid pairs are (0,0), (0,1), and (1,1).\nThe maximum distance is 1 with pair (0,1).\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]\nOutput: 2\nExplanation: The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).\nThe maximum distance is 2 with pair (2,4).\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= nums1.length, nums2.length <= 105")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= nums1[i], nums2[j] <= 105")),(0,r.kt)("li",{parentName:"ul"},"Both ",(0,r.kt)("inlineCode",{parentName:"li"},"nums1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"nums2")," are ",(0,r.kt)("strong",{parentName:"li"},"non-increasing"),".")),(0,r.kt)("h2",{id:"approach-1-two-pointers"},"Approach 1: Two Pointers"),(0,r.kt)("p",null,"As both arrays are sorted, we can use two pointers $$i$$ and $$j$$ to iterate $$nums1$$ and $$nums2$$ respectively. If $$nums1","[i]"," <= nums2","[j]","$$, we can update the answer and increase pointer $$j$$ by $$1$$, else increase pointer $$i$$ by $$1$$."),(0,r.kt)(l,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxDistance(vector<int>& nums1, vector<int>& nums2) {\n        int n = nums1.size(), m = nums2.size();\n        int i = 0, j = 0, ans = 0;\n        // nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]\n        while(i < n && j < m) {\n            if(nums1[i] <= nums2[j]) {\n                ans = max(ans, j - i); \n                j++;\n            } else {\n                i++;\n            }\n        }\n        return ans;\n    }\n};\n")),(0,r.kt)("h2",{id:"approach-2-lower-bound"},"Approach 2: Lower Bound"),(0,r.kt)("p",null,"Using the same idea as approach 1 but with lower bound."),(0,r.kt)(l,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxDistance(vector<int>& nums1, vector<int>& nums2) {\n        int ans = 0, n = nums1.size(), m = nums2.size();\n        for (int i = 0; i < n; i++) {\n            auto it = lower_bound(nums2.rbegin(), nums2.rend(), nums1[i]) - nums2.rbegin();\n            int j = m - 1 - it;\n            ans = max(ans, j - i);\n        }\n        return ans;\n    }\n};\n")))}k.isMDXComponent=!0}}]);