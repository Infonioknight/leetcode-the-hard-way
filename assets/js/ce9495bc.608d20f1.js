"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[29639],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),h=r,d=c["".concat(p,".").concat(h)]||c[h]||u[h]||a;return n?i.createElement(d,o(o({ref:t},m),{},{components:n})):i.createElement(d,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},75504:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var i=n(87462),r=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/minimum-white-tiles-after-covering-with-carpets/"},o="2209 - Minimum White Tiles After Covering With Carpets (Hard)",l={unversionedId:"2200-2299/minimum-white-tiles-after-covering-with-carpets-hard",id:"2200-2299/minimum-white-tiles-after-covering-with-carpets-hard",title:"2209 - Minimum White Tiles After Covering With Carpets (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/minimum-white-tiles-after-covering-with-carpets/",source:"@site/solutions/2200-2299/2209-minimum-white-tiles-after-covering-with-carpets-hard.md",sourceDirName:"2200-2299",slug:"/2200-2299/minimum-white-tiles-after-covering-with-carpets-hard",permalink:"/solutions/2200-2299/minimum-white-tiles-after-covering-with-carpets-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2209-minimum-white-tiles-after-covering-with-carpets-hard.md",tags:[],version:"current",sidebarPosition:2209,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/minimum-white-tiles-after-covering-with-carpets/"},sidebar:"tutorialSidebar",previous:{title:"2208 -  Minimum Operations to Halve Array Sum (Medium)",permalink:"/solutions/2200-2299/minimum-operations-to-halve-array-sum-easy"},next:{title:"2214 - Minimum Health to Beat Game (Medium)",permalink:"/solutions/2200-2299/minimum-health-to-beat-game-medium"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DP",id:"approach-1-dp",level:2}],m=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var c;const u={toc:s},h="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2209---minimum-white-tiles-after-covering-with-carpets-hard"},"2209 - Minimum White Tiles After Covering With Carpets (Hard)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-white-tiles-after-covering-with-carpets/"},"https://leetcode.com/problems/minimum-white-tiles-after-covering-with-carpets/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given a ",(0,r.kt)("strong",{parentName:"p"},"0-indexed binary")," string ",(0,r.kt)("inlineCode",{parentName:"p"},"floor"),", which represents the colors of tiles on a floor:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"floor[i] = '0'")," denotes that the ",(0,r.kt)("inlineCode",{parentName:"li"},"ith")," tile of the floor is colored ",(0,r.kt)("strong",{parentName:"li"},"black"),"."),(0,r.kt)("li",{parentName:"ul"},"On the other hand, ",(0,r.kt)("inlineCode",{parentName:"li"},"floor[i] = '1'")," denotes that the ",(0,r.kt)("inlineCode",{parentName:"li"},"ith")," tile of the floor is colored ",(0,r.kt)("strong",{parentName:"li"},"white"),".")),(0,r.kt)("p",null,"You are also given ",(0,r.kt)("inlineCode",{parentName:"p"},"numCarpets")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"carpetLen"),". You have ",(0,r.kt)("inlineCode",{parentName:"p"},"numCarpets")," ",(0,r.kt)("strong",{parentName:"p"},"black")," carpets, each of length ",(0,r.kt)("inlineCode",{parentName:"p"},"carpetLen")," tiles. Cover the tiles with the given carpets such that the number of ",(0,r.kt)("strong",{parentName:"p"},"white")," tiles still visible is ",(0,r.kt)("strong",{parentName:"p"},"minimum"),". Carpets may overlap one another."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the ",(0,r.kt)("strong",{parentName:"em"},"minimum")," number of white tiles still visible.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/02/10/ex1-1.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: floor = "10110101", numCarpets = 2, carpetLen = 2\nOutput: 2\nExplanation: \nThe figure above shows one way of covering the tiles with the carpets such that only 2 white tiles are visible.\nNo other way of covering the tiles with the carpets can leave less than 2 white tiles visible.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/02/10/ex2.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: floor = "11111", numCarpets = 2, carpetLen = 3\nOutput: 0\nExplanation: \nThe figure above shows one way of covering the tiles with the carpets such that no white tiles are visible.\nNote that the carpets are able to overlap one another.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= carpetLen <= floor.length <= 1000")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"floor[i]")," is either ",(0,r.kt)("inlineCode",{parentName:"li"},"'0'")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"'1'"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= numCarpets <= 1000"))),(0,r.kt)("h2",{id:"approach-1-dp"},"Approach 1: DP"),(0,r.kt)("p",null,"Let $$dp","[i][j]","$$ be the minimum number of white tiles still visible covering till $$floor","[i]","$$ with $$j$$ carpets used. The answer is $$dp","[n - 1][numCarpets]","$$."),(0,r.kt)("p",null,"The base case is if the first tile is white, we set $$dp","[i][j]","$$ to $$1$$ as there is one white tile visible using $$0$$ carpet. Then iterate each tile and each carpet and do the following logic."),(0,r.kt)("p",null,"First we take the previous result $$dp","[i][j]"," = dp","[i - 1][j]","$$. If the current tile is white, we add $$1$$. If we've used a carpet, there are two cases. If the current index is greater / equal to $$carpetLen$$, then we compare the the previous result $$dp","[i - carpetLen][numCarpets - 1]","$$ with $$dp","[i][j]","$$ and take the min one. Otherwise, we set $$dp","[i][j]","$$ to $$0$$ as it is covered by previous carpet."),(0,r.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int minimumWhiteTiles(string f, int k, int l) {\n        int n = f.size(), ans = 0;\n        // minimum number of white tiles still visible covering first i tiles with j carpets used\n        vector<vector<int>> dp(n, vector<int>(k + 1));\n        // base case\n        dp[0][0] = f[0] == '1';\n        // iterate each tile\n        for (int i = 1; i < n; i++) {\n            // iterate each carpet\n            for (int j = 0; j <= k; j++) {\n                // take the previous result\n                // if the current tile is white, then add 1\n                dp[i][j] = dp[i - 1][j] + (f[i] == '1');\n                // if at least one carpet is used\n                if (j) {\n                    if (i >= l) {\n                        // compare with the previous result\n                        dp[i][j] = min(dp[i][j], dp[i - l][j - 1]);    \n                    } else {\n                        // covered by carpet - reset to 0\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n        return dp[n - 1][k];\n    }\n};\n")))}d.isMDXComponent=!0}}]);