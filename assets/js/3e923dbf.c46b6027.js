"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[4439],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>d});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(o),f=r,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||a;return o?n.createElement(d,i(i({ref:t},c),{},{components:o})):n.createElement(d,i({ref:t},c))}));function d(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=o[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}f.displayName="MDXCreateElement"},18910:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=o(87462),r=(o(67294),o(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/maximum-consecutive-floors-without-special-floors"},i="2274 - Maximum Consecutive Floors Without Special Floors (Medium)",l={unversionedId:"2200-2299/maximum-consecutive-floors-without-special-floors-medium",id:"2200-2299/maximum-consecutive-floors-without-special-floors-medium",title:"2274 - Maximum Consecutive Floors Without Special Floors (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/maximum-consecutive-floors-without-special-floors",source:"@site/solutions/2200-2299/2274-maximum-consecutive-floors-without-special-floors-medium.md",sourceDirName:"2200-2299",slug:"/2200-2299/maximum-consecutive-floors-without-special-floors-medium",permalink:"/solutions/2200-2299/maximum-consecutive-floors-without-special-floors-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2274-maximum-consecutive-floors-without-special-floors-medium.md",tags:[],version:"current",sidebarPosition:2274,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximum-consecutive-floors-without-special-floors"},sidebar:"tutorialSidebar",previous:{title:"2273 - Find Resultant Array After Removing Anagrams (Easy)",permalink:"/solutions/2200-2299/find-resultant-array-after-removing-anagrams-easy"},next:{title:"2275 - Largest Combination With Bitwise AND Greater Than Zero (Medium)",permalink:"/solutions/2200-2299/largest-combination-with-bitwise-and-greater-than-zero-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sorting",id:"approach-1-sorting",level:2}],c=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const m={toc:p},f="wrapper";function d(e){let{components:t,...o}=e;return(0,r.kt)(f,(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2274---maximum-consecutive-floors-without-special-floors-medium"},"2274 - Maximum Consecutive Floors Without Special Floors (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-consecutive-floors-without-special-floors"},"https://leetcode.com/problems/maximum-consecutive-floors-without-special-floors")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be ",(0,r.kt)("strong",{parentName:"p"},"special floors"),", used for relaxation only."),(0,r.kt)("p",null,"You are given two integers ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"top"),", which denote that Alice has rented all the floors from ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"top")," (",(0,r.kt)("strong",{parentName:"p"},"inclusive"),"). You are also given the integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"special"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"special[i]")," denotes a special floor that Alice has designated for relaxation."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the ",(0,r.kt)("strong",{parentName:"em"},"maximum")," number of consecutive floors without a special floor"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: bottom = 2, top = 9, special = [4,6]\nOutput: 3\nExplanation: The following are the ranges (inclusive) of consecutive floors without a special floor:\n- (2, 3) with a total amount of 2 floors.\n- (5, 5) with a total amount of 1 floor.\n- (7, 9) with a total amount of 3 floors.\nTherefore, we return the maximum number which is 3 floors.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: bottom = 6, top = 8, special = [7,6,8]\nOutput: 0\nExplanation: Every floor rented is a special floor, so we return 0.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= special.length <= 10^5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= bottom <= special[i] <= top <= 10^9")),(0,r.kt)("li",{parentName:"ul"},"All the values of ",(0,r.kt)("inlineCode",{parentName:"li"},"special")," are ",(0,r.kt)("strong",{parentName:"li"},"unique"),".")),(0,r.kt)("h2",{id:"approach-1-sorting"},"Approach 1: Sorting"),(0,r.kt)("p",null,"We add $bottom - 1$ and $top + 1$ to the array $special$ and sort the array so that we can easily calculate consecutive floors between two special floors."),(0,r.kt)("p",null,"The answer would be the maximum result of $special","[i]"," - special","[i - 1]"," - 1$ for $i = [1 .. n)$."),(0,r.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxConsecutive(int bottom, int top, vector<int>& special) {\n        int ans = 0;\n        special.push_back(bottom - 1);\n        special.push_back(top + 1);\n        sort(special.begin(), special.end());\n        for (int i = 1; i < special.size(); i++) {\n            ans = max(ans, special[i] - special[i - 1] - 1);\n        }\n        return ans;\n    }\n};\n")))}d.isMDXComponent=!0}}]);