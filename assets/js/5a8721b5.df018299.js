"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[4413],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||l;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},64073:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>v,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={description:"Author: @vale-c | https://leetcode.com/problems/valid-palindrome/"},o="0125 - Valid Palindrome (Easy)",i={unversionedId:"0100-0199/valid-palindrome",id:"0100-0199/valid-palindrome",title:"0125 - Valid Palindrome (Easy)",description:"Author: @vale-c | https://leetcode.com/problems/valid-palindrome/",source:"@site/solutions/0100-0199/0125-valid-palindrome.md",sourceDirName:"0100-0199",slug:"/0100-0199/valid-palindrome",permalink:"/solutions/0100-0199/valid-palindrome",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0125-valid-palindrome.md",tags:[],version:"current",sidebarPosition:125,frontMatter:{description:"Author: @vale-c | https://leetcode.com/problems/valid-palindrome/"},sidebar:"tutorialSidebar",previous:{title:"0124 - Binary Tree Maximum Path Sum (Hard)",permalink:"/solutions/0100-0199/binary-tree-maximum-path-sum-hard"},next:{title:"0127 - Word Ladder (Hard)",permalink:"/solutions/0100-0199/word-ladder-hard"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach: Two Pointers",id:"approach-two-pointers",level:2},{value:"Time Complexity",id:"time-complexity",level:4},{value:"Space Complexity",id:"space-complexity",level:4}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},m=c("Tabs"),d=c("TabItem"),u=c("SolutionAuthor"),h={toc:s},f="wrapper";function v(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0125---valid-palindrome-easy"},"0125 - Valid Palindrome (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/valid-palindrome/"},"https://leetcode.com/problems/valid-palindrome/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers."),(0,r.kt)("p",null,"Given a string ",(0,r.kt)("inlineCode",{parentName:"p"},"s"),", return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if it is a palindrome, or ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= s.length <= 2 * 10 ^ 5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s")," consists only of printable ASCII characters.")),(0,r.kt)("h2",{id:"approach-two-pointers"},"Approach: Two Pointers"),(0,r.kt)("p",null,"We can use two pointers to check if the string is a palindrome. We start from the beginning and the end of the string and move progressively towards the middle of the string."),(0,r.kt)("p",null,"We use a variable ",(0,r.kt)("inlineCode",{parentName:"p"},"alpha")," to perform the following operations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Converting all uppercase letters to lowercase")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Ignoring all non-alphanumeric characters"))),(0,r.kt)("p",null,"If the characters at the two pointers are ",(0,r.kt)("em",{parentName:"p"},"not")," the same, we return ",(0,r.kt)("em",{parentName:"p"},"false"),"."),(0,r.kt)("p",null,"If we reach the middle of the string, we return ",(0,r.kt)("em",{parentName:"p"},"true"),"."),(0,r.kt)("h4",{id:"time-complexity"},"Time Complexity"),(0,r.kt)("p",null,"The time complexity for this solution is $O(n)$, where $n$ is the length of the string."),(0,r.kt)("h4",{id:"space-complexity"},"Space Complexity"),(0,r.kt)("p",null,"The space complexity is $O(1)$ since we only use a constant amount of space."),(0,r.kt)(m,{mdxType:"Tabs"},(0,r.kt)(d,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)(u,{name:"@vale-c",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        # discard all non-alphanumeric characters and \n        # convert all uppercase letters to lowercase\n        alpha = ''.join(char for char in s.lower() if char.isalnum()) \n\n        # start pointer from the beginning\n        # end pointer from the end\n        start, end = 0, len(alpha) - 1\n\n        while (start < end):\n            if alpha[start] != alpha[end]:\n                return False\n            else:\n                # move start pointer to the right\n                start += 1\n                # move end pointer to the left\n                end -= 1\n        return True\n"))),(0,r.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(u,{name:"@vale-c",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    bool isPalindrome(string s) {\n        /* discard all non-alphanumeric characters and convert all uppercase letters to lowercase */\n        string alpha = "";\n        for (char c : s) {\n            if (isalnum(c)) {\n                alpha += tolower(c);\n            }\n        }\n\n        int start = 0;\n        int end = alpha.length() - 1;\n\n        while (start < end) {\n            if (alpha[start] != alpha[end]) {\n                return false;\n            } else {\n                start += 1;\n                end -= 1;\n            }\n        }\n        return true;\n    }\n};\n'))),(0,r.kt)(d,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(u,{name:"@vale-c",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'class Solution {\n    public boolean isPalindrome(String s) {\n        /* discard all non-alphanumeric characters and convert all uppercase letters to lowercase */\n        String alpha = s.replaceAll("[^a-zA-Z0-9]", "").toLowerCase();\n        \n        int start = 0;\n        int end = alpha.length() - 1;\n\n        while (start < end) {\n            if (alpha.charAt(start) != alpha.charAt(end)) {\n                return false;\n            } else {\n                start += 1;\n                end -= 1;\n            }\n        }\n        return true;\n    }\n}\n'))),(0,r.kt)(d,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)(u,{name:"@vale-c",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function(s) {\n    /* discard all non-alphanumeric characters and convert all uppercase letters to lowercase */\n    const alpha = s.toLowerCase().replace(/[^a-z0-9]/g, ''); \n    \n    let start = 0;\n    let end = alpha.length - 1;\n\n    while (start < end) {\n        if (alpha[start] != alpha[end]) {\n            return false;\n        } else {\n            start += 1;\n            end -= 1;\n        }\n    }\n    return true;\n};\n")))))}v.isMDXComponent=!0}}]);