"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[35603],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},m=Object.keys(e);for(o=0;o<m.length;o++)n=m[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(o=0;o<m.length;o++)n=m[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,m=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,k=u["".concat(l,".").concat(h)]||u[h]||c[h]||m;return n?o.createElement(k,a(a({ref:t},s),{},{components:n})):o.createElement(k,a({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var m=n.length,a=new Array(m);a[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,a[1]=i;for(var p=2;p<m;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},91419:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>k,frontMatter:()=>m,metadata:()=>i,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const m={description:"Author: @wingkwong | https://leetcode.com/problems/maximize-the-topmost-element-after-k-moves/"},a="2202 - Maximize the Topmost Element After K Moves (Medium)",i={unversionedId:"2100-2199/maximize-the-topmost-element-after-k-moves-medium",id:"2100-2199/maximize-the-topmost-element-after-k-moves-medium",title:"2202 - Maximize the Topmost Element After K Moves (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/maximize-the-topmost-element-after-k-moves/",source:"@site/solutions/2100-2199/2202-maximize-the-topmost-element-after-k-moves-medium.md",sourceDirName:"2100-2199",slug:"/2100-2199/maximize-the-topmost-element-after-k-moves-medium",permalink:"/solutions/2100-2199/maximize-the-topmost-element-after-k-moves-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2202-maximize-the-topmost-element-after-k-moves-medium.md",tags:[],version:"current",sidebarPosition:2202,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximize-the-topmost-element-after-k-moves/"},sidebar:"tutorialSidebar",previous:{title:"2201 - Count Artifacts That Can Be Extracted (Medium)",permalink:"/solutions/2100-2199/count-artifacts-that-can-be-extracted-medium"},next:{title:"2203 - Minimum Weighted Subgraph With the Required Paths (Hard)",permalink:"/solutions/2100-2199/minimum-weighted-subgraph-with-the-required-paths-hard"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Check All Cases",id:"approach-1-check-all-cases",level:2}],s=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const c={toc:p},h="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2202---maximize-the-topmost-element-after-k-moves-medium"},"2202 - Maximize the Topmost Element After K Moves (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximize-the-topmost-element-after-k-moves/"},"https://leetcode.com/problems/maximize-the-topmost-element-after-k-moves/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given a ",(0,r.kt)("strong",{parentName:"p"},"0-indexed")," integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," representing the contents of a ",(0,r.kt)("strong",{parentName:"p"},"pile"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"nums[0]")," is the topmost element of the pile."),(0,r.kt)("p",null,"In one move, you can perform ",(0,r.kt)("strong",{parentName:"p"},"either")," of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the pile is not empty, ",(0,r.kt)("strong",{parentName:"li"},"remove")," the topmost element of the pile."),(0,r.kt)("li",{parentName:"ul"},"If there are one or more removed elements, ",(0,r.kt)("strong",{parentName:"li"},"add")," any one of them back onto the pile. This element becomes the new topmost element.")),(0,r.kt)("p",null,"You are also given an integer ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),", which denotes the total number of moves to be made."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the ",(0,r.kt)("strong",{parentName:"em"},"maximum value")," of the topmost element of the pile possible after ",(0,r.kt)("strong",{parentName:"em"},"exactly"))," ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," ",(0,r.kt)("em",{parentName:"p"},"moves"),". In case it is not possible to obtain a non-empty pile after ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," moves, return ",(0,r.kt)("inlineCode",{parentName:"p"},"-1"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [5,2,2,4,0,6], k = 4\nOutput: 5\nExplanation:\nOne of the ways we can end with 5 at the top of the pile after 4 moves is as follows:\n- Step 1: Remove the topmost element = 5. The pile becomes [2,2,4,0,6].\n- Step 2: Remove the topmost element = 2. The pile becomes [2,4,0,6].\n- Step 3: Remove the topmost element = 2. The pile becomes [4,0,6].\n- Step 4: Add 5 back onto the pile. The pile becomes [5,4,0,6].\nNote that this is not the only way to end with 5 at the top of the pile. It can be shown that 5 is the largest answer possible after 4 moves.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [2], k = 1\nOutput: -1\nExplanation: \nIn the first move, our only option is to pop the topmost element of the pile.\nSince it is not possible to obtain a non-empty pile after one move, we return -1.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 10^5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= nums[i], k <= 10^9"))),(0,r.kt)("h2",{id:"approach-1-check-all-cases"},"Approach 1: Check All Cases"),(0,r.kt)("p",null,"If $$k > n$$, then we can remove all elements and put the maximum element back at the end. However, this cannot be done when $$k - n$$ is an even number when $$n$$ is $$1$$. If $$k > 1$$, we can check the maximum value for the top $$k - 1$$ elements so that we put the maximum value in the last move. The last case is we only remove elements and not putting any of them back, i.e. check $$nums","[k]","$$ is the maximum."),(0,r.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maximumTop(vector<int>& nums, int k) {\n        int n = nums.size(), mx = -1;\n        if (k > n) {\n            auto p = max_element(nums.begin(), nums.end());\n            if (p != nums.end() && (k - n) % 2 == 0 && n == 1) return -1;\n            return *p;\n        }\n        if (k > 1) mx = *max_element(nums.begin(), nums.begin() + k - 1);\n        if (k < n) mx = max(mx, nums[k]);\n        return mx;\n    }\n};\n")))}k.isMDXComponent=!0}}]);