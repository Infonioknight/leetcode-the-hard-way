"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[95983],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=m(n),d=a,k=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return n?r.createElement(k,i(i({ref:t},s),{},{components:n})):r.createElement(k,i({ref:t},s))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},32262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/maximal-score-after-applying-k-operations/"},i="2530 - Maximal Score After Applying K Operations (Medium)",p={unversionedId:"2500-2599/maximal-score-after-applying-k-operations-medium",id:"2500-2599/maximal-score-after-applying-k-operations-medium",title:"2530 - Maximal Score After Applying K Operations (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/maximal-score-after-applying-k-operations/",source:"@site/solutions/2500-2599/2530-maximal-score-after-applying-k-operations-medium.md",sourceDirName:"2500-2599",slug:"/2500-2599/maximal-score-after-applying-k-operations-medium",permalink:"/solutions/2500-2599/maximal-score-after-applying-k-operations-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2500-2599/2530-maximal-score-after-applying-k-operations-medium.md",tags:[],version:"current",sidebarPosition:2530,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximal-score-after-applying-k-operations/"},sidebar:"tutorialSidebar",previous:{title:"2529 - Maximum Count of Positive Integer and Negative Integer (Easy)",permalink:"/solutions/2500-2599/maximum-count-of-positive-integer-and-negative-integer-easy"},next:{title:"2531 - Make Number of Distinct Characters Equal (Medium)",permalink:"/solutions/2500-2599/make-number-of-distinct-characters-equal-medium"}},l={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Priority Queue",id:"approach-1-priority-queue",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=s("Tabs"),c=s("TabItem"),d=s("SolutionAuthor"),k={toc:m},g="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2530---maximal-score-after-applying-k-operations-medium"},"2530 - Maximal Score After Applying K Operations (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximal-score-after-applying-k-operations/"},"https://leetcode.com/problems/maximal-score-after-applying-k-operations/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a ",(0,a.kt)("strong",{parentName:"p"},"0-indexed")," integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),". You have a ",(0,a.kt)("strong",{parentName:"p"},"starting score")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,a.kt)("p",null,"In one ",(0,a.kt)("strong",{parentName:"p"},"operation"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"choose an index ",(0,a.kt)("inlineCode",{parentName:"li"},"i")," such that ",(0,a.kt)("inlineCode",{parentName:"li"},"0 <= i < nums.length"),","),(0,a.kt)("li",{parentName:"ol"},"increase your ",(0,a.kt)("strong",{parentName:"li"},"score")," by ",(0,a.kt)("inlineCode",{parentName:"li"},"nums[i]"),", and"),(0,a.kt)("li",{parentName:"ol"},"replace ",(0,a.kt)("inlineCode",{parentName:"li"},"nums[i]")," with ",(0,a.kt)("inlineCode",{parentName:"li"},"ceil(nums[i] / 3)"),".")),(0,a.kt)("p",null,"Return *the maximum possible ",(0,a.kt)("strong",{parentName:"p"},"score")," you can attain after applying ",(0,a.kt)("strong",{parentName:"p"},"exactly*")," ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," ",(0,a.kt)("em",{parentName:"p"},"operations"),"."),(0,a.kt)("p",null,"The ceiling function ",(0,a.kt)("inlineCode",{parentName:"p"},"ceil(val)")," is the least integer greater than or equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"val"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [10,10,10,10,10], k = 5\nOutput: 50\nExplanation: Apply the operation to each array element exactly once. The final score is 10 + 10 + 10 + 10 + 10 = 50.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,10,3,3,3], k = 3\nOutput: 17\nExplanation: You can do the following operations:\nOperation 1: Select i = 1, so nums becomes [1,4,3,3,3]. Your score increases by 10.\nOperation 2: Select i = 1, so nums becomes [1,2,3,3,3]. Your score increases by 4.\nOperation 3: Select i = 2, so nums becomes [1,1,1,3,3]. Your score increases by 3.\nThe final score is 10 + 4 + 3 = 17.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length, k <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 10^9"))),(0,a.kt)("h2",{id:"approach-1-priority-queue"},"Approach 1: Priority Queue"),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    long long maxKelements(vector<int>& nums, int k) {\n        long long ans = 0;\n        // we want to take the max one in each round\n        priority_queue<int> pq(nums.begin(), nums.end());\n        // perform k rounds\n        while (k--) {\n            // get the max one\n            int t = pq.top(); \n            // pop it out\n            pq.pop();\n            // add to answer\n            ans += t; \n            // add the ceil value\n            // ceil(x / y) = (x + y - 1) / y\n            // ceil(t / 3) = (t + 3 - 1) / 3 = (t + 2) / 3\n            pq.push((t + 2) / 3);\n        }\n        return ans;\n    }\n};\n")))))}y.isMDXComponent=!0}}]);