"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[85170],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>b});var r=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=c(t),d=s,b=p["".concat(u,".").concat(d)]||p[d]||m[d]||a;return t?r.createElement(b,o(o({ref:n},l),{},{components:t})):r.createElement(b,o({ref:n},l))}));function b(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=d;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[p]="string"==typeof e?e:s,o[1]=i;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},19955:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(87462),s=(t(67294),t(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/non-decreasing-subsequences/",tags:["Array","Hash Table","Backtracking","Bit Manipulation"]},o="0491 - Non-decreasing Subsequences (Medium)",i={unversionedId:"0400-0499/non-decreasing-subsequences-medium",id:"0400-0499/non-decreasing-subsequences-medium",title:"0491 - Non-decreasing Subsequences (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/non-decreasing-subsequences/",source:"@site/solutions/0400-0499/0491-non-decreasing-subsequences-medium.md",sourceDirName:"0400-0499",slug:"/0400-0499/non-decreasing-subsequences-medium",permalink:"/solutions/0400-0499/non-decreasing-subsequences-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0491-non-decreasing-subsequences-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"Backtracking",permalink:"/solutions/tags/backtracking"},{label:"Bit Manipulation",permalink:"/solutions/tags/bit-manipulation"}],version:"current",sidebarPosition:491,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/non-decreasing-subsequences/",tags:["Array","Hash Table","Backtracking","Bit Manipulation"]},sidebar:"tutorialSidebar",previous:{title:"0473 - Matchsticks to Square (Medium)",permalink:"/solutions/0400-0499/matchsticks-to-square-medium"},next:{title:"0493 - Reverse Pairs (Hard)",permalink:"/solutions/0400-0499/reverse-pairs-hard"}},u={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Set",id:"approach-1-set",level:2}],l=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",n)},p=l("Tabs"),m=l("TabItem"),d=l("SolutionAuthor"),b={toc:c},h="wrapper";function g(e){let{components:n,...t}=e;return(0,s.kt)(h,(0,r.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"0491---non-decreasing-subsequences-medium"},"0491 - Non-decreasing Subsequences (Medium)"),(0,s.kt)("h2",{id:"problem-link"},"Problem Link"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/non-decreasing-subsequences/"},"https://leetcode.com/problems/non-decreasing-subsequences/")),(0,s.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,s.kt)("p",null,"Given an integer array ",(0,s.kt)("inlineCode",{parentName:"p"},"nums"),", return ",(0,s.kt)("em",{parentName:"p"},"all the different possible non-decreasing subsequences of the given array with at least two elements"),". You may return the answer in ",(0,s.kt)("strong",{parentName:"p"},"any order"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 1:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: nums = [4,6,7,7]\nOutput: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 2:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: nums = [4,4,3,2,1]\nOutput: [[4,4]]\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Constraints:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 15")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"-100 <= nums[i] <= 100"))),(0,s.kt)("h2",{id:"approach-1-set"},"Approach 1: Set"),(0,s.kt)(p,{mdxType:"Tabs"},(0,s.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,s.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"// ideas:\n// 1. use set to store the subsequences\n// 2. iterate each number to compare with the existing subsequences\n// 3. if the last element is less than the current element, we can add this number to the subsequence\n// 4. we can also do the same if the subsequence is empty\n// 5. filter the subsequences to build the final answer\nclass Solution {\npublic:\n    vector<vector<int>> findSubsequences(vector<int>& nums) {\n        vector<vector<int>> ans;\n        // use set to store the subsequences\n        set<vector<int>> s;\n        // init the first subsequence\n        // alternatively you can do it with `set<vector<int>> s = {{}};`\n        s.insert(vector<int>({}));\n        // iterate each number\n        for (auto x : nums) {\n            // use `tmp_s` for storing the new subsequences\n            // because we wants to iterate each subsequence in `s`\n            set<vector<int>> tmp_s;\n            for (auto cur_s : s) {\n                // we can add the current element `x` if\n                // 1. the subsequence is empty\n                // e.g. x = 4, [] => [4]\n                // 2. the last element is less than the current element\n                // e.g. x = 6, [4] => [4, 6]\n                if (cur_s.empty() || cur_s.back() <= x) {\n                    // copy cur_s to new_s\n                    // because we want to add the number to the new set `new_s`\n                    // while keeping the old one `cur_s` unchanged\n                    // e.g. x = 7, cur_s = [4, 6], new_s = [4, 6, 7] \n                    vector<int> new_s = cur_s;\n                    // add the number to the new set `new_s`\n                    new_s.push_back(x);\n                    // add `new_s` to `tmp_s` instead of `s`\n                    // because we are iterating `s`\n                    tmp_s.insert(new_s);\n                    \n                }\n            }\n            // add the result back to `s`\n            s.insert(tmp_s.begin(), tmp_s.end());\n        }\n        // iterate the set to build the final answer\n        for (auto x : s) {\n            // non-decreasing subsequences at least two elements\n            if (x.size() >= 2) {\n                ans.push_back(x);\n            }\n        }\n        return ans;\n    }\n};\n")))))}g.isMDXComponent=!0}}]);