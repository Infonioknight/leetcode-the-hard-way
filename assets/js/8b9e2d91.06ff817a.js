"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[28515],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var i=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var a=i.createContext({}),d=function(e){var t=i.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return i.createElement(a.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,s=e.originalType,a=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(n),c=l,h=m["".concat(a,".").concat(c)]||m[c]||u[c]||s;return n?i.createElement(h,r(r({ref:t},p),{},{components:n})):i.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var s=n.length,r=new Array(s);r[0]=c;var o={};for(var a in t)hasOwnProperty.call(t,a)&&(o[a]=t[a]);o.originalType=e,o[m]="string"==typeof e?e:l,r[1]=o;for(var d=2;d<s;d++)r[d]=n[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2413:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>x,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var i=n(87462),l=(n(67294),n(3905));const s={description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/sort-list/"},r="0148 - Sort List (Medium)",o={unversionedId:"0100-0199/sort-list-medium",id:"0100-0199/sort-list-medium",title:"0148 - Sort List (Medium)",description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/sort-list/",source:"@site/solutions/0100-0199/0148-sort-list-medium.md",sourceDirName:"0100-0199",slug:"/0100-0199/sort-list-medium",permalink:"/solutions/0100-0199/sort-list-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0148-sort-list-medium.md",tags:[],version:"current",sidebarPosition:148,frontMatter:{description:"Author: @vigneshshiv, @radojicic23 | https://leetcode.com/problems/sort-list/"},sidebar:"tutorialSidebar",previous:{title:"0146 - LRU Cache (Medium)",permalink:"/solutions/0100-0199/lru-cache-medium"},next:{title:"0150 - Evaluate Reverse Polish Notation (Medium)",permalink:"/solutions/0100-0199/evaluate-reverse-olish-notation-medium"}},a={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Recursive Merge Sort",id:"approach-1-recursive-merge-sort",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",t)},m=p("Tabs"),u=p("TabItem"),c=p("SolutionAuthor"),h={toc:d},f="wrapper";function x(e){let{components:t,...n}=e;return(0,l.kt)(f,(0,i.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"0148---sort-list-medium"},"0148 - Sort List (Medium)"),(0,l.kt)("h2",{id:"problem-link"},"Problem Link"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sort-list/"},"https://leetcode.com/problems/sort-list/")),(0,l.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,l.kt)("p",null,"Given the ",(0,l.kt)("inlineCode",{parentName:"p"},"head")," of a linked list, return ",(0,l.kt)("em",{parentName:"p"},"the list after sorting it in ",(0,l.kt)("strong",{parentName:"em"},"ascending order")),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example 1:")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg",alt:null})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: head = [4,2,1,3]\nOutput: [1,2,3,4]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example 2:")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg",alt:null})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example 3:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Input: head = []\nOutput: []\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constraints:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The number of nodes in the list is in the range ",(0,l.kt)("inlineCode",{parentName:"li"},"[0, 5 * 10^4]"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-10^5 <= Node.val <= 10^5"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Follow up:")," Can you sort the linked list in ",(0,l.kt)("inlineCode",{parentName:"p"},"O(n logn)")," time and ",(0,l.kt)("inlineCode",{parentName:"p"},"O(1)")," memory (i.e. constant space)?"),(0,l.kt)("h2",{id:"approach-1-recursive-merge-sort"},"Approach 1: Recursive Merge Sort"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Find the middle node and cut the head reference till middle node"),(0,l.kt)("li",{parentName:"ul"},"Keep reducing the nodes size to smaller for comparison (same as like merge sort)"),(0,l.kt)("li",{parentName:"ul"},"Once we reduce nodes size to 1, merge the nodes in sorted (ascending) order."),(0,l.kt)("li",{parentName:"ul"},"Keep merging the nodes till last, to build the sorted list.")),(0,l.kt)("p",null,"Time Complexity: $O(n log(n))$, where $n$ - # of nodes in the list"),(0,l.kt)("p",null,"Space complexity: $O(n)$, $n$ - recursive call stack"),(0,l.kt)(m,{mdxType:"Tabs"},(0,l.kt)(u,{value:"java",label:"Java",mdxType:"TabItem"},(0,l.kt)(c,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        if (Objects.isNull(head) || Objects.isNull(head.next)) {\n            return head;\n        }\n        // Middle node\n        ListNode mid = middleNode(head);\n        // Keep traversing left to get the smallest nodes for comparison (smallest we can get is 1 node)\n        ListNode left = sortList(head);\n        // Starting from middle, to find the smallest nodes for comparison\n        ListNode right = sortList(mid);\n        // Compare the list and return the merged nodes\n        return mergeTwoLists(left, right);\n    }\n    \n    public ListNode middleNode(ListNode head) {\n        ListNode midPrev = null;\n        //\n        while (head != null && head.next != null) {\n            midPrev = (midPrev == null) ? head : midPrev.next;\n            head = head.next.next;\n        }\n        ListNode mid = midPrev.next;\n        // Cut the reference to the next pointer (mid), so that head remains from start to mid.\n        midPrev.next = null;\n        return mid;\n    }\n    \n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        // Base case\n        if (Objects.isNull(list1) && Objects.isNull(list2)) {\n            return list1;\n        }\n        if (Objects.isNull(list1)) {\n            return list2;\n        }\n        if (Objects.isNull(list2)) {\n            return list1;\n        }\n        ListNode head = new ListNode();\n        ListNode node = head;\n        while (Objects.nonNull(list1) && Objects.nonNull(list2)) {\n            if (list1.val <= list2.val) {\n                node.next = list1;\n                list1 = list1.next;\n            } else {\n                node.next = list2;\n                list2 = list2.next;\n            }\n            node = node.next;\n        }\n        // If either of half is not empty then append it\n        node.next = Objects.nonNull(list1) ? list1 : list2;\n        return head.next;\n    }\n}\n"))),(0,l.kt)(u,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)(c,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head):\n        # Base case \n        if not head or not head.next:\n            return head\n        \n        # split the list into two halfs\n        slow, fast = head, head.next \n        while fast and fast.next:\n            slow = slow.next \n            fast = fast.next.next\n        start = slow.next \n        slow.next = None \n        \n        # Sort left portion\n        left = self.sortList(head)\n        # Sort right portion\n        right = self.sortList(start)\n        # Merge them and return\n        return self.merge(left, right)\n\n    def merge(self, list1, list2):\n        tail = dummy = ListNode()\n        # while list1 and list2 are not empty\n        while list1 and list2:\n            # Find smaller value \n            if list1.val < list2.val:\n                tail.next = list1\n                list1 = list1.next \n            else:\n                tail.next = list2\n                list2 = list2.next \n            tail = tail.next\n        # it's possible that one of two lists are not empty\n        if list1: \n            tail.next = list1\n        if list2:\n            tail.next = list2\n        \n        return dummy.next\n"))),(0,l.kt)(u,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)(c,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar sortList = function(head) {\n    // base case \n    if (!head || !head.next) return head;\n    // split the list into two halfs\n    // two pointers\n    let slow = head;\n    let fast = head.next;\n    while (fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    let start = slow.next\n    slow.next = null\n    // sort left portion\n    let left = sortList(head);\n    // sort right portion\n    let right = sortList(start);\n    // merge them and return \n    return merge(left, right);\n};\n// merge sort function\nfunction merge(list1, list2) {\n    let tail = dummy = new ListNode;\n    // while list1 and list2 are not empty\n    while (list1 && list2) {\n        // find smaller value \n        if (list1.val < list2.val) {\n            tail.next = list1;\n            list1 = list1.next;\n        } else {\n            tail.next = list2;\n            list2 = list2.next;\n        }\n        tail = tail.next;\n    }\n    // it's possible that one of two lists are not empty\n    if (list1) tail.next = list1;\n    if (list2) tail.next = list2;\n    return dummy.next;\n};\n"))),(0,l.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,l.kt)(c,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        // base case\n        if (head == NULL || head->next == NULL) return head;\n        // split list into two halfs\n        // slow and fast pointer\n        ListNode* slow = head;\n        ListNode* fast = head->next;\n        while (fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        ListNode* start = slow->next;\n        slow->next = NULL;\n        // sort left portion\n        ListNode* left = sortList(head);\n        // sort right portion\n        ListNode* right = sortList(start);\n        // merge left and right portion\n        return merge(left, right);\n    }\n    // merge sort function\n    ListNode* merge(ListNode* list1, ListNode* list2) {\n        ListNode* dummy = new ListNode(0);\n        ListNode* tail = dummy;\n        // while both lists are not empty\n        while (list1 && list2) {\n            // find smaller value\n            if (list1->val < list2->val) {\n                tail->next = list1;\n                list1 = list1->next;\n            } else {\n                tail->next = list2;\n                list2 = list2->next;\n            }\n            tail = tail->next;\n        }\n        // it's possible that one of two lists are not empty\n        if (list1) tail->next = list1;\n        if (list2) tail->next = list2;\n        return dummy->next;\n    }\n};\n")))))}x.isMDXComponent=!0}}]);