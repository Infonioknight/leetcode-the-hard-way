"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[20333],{3905:(t,e,a)=>{a.d(e,{Zo:()=>l,kt:()=>k});var n=a(67294);function s(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function r(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){s(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,n,s=function(t,e){if(null==t)return{};var a,n,s={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(s[a]=t[a]);return s}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(s[a]=t[a])}return s}var m=n.createContext({}),o=function(t){var e=n.useContext(m),a=e;return t&&(a="function"==typeof t?t(e):r(r({},e),t)),a},l=function(t){var e=o(t.components);return n.createElement(m.Provider,{value:e},t.children)},h="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,s=t.mdxType,i=t.originalType,m=t.parentName,l=p(t,["components","mdxType","originalType","parentName"]),h=o(a),d=s,k=h["".concat(m,".").concat(d)]||h[d]||c[d]||i;return a?n.createElement(k,r(r({ref:e},l),{},{components:a})):n.createElement(k,r({ref:e},l))}));function k(t,e){var a=arguments,s=e&&e.mdxType;if("string"==typeof t||s){var i=a.length,r=new Array(i);r[0]=d;var p={};for(var m in e)hasOwnProperty.call(e,m)&&(p[m]=e[m]);p.originalType=t,p[h]="string"==typeof t?t:s,r[1]=p;for(var o=2;o<i;o++)r[o]=a[o];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},56763:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>r,default:()=>N,frontMatter:()=>i,metadata:()=>p,toc:()=>o});var n=a(87462),s=(a(67294),a(3905));const i={description:"Author: @wingkwong, @ColeB2 | https://leetcode.com/problems/cheapest-flights-within-k-stops/",tags:["Dynamic Programming","Depth-First Search","Breadth-First Search","Graph","Heap (Priority Queue)","Shortest Path"]},r="0787 - Cheapest Flights Within K Stops (Medium)",p={unversionedId:"0700-0799/cheapest-flights-within-k-stops-medium",id:"0700-0799/cheapest-flights-within-k-stops-medium",title:"0787 - Cheapest Flights Within K Stops (Medium)",description:"Author: @wingkwong, @ColeB2 | https://leetcode.com/problems/cheapest-flights-within-k-stops/",source:"@site/solutions/0700-0799/0787-cheapest-flights-within-k-stops-medium.md",sourceDirName:"0700-0799",slug:"/0700-0799/cheapest-flights-within-k-stops-medium",permalink:"/solutions/0700-0799/cheapest-flights-within-k-stops-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0700-0799/0787-cheapest-flights-within-k-stops-medium.md",tags:[{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Depth-First Search",permalink:"/solutions/tags/depth-first-search"},{label:"Breadth-First Search",permalink:"/solutions/tags/breadth-first-search"},{label:"Graph",permalink:"/solutions/tags/graph"},{label:"Heap (Priority Queue)",permalink:"/solutions/tags/heap-priority-queue"},{label:"Shortest Path",permalink:"/solutions/tags/shortest-path"}],version:"current",sidebarPosition:787,frontMatter:{description:"Author: @wingkwong, @ColeB2 | https://leetcode.com/problems/cheapest-flights-within-k-stops/",tags:["Dynamic Programming","Depth-First Search","Breadth-First Search","Graph","Heap (Priority Queue)","Shortest Path"]},sidebar:"tutorialSidebar",previous:{title:"0785 -  Is Graph Bipartite? (Medium)",permalink:"/solutions/0700-0799/is-graph-bipartite-medium"},next:{title:"0799 - Champagne Tower (Medium)",permalink:"/solutions/0700-0799/champagne-tower-medium"}},m={},o=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DP",id:"approach-1-dp",level:2},{value:"Approach 2: Bellman Ford",id:"approach-2-bellman-ford",level:2},{value:"Approach 3: Dijkstra&#39;s Algorithm",id:"approach-3-dijkstras-algorithm",level:2}],l=t=>function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)},h=l("Tabs"),c=l("TabItem"),d=l("SolutionAuthor"),k={toc:o},u="wrapper";function N(t){let{components:e,...a}=t;return(0,s.kt)(u,(0,n.Z)({},k,a,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"0787---cheapest-flights-within-k-stops-medium"},"0787 - Cheapest Flights Within K Stops (Medium)"),(0,s.kt)("h2",{id:"problem-link"},"Problem Link"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/cheapest-flights-within-k-stops/"},"https://leetcode.com/problems/cheapest-flights-within-k-stops/")),(0,s.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,s.kt)("p",null,"There are ",(0,s.kt)("inlineCode",{parentName:"p"},"n")," cities connected by some number of flights. You are given an array ",(0,s.kt)("inlineCode",{parentName:"p"},"flights")," where ",(0,s.kt)("inlineCode",{parentName:"p"},"flights[i] = [fromi, toi, pricei]")," indicates that there is a flight from city ",(0,s.kt)("inlineCode",{parentName:"p"},"fromi")," to city ",(0,s.kt)("inlineCode",{parentName:"p"},"toi")," with cost ",(0,s.kt)("inlineCode",{parentName:"p"},"pricei"),"."),(0,s.kt)("p",null,"You are also given three integers ",(0,s.kt)("inlineCode",{parentName:"p"},"src"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"dst"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,s.kt)("em",{parentName:"p"},(0,s.kt)("strong",{parentName:"em"},"the cheapest price")," from")," ",(0,s.kt)("inlineCode",{parentName:"p"},"src")," ",(0,s.kt)("em",{parentName:"p"},"to")," ",(0,s.kt)("inlineCode",{parentName:"p"},"dst")," ",(0,s.kt)("em",{parentName:"p"},"with at most")," ",(0,s.kt)("inlineCode",{parentName:"p"},"k")," ",(0,s.kt)("em",{parentName:"p"},"stops.")," If there is no such route, return __ ",(0,s.kt)("inlineCode",{parentName:"p"},"-1"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 1:")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-3drawio.png",alt:null})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1\nOutput: 700\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 2:")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-1drawio.png",alt:null})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1\nOutput: 200\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 3:")),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-2drawio.png",alt:null})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0\nOutput: 500\nExplanation:\nThe graph is shown above.\nThe optimal path with no stops from city 0 to 2 is marked in red and has cost 500.\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Constraints:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"1 <= n <= 100")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"0 <= flights.length <= (n * (n - 1) / 2)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"flights[i].length == 3")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"0 <= fromi, toi < n")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"fromi != toi")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"1 <= pricei <= 10^4")),(0,s.kt)("li",{parentName:"ul"},"There will not be any multiple flights between two cities."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"0 <= src, dst, k < n")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"src != dst"))),(0,s.kt)("h2",{id:"approach-1-dp"},"Approach 1: DP"),(0,s.kt)(h,{mdxType:"Tabs"},(0,s.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,s.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"// TC: O(F * K)\n// SC: O(N * K) \n// where \n// - F is the number of flights\n// - K is the number of stops\n// - N is the number of cities and K is the number of stops\nclass Solution {\npublic:\n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {\n        // dp[i][j]: min cost to reach city j using at most i edges from src\n        vector<vector<int>> dp(k + 2, vector<int>(n, INT_MAX));\n        // base case\n        for (int i = 0; i <= k + 1; i++) dp[i][src] = 0;\n        // iterate each stop\n        for (int i = 1; i <= k + 1; i++) {\n            // iterate each flight\n            for (auto f : flights) {\n                int from = f[0], to = f[1], cost = f[2];\n                // ensure city `from` is reachable \n                if (dp[i - 1][from] != INT_MAX) {\n                    // from + cost -> to\n                    dp[i][to] = min(dp[i][to], dp[i - 1][from] + cost);   \n                }\n            }\n        }\n        // if dp[k + 1][dst] == INT_MAX, it means it is unreachable\n        // else return the cost\n        return dp[k + 1][dst] == INT_MAX ? -1 : dp[k + 1][dst];\n    }\n};\n")))),(0,s.kt)("h2",{id:"approach-2-bellman-ford"},"Approach 2: Bellman Ford"),(0,s.kt)(h,{mdxType:"Tabs"},(0,s.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,s.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"// TC: O(F * K + N * K)\n// SC: O(F) \n// where \n// - F is the number of flights\n// - K is the number of stops\n// - N is the number of cities and K is the number of stops\nclass Solution {\npublic:\n    // https://leetcodethehardway.com/tutorials/graph-theory/bellman-ford-algorithm\n    template<typename T_a3, typename T_vector>\n    void bellman_ford(T_a3 &g, T_vector &dist, int src, int mx_edges) {\n        dist[src] = 0;\n        for (int i = 0; i <= mx_edges; i++) {\n            T_vector ndist = dist;\n            for (auto x : g) {\n                auto [from, to, cost] = x;\n                ndist[to] = min(ndist[to], dist[from] + cost);\n            }\n            dist = ndist;\n        }\n    }\n    \n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {\n        // we can directly use bellman ford template here (prerequisite: you need to understand bellman ford algo)\n        // bellman ford algo is used to find the shortest paths from source node to other nodes in a weighted graph\n        vector<array<int, 3>> g;\n        // initially cost with a large value\n        // cost[i] means the cheapest price from src to city i\n        vector<int> cost(n, 1e9);\n        // reconstruct a bit - {src, dst, cost}\n        for (auto f : flights) g.push_back({f[0], f[1], f[2]});\n        bellman_ford(g, cost, src, k);\n        // if cost[dst] == 1e9, it means it is unreachable\n        // else we can show cost[dst]\n        return cost[dst] == 1e9 ? -1 : cost[dst];\n    }\n};\n")))),(0,s.kt)("h2",{id:"approach-3-dijkstras-algorithm"},"Approach 3: Dijkstra's Algorithm"),(0,s.kt)("p",null,"We can use Dijkstra's Algorithm to find the shortest path. Dijkstra's Algorithm uses a heap for weights of distance we travelled, meaning with a min heap we can always check the path that is currently the shortest. One key difference though is instead of a visited set, we will use a hash map, as we might visit a city early, but run out of stops and a set would prevent us from reaching this city again. So to prevent this we can use a hash map that maps cities to stops, and if we reach a city with fewer stops than last time, we can visit this city again."),(0,s.kt)("p",null,"Time Complexity: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"F"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"C"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mi",{parentName:"mrow"},"C"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O((F + C)logC)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"(("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))," Where ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"F")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"F")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F")))))," is the number of flights, and ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"C")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"C")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C")))))," is the number of cities. Worst case we must take all flights and visit all cities, updating our heap ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"g"),(0,s.kt)("mi",{parentName:"mrow"},"C")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"logC")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C")))))," times at each city."),(0,s.kt)("p",null,"Space Complexity: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"C"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(C)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))," Where ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"C")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"C")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C")))))," is the number of cities. We must create an adjacency list, a heap, and a visited dictionary, all of which scale proportionally to the number of cities."),(0,s.kt)(h,{mdxType:"Tabs"},(0,s.kt)(c,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)(d,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:\n        # create an adjacency list\n        adj_list = [[] for _ in range(n)]\n        # adjacenty list will be a list for cities and prices\n        # we can fly to from a desitination, i, in the list.\n        for from_i, to_i, price_i in flights:\n            adj_list[from_i].append((to_i, price_i))\n        # heap (price, stops, destination)\n        heap = [(0, 0, src)]\n        visited = defaultdict(int)\n\n        while heap:\n            # pop off the lowest price destination in our heap.\n            # Tracking price, # of stops we took, and destination.\n            price, stops, dest = heapq.heappop(heap)\n            # if we reached the destination, return the total price.\n            if dest == dst:\n                return price\n            # Track the destination as visited, and stops to reach it.\n            visited[dest] = stops\n            # Loop through all potential flights from current destination.\n            for to_i, price_i in adj_list[dest]:\n                # stops > k, it means this path doesn't work.\n                # also if to destination isn't visited, or it is\n                # visited, but the # of stops < # of stops it took us\n                # to reach the city the last time:\n                if stops <= k and (to_i not in visited or stops < visited[to_i]):\n                    # add that destination to the queue.\n                    # price, stops, to destination. Where price is the\n                    # current running price + price to fly there.\n                    # The stops should be incremented by 1, and\n                    # the destination is the to_i value.\n                    heapq.heappush(heap, (price + price_i, stops + 1, to_i))\n        # process everything but never reach destination, return -1\n        return -1\n")))))}N.isMDXComponent=!0}}]);