"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[84558],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,f=c["".concat(u,".").concat(d)]||c[d]||m[d]||l;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},25035:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>y,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const l={description:"Author: @wingkwong, @deepanshu-rawat6, @radojicic23 | https://leetcode.com/problems/valid-perfect-square/"},o="0367 - Valid Perfect Square (Easy)",i={unversionedId:"0300-0399/valid-perfect-square-easy",id:"0300-0399/valid-perfect-square-easy",title:"0367 - Valid Perfect Square (Easy)",description:"Author: @wingkwong, @deepanshu-rawat6, @radojicic23 | https://leetcode.com/problems/valid-perfect-square/",source:"@site/solutions/0300-0399/0367-valid-perfect-square-easy.md",sourceDirName:"0300-0399",slug:"/0300-0399/valid-perfect-square-easy",permalink:"/solutions/0300-0399/valid-perfect-square-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0300-0399/0367-valid-perfect-square-easy.md",tags:[],version:"current",sidebarPosition:367,frontMatter:{description:"Author: @wingkwong, @deepanshu-rawat6, @radojicic23 | https://leetcode.com/problems/valid-perfect-square/"},sidebar:"tutorialSidebar",previous:{title:"0365 - Water and Jug Problem (Medium)",permalink:"/solutions/0300-0399/water-and-jug-problem-medium"},next:{title:"0374 - Guess Number Higher or Lower (Easy)",permalink:"/solutions/0300-0399/guess-number-higher-or-lower-easy"}},u={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=s("Tabs"),m=s("TabItem"),d=s("SolutionAuthor"),f={toc:p},h="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0367---valid-perfect-square-easy"},"0367 - Valid Perfect Square (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/valid-perfect-square/"},"https://leetcode.com/problems/valid-perfect-square/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given a ",(0,a.kt)("strong",{parentName:"p"},"positive")," integer ",(0,a.kt)("em",{parentName:"p"},"num"),", write a function which returns True if ",(0,a.kt)("em",{parentName:"p"},"num")," is a perfect square else False."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Follow up:")," ",(0,a.kt)("strong",{parentName:"p"},"Do not")," use any built-in library function such as ",(0,a.kt)("inlineCode",{parentName:"p"},"sqrt"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: num = 16\nOutput: true\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: num = 14\nOutput: false\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= num <= 2^31 - 1"))),(0,a.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,a.kt)("admonition",{title:"Prerequisite",type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../../tutorials/basic-topics/binary-search"},"Binary Search")))),(0,a.kt)("p",null,"This approach is similar to Standard Binary Search, just need check for $mid*mid$ and $num$ . Finally, we also need to check for overflow, for that its better to use long long in Cpp or long in Java.\nThis solution gives $O( log n )$ time complexity and $O( 1 )$ space complexity."),(0,a.kt)(c,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isPerfectSquare(int num) {\n        // init possible range\n        // for num > 2, the range is actually [2 .. num / 2]\n        long long l = 1, r = num;\n        while (l < r) {\n            long long m = l + (r - l) / 2;\n            // exclude m\n            if (num > m * m) l = m + 1;\n            // include m\n            else r = m;\n        }\n        // check if it is a perfect square\n        return l * l == num;\n    }\n};\n"))),(0,a.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(d,{name:"@deepanshu-rawat6",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean isPerfectSquare(int num) {\n        // Binary Search \n        // choosing long because of overflow \n        long s = 0, e = num;\n        while (s <= e) {\n            long mid = s + (e - s) / 2;\n            // check if it's a perfect square\n            if (mid * mid == num) { \n                return true;\n            }\n            // checks where num lies above or below mid*mid\n            // then change the values of s or e accordingly\n            if (mid * mid < num) s = mid + 1;\n            else e = mid - 1;\n        }\n        // return false if no result found\n        return false;\n    }\n}\n"))),(0,a.kt)(m,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def isPerfectSquare(self, num: int) -> bool:\n        left = 0\n        right = num\n        while left <= right:\n            mid = (left + right) // 2\n            if mid ** 2 == num:\n                return True\n            elif mid ** 2 < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n"))),(0,a.kt)(m,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number} num\n * @return {boolean}\n */\nvar isPerfectSquare = function(num) {\n    let left = 0;\n    let right = num;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (mid ** 2 === num) {\n            return true;\n        } else if (mid ** 2 > num) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return false;\n}\n")))))}y.isMDXComponent=!0}}]);