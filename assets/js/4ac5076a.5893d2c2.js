"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[22644],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return t?r.createElement(h,o(o({ref:n},c),{},{components:t})):r.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},81506:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/longest-palindromic-substring/",tags:["String","Dynamic Programming"]},o="0005 - Longest Palindromic Substring (Medium)",l={unversionedId:"0000-0099/longest-palindromic-substring-medium",id:"0000-0099/longest-palindromic-substring-medium",title:"0005 - Longest Palindromic Substring (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/longest-palindromic-substring/",source:"@site/solutions/0000-0099/0005-longest-palindromic-substring-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/longest-palindromic-substring-medium",permalink:"/solutions/0000-0099/longest-palindromic-substring-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0005-longest-palindromic-substring-medium.md",tags:[{label:"String",permalink:"/solutions/tags/string"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"}],version:"current",sidebarPosition:5,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/longest-palindromic-substring/",tags:["String","Dynamic Programming"]},sidebar:"tutorialSidebar",previous:{title:"0004 - Median of Two Sorted Arrays",permalink:"/solutions/0000-0099/median-of-two-sorted-arrays-hard"},next:{title:"0006 - Zigzag Conversion (Medium)",permalink:"/solutions/0000-0099/zigzag-conversion-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Manacher&#39;s Algorithm",id:"approach-1-manachers-algorithm",level:2},{value:"Approach 2: Character Set",id:"approach-2-character-set",level:2},{value:"Approach 3: ASCII Character Array (Optimal Solution)",id:"approach-3-ascii-character-array-optimal-solution",level:2}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},m=c("Tabs"),u=c("TabItem"),d=c("SolutionAuthor"),h={toc:p},g="wrapper";function k(e){let{components:n,...t}=e;return(0,a.kt)(g,(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0005---longest-palindromic-substring-medium"},"0005 - Longest Palindromic Substring (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-palindromic-substring/"},"https://leetcode.com/problems/longest-palindromic-substring/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given a string ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),", return ",(0,a.kt)("em",{parentName:"p"},"the longest palindromic substring")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "babad"\nOutput: "bab"\nExplanation: "aba" is also a valid answer.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "cbbd"\nOutput: "bb"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= s.length <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s")," consist of only digits and English letters.")),(0,a.kt)("h2",{id:"approach-1-manachers-algorithm"},"Approach 1: Manacher's Algorithm"),(0,a.kt)("p",null,"The most efficient solution is using Manacher's Algorithm to solve it in O(n). It is faster than other solutions because it exploits when a palindrome happens inside another palindrome."),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string manacher(string s) {\n      int n = (int) s.size();\n      // d1[i]: the number of palindromes accordingly with odd lengths with centers in the position i.\n      // d2[i]: the number of palindromes accordingly with even lengths with centers in the position i. \n      vector<int> d1(n), d2(n);\n      int l1 = 0, r1 = -1, l2 = 0, r2 = -1, mx_len = 0, start = 0;\n      for (int i = 0; i < n; i++) {\n          // ----------------------\n          // calculate d1[i]\n          // ----------------------\n          int k = (i > r1) ? 1 : min(d1[l1 + r1 - i], r1 - i + 1);\n          while (0 <= i - k && i + k < n && s[i - k] == s[i + k]) k++;\n          d1[i] = k--;\n          if (i + k > r1) l1 = i - k, r1 = i + k;\n          if(d1[i] * 2 > mx_len) start = i - k, mx_len = d1[i] * 2 - 1;\n          // ----------------------\n          // calculate d2[i] \n          // ----------------------\n          k = (i > r2) ? 0 : min(d2[l2 + r2 - i + 1], r2 - i + 1);\n          while (0 <= i - k - 1 && i + k < n && s[i - k - 1] == s[i + k]) k++;\n          d2[i] = k--;\n          if (i + k > r2) l2 = i - k - 1, r2 = i + k;\n          if(d2[i] * 2 > mx_len) start = i - k - 1, mx_len = d2[i] * 2;\n      }\n      // return the longest palindrome\n      return s.substr(start, mx_len);\n    }\n    \n    string longestPalindrome(string s) {\n        // Using Manacher's algorithm \n        return manacher(s);\n    }\n};\n")))),(0,a.kt)("h2",{id:"approach-2-character-set"},"Approach 2: Character Set"),(0,a.kt)("p",null,"With the help of HashSet, add every character while iterating and if the character is found already in the Set, count those characters (+2), and remove the char from the Set. Finally if the Set is not empty, then we can add 1 more character to be in the middle to form a palindrome, so count 1 and return it. "),(0,a.kt)("p",null,"Time complexity: $O(n)$, where $n$ - # of characters, All HashSet operation are $O(1)$ constant time"),(0,a.kt)("p",null,"Space complexity: $O(n)$, Maintaining $n/2$ characters in the Set, Constants are ignored, so its $O(n)$ extra space"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(u,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(d,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int longestPalindrome(String s) {\n    if (s.length() == 1) return 1;\n    int count = 0;\n    Set<Character> seen = new HashSet<>();\n    for (char c : s.toCharArray()) {\n        if (!seen.add(c)) {\n            count += 2;\n            seen.remove(c);\n        }\n    }\n    return !seen.isEmpty() ? count + 1 : count;\n}\n")))),(0,a.kt)("h2",{id:"approach-3-ascii-character-array-optimal-solution"},"Approach 3: ASCII Character Array (Optimal Solution)"),(0,a.kt)("p",null,"As the problems states, constraints are ",(0,a.kt)("inlineCode",{parentName:"p"},"a-zA-Z"),", So optimally we can maintain a char array of size $52$. "),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://bluesock.org/~willg/dev/ascii.html"},"ASCII")," range for ",(0,a.kt)("inlineCode",{parentName:"p"},"A-Z")," range is $65 - 90$ and ",(0,a.kt)("inlineCode",{parentName:"p"},"a-z")," range is $97 - 122$."),(0,a.kt)("p",null,"Since the ranges are clear and alphabetic char size 26 for each, and the same can be placed in ",(0,a.kt)("inlineCode",{parentName:"p"},"int[]")," array. Convert any ",(0,a.kt)("inlineCode",{parentName:"p"},"A-Z")," char to $0-26$ range. "),(0,a.kt)("p",null,"Eg: If a char is ",(0,a.kt)("inlineCode",{parentName:"p"},"D")," and subtracting ",(0,a.kt)("inlineCode",{parentName:"p"},"'A'")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"'D'")," find the index, that is $4$ which is same as ",(0,a.kt)("inlineCode",{parentName:"p"},"c - 'A'"),". "),(0,a.kt)("p",null,"For ",(0,a.kt)("inlineCode",{parentName:"p"},"a-z")," characters ASCII values are $>= 97$, so it's better separate the slots. So first half the array has ",(0,a.kt)("inlineCode",{parentName:"p"},"A-Z")," range and other halfs maintained for ",(0,a.kt)("inlineCode",{parentName:"p"},"a-z")," range. "),(0,a.kt)("p",null,"Time complexity: $O(n)$, where $n$ - # of characters"),(0,a.kt)("p",null,"Space complexity: $O(1)$, Maintaining $O(52)$ chars in the array, which is considered $O(1)$ extra space"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(u,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(d,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public int longestPalindrome(String s) {\n    if (s.length() == 1) return 1;\n    int count = 0;\n    int[] chars = new int[52];\n    for (char c : s.toCharArray()) {\n        if (c >= 97) chars[c - 'a' + 26]++;\n        else chars[c - 'A']++;\n    }\n    for (int num : chars) {\n        count += (num / 2) * 2;\n    }\n    return count == s.length() ? count : count + 1;\n}\n")))))}k.isMDXComponent=!0}}]);