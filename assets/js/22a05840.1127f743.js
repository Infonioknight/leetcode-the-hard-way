"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[94673],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,d=u["".concat(l,".").concat(h)]||u[h]||m[h]||i;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},25011:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return k},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/best-team-with-no-conflicts/",tags:["Array","Dynamic Programming","Sorting"]},l="1626 - Best Team With No Conflicts (Medium)",c={unversionedId:"1600-1699/best-team-with-no-conflicts-medium",id:"1600-1699/best-team-with-no-conflicts-medium",title:"1626 - Best Team With No Conflicts (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/best-team-with-no-conflicts/",source:"@site/solutions/1600-1699/1626-best-team-with-no-conflicts-medium.md",sourceDirName:"1600-1699",slug:"/1600-1699/best-team-with-no-conflicts-medium",permalink:"/solutions/1600-1699/best-team-with-no-conflicts-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1600-1699/1626-best-team-with-no-conflicts-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Sorting",permalink:"/solutions/tags/sorting"}],version:"current",sidebarPosition:1626,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/best-team-with-no-conflicts/",tags:["Array","Dynamic Programming","Sorting"]},sidebar:"tutorialSidebar",previous:{title:"1600 - 1699",permalink:"/solutions/category/1600---1699"},next:{title:"1631 - Path With Minimum Effort (Medium)",permalink:"/solutions/1600-1699/path-with-minimum-effort-medium"}},p={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},h=u("Tabs"),d=u("TabItem"),g=u("SolutionAuthor"),f={toc:m};function k(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"1626---best-team-with-no-conflicts-medium"},"1626 - Best Team With No Conflicts (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/best-team-with-no-conflicts/"},"https://leetcode.com/problems/best-team-with-no-conflicts/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the ",(0,i.kt)("strong",{parentName:"p"},"sum")," of scores of all the players in the team."),(0,i.kt)("p",null,"However, the basketball team is not allowed to have ",(0,i.kt)("strong",{parentName:"p"},"conflicts"),". A ",(0,i.kt)("strong",{parentName:"p"},"conflict")," exists if a younger player has a ",(0,i.kt)("strong",{parentName:"p"},"strictly higher")," score than an older player. A conflict does ",(0,i.kt)("strong",{parentName:"p"},"not")," occur between players of the same age."),(0,i.kt)("p",null,"Given two lists, ",(0,i.kt)("inlineCode",{parentName:"p"},"scores")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ages"),", where each ",(0,i.kt)("inlineCode",{parentName:"p"},"scores[i]")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ages[i]")," represents the score and age of the ",(0,i.kt)("inlineCode",{parentName:"p"},"ith")," player, respectively, return ",(0,i.kt)("em",{parentName:"p"},"the highest overall score of all possible basketball teams"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]\nOutput: 34\nExplanation:\xa0You can choose all the players.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: scores = [4,5,6,5], ages = [2,1,2,1]\nOutput: 16\nExplanation:\xa0It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: scores = [1,2,3,5], ages = [8,9,10,1]\nOutput: 6\nExplanation:\xa0It is best to choose the first 3 players.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= scores.length, ages.length <= 1000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scores.length == ages.length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= scores[i] <= 106")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= ages[i] <= 1000"))),(0,i.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,i.kt)("p",null,"For this kind of DP questions, remember the following"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"calculate the result if you skip this candidate"),(0,i.kt)("li",{parentName:"ul"},"calculate the result if you pick this candidate"),(0,i.kt)("li",{parentName:"ul"},"take the max result of them then memorise it")),(0,i.kt)(h,{mdxType:"Tabs"},(0,i.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(g,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int dp[1005][1005];\n    // i is the index of g\n    // age is the max age so far\n    int dfs(vector<pair<int, int>>& g, int i, int age) {\n        // if i reaches the end, then return 0\n        if (i == g.size()) return 0;\n        // if dp[i][age] is calculated before, return it directly\n        if (dp[i][age] != -1) return dp[i][age];\n        // we have two choices - either take this player or skip it\n        // we first calculate the score if we skip this player\n        int res = dfs(g, i + 1, age);\n        // if we want to take this player, we need to check if there is a conflict\n        // since the score is sorted, we just need to check the age\n        // if we take this player, the score will be increased by g[i].first\n        // then we add the result from `dfs(g, i + 1, g[i].second)`\n        // since we take this player, we need ti mark the age as g[i].second\n        if (g[i].second >= age) res = max(res, g[i].first + dfs(g, i + 1, g[i].second));\n        // memo it\n        return dp[i][age] = res;\n    }\n    int bestTeamScore(vector<int>& scores, vector<int>& ages) {\n        // init dp with initial value -1\n        memset(dp, -1, sizeof(dp));\n        // we sort by score, then age\n        vector<pair<int, int>> g;\n        for (int i = 0; i < scores.size(); i++) {\n            g.push_back({scores[i], ages[i]});\n        }\n        sort(g.begin(), g.end());\n        return dfs(g, 0, 0);\n    }\n};\n")))))}k.isMDXComponent=!0}}]);