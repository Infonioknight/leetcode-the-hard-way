"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[30651],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),k=r,d=c["".concat(o,".").concat(k)]||c[k]||u[k]||i;return n?a.createElement(d,l(l({ref:t},m),{},{components:n})):a.createElement(d,l({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=k;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},39119:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/smallest-sufficient-team/"},l="1125 - Smallest Sufficient Team (Hard)",s={unversionedId:"1100-1199/smallest-sufficient-team-hard",id:"1100-1199/smallest-sufficient-team-hard",title:"1125 - Smallest Sufficient Team (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/smallest-sufficient-team/",source:"@site/solutions/1100-1199/1125-smallest-sufficient-team-hard.md",sourceDirName:"1100-1199",slug:"/1100-1199/smallest-sufficient-team-hard",permalink:"/solutions/1100-1199/smallest-sufficient-team-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1100-1199/1125-smallest-sufficient-team-hard.md",tags:[],version:"current",sidebarPosition:1125,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/smallest-sufficient-team/"},sidebar:"tutorialSidebar",previous:{title:"1100 - 1199",permalink:"/solutions/category/1100---1199"},next:{title:"1135 - Connecting Cities With Minimum Cost (Medium)",permalink:"/solutions/1100-1199/connecting-cities-with-minimum-cost-medium"}},o={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DP Bit Masking",id:"approach-1-dp-bit-masking",level:2}],m=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var c;const u={toc:p},k="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(k,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1125---smallest-sufficient-team-hard"},"1125 - Smallest Sufficient Team (Hard)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/smallest-sufficient-team/"},"https://leetcode.com/problems/smallest-sufficient-team/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"In a project, you have a list of required skills ",(0,r.kt)("inlineCode",{parentName:"p"},"req_skills"),", and a list of people. The ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," person ",(0,r.kt)("inlineCode",{parentName:"p"},"people[i]")," contains a list of skills that the person has."),(0,r.kt)("p",null,"Consider a sufficient team: a set of people such that for every required skill in ",(0,r.kt)("inlineCode",{parentName:"p"},"req_skills"),", there is at least one person in the team who has that skill. We can represent these teams by the index of each person."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"team = [0, 1, 3]")," represents the people with skills ",(0,r.kt)("inlineCode",{parentName:"li"},"people[0]"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"people[1]"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"people[3]"),".")),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"any sufficient team of the smallest possible size, represented by the index of each person"),". You may return the answer in ",(0,r.kt)("strong",{parentName:"p"},"any order"),"."),(0,r.kt)("p",null,"It is ",(0,r.kt)("strong",{parentName:"p"},"guaranteed")," an answer exists."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: req_skills = ["java","nodejs","reactjs"], people = [["java"],["nodejs"],["nodejs","reactjs"]]\nOutput: [0,2]\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: req_skills = ["algorithms","math","java","reactjs","csharp","aws"], people = [["algorithms","math","java"],["algorithms","math","reactjs"],["java","csharp","aws"],["reactjs","csharp"],["csharp","math"],["aws","java"]]\nOutput: [1,2]\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= req_skills.length <= 16")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= req_skills[i].length <= 16")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"req_skills[i]")," consists of lowercase English letters."),(0,r.kt)("li",{parentName:"ul"},"All the strings of ",(0,r.kt)("inlineCode",{parentName:"li"},"req_skills")," are ",(0,r.kt)("strong",{parentName:"li"},"unique"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= people.length <= 60")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= people[i].length <= 16")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= people[i][j].length <= 16")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"people[i][j]")," consists of lowercase English letters."),(0,r.kt)("li",{parentName:"ul"},"All the strings of ",(0,r.kt)("inlineCode",{parentName:"li"},"people[i]")," are ",(0,r.kt)("strong",{parentName:"li"},"unique"),"."),(0,r.kt)("li",{parentName:"ul"},"Every skill in ",(0,r.kt)("inlineCode",{parentName:"li"},"people[i]")," is a skill in ",(0,r.kt)("inlineCode",{parentName:"li"},"req_skills"),"."),(0,r.kt)("li",{parentName:"ul"},"It is guaranteed a sufficient team exists.")),(0,r.kt)("h2",{id:"approach-1-dp-bit-masking"},"Approach 1: DP Bit Masking"),(0,r.kt)("p",null,"Since the skills are strings, we need to digitise them first. For example, given req","_","skills = ","[",'"java","nodejs","reactjs"], we can turn it to ',"[","0, 1, 2] where each number map the corresponding skill. Let $$dp","[i]","$$ be the number of people for the mask $$i$$ and $$ans","[j]","$$ be the list of people chosen for mask $$j$$. We iterate each people to calculate its skills and iterate each mask to see if adding this person to the team from the old mask could have a smaller team size for the new mask. If so, update $$dp$$ and add this person to $$ans$$."),(0,r.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> smallestSufficientTeam(vector<string>& req_skills, vector<vector<string>>& people) {\n        int n = req_skills.size(), m = people.size();\n        // digitize skills\n        unordered_map<string, int> skills;\n        for (int i = 0; i < n; i++) skills[req_skills[i]] = i;\n        // dp[mask] : number of people for mask\n        vector<int> dp(1 << n, 1e9);\n        // ans[mask] : the list of people for mask\n        vector<vector<int>> ans(1 << n);\n        dp[0] = 0;\n        // iterate people\n        for (int i = 0; i < m; i++) {\n            // skills for the i-th person\n            int p_skill = 0;\n            for (auto s : people[i]) p_skill |= (1 << skills[s]);\n            // compute with previous masks\n            for (int mask = 0; mask < (1 << n); mask++) {\n                // create a new mask\n                int new_mask = mask | p_skill;\n                // check if there is a smaller team for the new_mask\n                if (dp[mask] + 1 < dp[new_mask]) {\n                    dp[new_mask] = dp[mask] + 1;\n                    // take the people from mask\n                    ans[new_mask] = ans[mask];    \n                    // and add the i-th person\n                    ans[new_mask].push_back(i);\n                }\n            }\n        } \n        return ans[(1 << n) - 1];\n    }\n};\n")))}d.isMDXComponent=!0}}]);