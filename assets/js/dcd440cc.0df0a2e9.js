"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[49328],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(t),d=a,g=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},38044:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(87462),a=(t(67294),t(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/longest-nice-subarray/",tags:["Array","Bit Manipulation","Sliding Window"]},o="2401 - Longest Nice Subarray (Medium)",s={unversionedId:"2400-2499/longest-nice-subarray-medium",id:"2400-2499/longest-nice-subarray-medium",title:"2401 - Longest Nice Subarray (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/longest-nice-subarray/",source:"@site/solutions/2400-2499/2401-longest-nice-subarray-medium.md",sourceDirName:"2400-2499",slug:"/2400-2499/longest-nice-subarray-medium",permalink:"/solutions/2400-2499/longest-nice-subarray-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2401-longest-nice-subarray-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Bit Manipulation",permalink:"/solutions/tags/bit-manipulation"},{label:"Sliding Window",permalink:"/solutions/tags/sliding-window"}],version:"current",sidebarPosition:2401,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/longest-nice-subarray/",tags:["Array","Bit Manipulation","Sliding Window"]},sidebar:"tutorialSidebar",previous:{title:"2400 - Number of Ways to Reach a Position After Exactly k Steps (Medium)",permalink:"/solutions/2400-2499/number-of-ways-to-reach-a-position-after-exactly-k-steps-medium"},next:{title:"2404 - Most Frequent Even Element (Easy)",permalink:"/solutions/2400-2499/most-frequent-even-element-easy"}},l={},u=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window + Bit Manipulation",id:"approach-1-sliding-window--bit-manipulation",level:2}],p=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var c;const m={toc:u},d="wrapper";function g(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2401---longest-nice-subarray-medium"},"2401 - Longest Nice Subarray (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given an array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," consisting of ",(0,a.kt)("strong",{parentName:"p"},"positive")," integers."),(0,a.kt)("p",null,"We call a subarray of ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," ",(0,a.kt)("strong",{parentName:"p"},"nice")," if the bitwise ",(0,a.kt)("strong",{parentName:"p"},"AND")," of every pair of elements that are in ",(0,a.kt)("strong",{parentName:"p"},"different")," positions in the subarray is equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the length of the ",(0,a.kt)("strong",{parentName:"em"},"longest")," nice subarray"),"."),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"subarray")," is a ",(0,a.kt)("strong",{parentName:"p"},"contiguous")," part of an array."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note")," that subarrays of length ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," are always considered nice."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,3,8,48,10]\nOutput: 3\nExplanation: The longest nice subarray is [3,8,48]. This subarray satisfies the conditions:\n- 3 AND 8 = 0.\n- 3 AND 48 = 0.\n- 8 AND 48 = 0.\nIt can be proven that no longer nice subarray can be obtained, so we return 3.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [3,1,5,11,13]\nOutput: 1\nExplanation: The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 105")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 10^9"))),(0,a.kt)("h2",{id:"approach-1-sliding-window--bit-manipulation"},"Approach 1: Sliding Window + Bit Manipulation"),(0,a.kt)(p,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int longestNiceSubarray(vector<int>& nums) {\n        // the observation is that each number has unique bits in the nice array\n        // finding a subarray of something -> a hint to use sliding window\n        int l = 0, n = nums.size(), x = 0, ans = 0;\n        // iterate right pointer\n        for (int r = 0; r < n; r++) {\n            // x is the current AND value of current window at this point\n            // now we want to include nums[r] in the window\n            // however, if we include it, the current window may become not nice (i.e. x_new != 0)\n            // therefore, in this case, we need to remove some bits using XOR, \n            // i.e shrinking the window from the left\n            while ((x & nums[r]) != 0) x ^= nums[l++];\n            // here we are good to include nums[r], we use OR to set the bits\n            x |= nums[r];\n            // record the max length\n            ans = max(ans, r - l + 1);\n        }\n        return ans;\n    }\n};\n")))}g.isMDXComponent=!0}}]);