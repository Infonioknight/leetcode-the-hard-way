"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[54126],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),c=a,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},41937:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const i={description:"Author: @ColeB2, wingkwong | https://leetcode.com/problems/max-area-of-island/",tags:["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},o="0695 - Max Area of Island (Medium)",l={unversionedId:"0600-0699/max-area-of-island-medium",id:"0600-0699/max-area-of-island-medium",title:"0695 - Max Area of Island (Medium)",description:"Author: @ColeB2, wingkwong | https://leetcode.com/problems/max-area-of-island/",source:"@site/solutions/0600-0699/0695-max-area-of-island-medium.md",sourceDirName:"0600-0699",slug:"/0600-0699/max-area-of-island-medium",permalink:"/solutions/0600-0699/max-area-of-island-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0600-0699/0695-max-area-of-island-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Depth-First Search",permalink:"/solutions/tags/depth-first-search"},{label:"Breadth-First Search",permalink:"/solutions/tags/breadth-first-search"},{label:"Union Find",permalink:"/solutions/tags/union-find"},{label:"Matrix",permalink:"/solutions/tags/matrix"}],version:"current",sidebarPosition:695,frontMatter:{description:"Author: @ColeB2, wingkwong | https://leetcode.com/problems/max-area-of-island/",tags:["Array","Depth-First Search","Breadth-First Search","Union Find","Matrix"]},sidebar:"tutorialSidebar",previous:{title:"0692 - Top K Frequent Words (Medium)",permalink:"/solutions/0600-0699/top-k-frequent-words-medium"},next:{title:"0698 - Partition to K Equal Sum Subsets (Medium)",permalink:"/solutions/0600-0699/partition-to-k-equal-sum-subsets-medium"}},s={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Breadth-First Search",id:"approach-1-breadth-first-search",level:2},{value:"Approach 2: Depth-First Search",id:"approach-2-depth-first-search",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=p("Tabs"),m=p("TabItem"),c=p("SolutionAuthor"),h={toc:d},f="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0695---max-area-of-island-medium"},"0695 - Max Area of Island (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/max-area-of-island/"},"https://leetcode.com/problems/max-area-of-island/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given an ",(0,a.kt)("inlineCode",{parentName:"p"},"m x n")," binary matrix ",(0,a.kt)("inlineCode",{parentName:"p"},"grid"),". An island is a group of ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),"'s (representing land) connected ",(0,a.kt)("strong",{parentName:"p"},"4-directionally")," (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water."),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"area")," of an island is the number of cells with a value ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," in the island."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the maximum ",(0,a.kt)("strong",{parentName:"em"},"area")," of an island in")," ",(0,a.kt)("inlineCode",{parentName:"p"},"grid"),". If there is no island, return ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\nOutput: 6\nExplanation: The answer is not 11, because the island must be connected 4-directionally.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: grid = [[0,0,0,0,0,0,0,0]]\nOutput: 0\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"m == grid.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == grid[i].length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 50")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"grid[i][j]")," is either ",(0,a.kt)("inlineCode",{parentName:"li"},"0")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),".")),(0,a.kt)("h2",{id:"approach-1-breadth-first-search"},"Approach 1: Breadth-First Search"),(0,a.kt)("p",null,"We can traverse the grid, and when we find an island, run our BFS on the island. For every $$1$$ we find we can increment our area counter, as well as update a global max area variable."),(0,a.kt)("p",null,"Time Complexity: $$O(m * n)$$ must traverse each cell in the grid."),(0,a.kt)("p",null,"Space Complexity: $$O(m * n)$$. For the size of our queue."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(m,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(c,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        # intiialize rows, cols, and a global max area to track\n        # the size of the largest island.\n        ROWS, COLS = len(grid), len(grid[0])\n        self.max_area = 0\n        # BFS function, takes to parameters, row, r and column, c.\n        def bfs(r, c):\n            # initialize our queue with current row, r and column, c\n            q = deque([(r,c)])\n            # initialize area starting at 0.\n            area = 0\n\n            while q:\n                # pop row and col off the queue\n                row, col = q.popleft()\n                # check that it is inbounds, and a 1/land\n                if (row < 0 or row >= ROWS\n                    or col < 0 or col >= COLS\n                    or grid[row][col] != 1\n                    ):\n                    continue\n                # It is in bounds and land, we will mark it as visited\n                # we can re-use the grid by just setting the spot to -1.\n                grid[row][col] = -1\n                # update our area and global max area.\n                area += 1\n                self.max_area = max(area, self.max_area)\n                # loop through 4 adjacent directions\n                for dr, dc in ((1,0), (0,1), (-1,0), (0, -1)):\n                    # add 4 adjacent cells to our queue.\n                    q.append((row + dr, col + dc))\n        # Loop through our board\n        for r in range(ROWS):\n            for c in range(COLS):\n                # find land, run bfs at that position\n                if grid[r][c] == 1:\n                    bfs(r, c)\n        return self.max_area\n")))),(0,a.kt)("h2",{id:"approach-2-depth-first-search"},"Approach 2: Depth-First Search"),(0,a.kt)("p",null,"For each land, we can run DFS to calculate the area of the current island. We set the visited cell to other value so that it won't re-calculate. Get the maximum area and return it."),(0,a.kt)("p",null,"Time Complexity: $$O(m * n)$$ must traverse each cell in the grid."),(0,a.kt)("p",null,"Space Complexity: $$O(m * n)$$. "),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int ans = 0;\n    int maxAreaOfIsland(vector<vector<int>>& grid) {\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid[0].size(); j++) {\n                if(grid[i][j] == 1) {\n                    // if it is 1, then we can start from this cell\n                    ans = max(ans, dfs(grid, i, j));\n                }\n            }\n        }\n        return ans;\n    }\n    \n    int dfs(vector<vector<int>>& grid, int i, int j) {\n        // if it is 0 or out of bound, return 0\n        if(i < 0 || j < 0 || i > grid.size() - 1 || j > grid[0].size() - 1 || grid[i][j] != 1) return 0;\n        // set it to 0 so that we won't visit it again\n        grid[i][j] = 0;\n        // 1 (current cell) + the result from four directions\n        return 1 +\n            dfs(grid, i + 1, j) +\n            dfs(grid, i, j + 1) +\n            dfs(grid, i - 1, j) +\n            dfs(grid, i, j - 1);\n    }\n};\n")))))}g.isMDXComponent=!0}}]);