"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[86227],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=i,h=u["".concat(p,".").concat(d)]||u[d]||c[d]||a;return n?r.createElement(h,o(o({ref:t},m),{},{components:n})):r.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},55337:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/unique-paths-ii/",tags:["Array","Dynamic Programming","Matrix"]},o="0063 - Unique Paths II (Medium)",l={unversionedId:"0000-0099/unique-paths-ii-medium",id:"0000-0099/unique-paths-ii-medium",title:"0063 - Unique Paths II (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/unique-paths-ii/",source:"@site/solutions/0000-0099/0063-unique-paths-ii-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/unique-paths-ii-medium",permalink:"/solutions/0000-0099/unique-paths-ii-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0063-unique-paths-ii-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Matrix",permalink:"/solutions/tags/matrix"}],version:"current",sidebarPosition:63,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/unique-paths-ii/",tags:["Array","Dynamic Programming","Matrix"]},sidebar:"tutorialSidebar",previous:{title:"0062 - Unique Paths (Medium)",permalink:"/solutions/0000-0099/unique-paths-medium"},next:{title:"0066 - Plus One (Easy)",permalink:"/solutions/0000-0099/plus-one-easy"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},u=m("Tabs"),c=m("TabItem"),d=m("SolutionAuthor"),h={toc:s},b="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(b,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0063---unique-paths-ii-medium"},"0063 - Unique Paths II (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/unique-paths-ii/"},"https://leetcode.com/problems/unique-paths-ii/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given an ",(0,i.kt)("inlineCode",{parentName:"p"},"m x n")," integer array ",(0,i.kt)("inlineCode",{parentName:"p"},"grid"),". There is a robot initially located at the ",(0,i.kt)("strong",{parentName:"p"},"top-left corner")," (i.e., ",(0,i.kt)("inlineCode",{parentName:"p"},"grid[0][0]"),"). The robot tries to move to the ",(0,i.kt)("strong",{parentName:"p"},"bottom-right corner")," (i.e., ",(0,i.kt)("inlineCode",{parentName:"p"},"grid[m - 1][n - 1]"),"). The robot can only move either down or right at any point in time."),(0,i.kt)("p",null,"An obstacle and space are marked as ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," respectively in ",(0,i.kt)("inlineCode",{parentName:"p"},"grid"),". A path that the robot takes cannot include ",(0,i.kt)("strong",{parentName:"p"},"any")," square that is an obstacle."),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the number of possible unique paths that the robot can take to reach the bottom-right corner"),"."),(0,i.kt)("p",null,"The testcases are generated so that the answer will be less than or equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"2 * 109"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: 2\nExplanation: There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: obstacleGrid = [[0,1],[0,0]]\nOutput: 1\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"m == obstacleGrid.length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n == obstacleGrid[i].length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 100")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"obstacleGrid[i][j]")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),".")),(0,i.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,i.kt)(u,{mdxType:"Tabs"},(0,i.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        // DP - O(N * M)\n        int n = obstacleGrid.size(), m = obstacleGrid[0].size();\n        // dp[i][j]: the number of possible unique paths to reach grid[i][j]\n        vector<vector<int>> dp(n, vector<int>(m));\n        // base case - there is only one way to reach grid[0][0]\n        dp[0][0] = 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (obstacleGrid[i][j]) {\n                    // if there is an obstacle at grid[i][j], \n                    // then we couldn't reach grid[i][j],\n                    // hence setting dp[i][j] to 0\n                    dp[i][j] = 0;\n                } else {\n                    // otherwise, we can either reach grid[i][j] from the left cell dp[i][j - 1]\n                    if (j) dp[i][j] += dp[i][j - 1];\n                    // or from the top cell dp[i - 1][j]\n                    if (i) dp[i][j] += dp[i - 1][j];\n                }\n            }\n        }\n        // the number of possible unique paths \n        // that the robot can take to reach the bottom-right corner\n        return dp[n - 1][m - 1];\n    }\n};\n")))))}g.isMDXComponent=!0}}]);