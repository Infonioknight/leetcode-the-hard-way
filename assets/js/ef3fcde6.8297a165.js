"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[92667],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=u(n),d=a,b=s["".concat(p,".").concat(d)]||s[d]||m[d]||o;return n?r.createElement(b,l(l({ref:t},c),{},{components:n})):r.createElement(b,l({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[s]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},47646:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>b,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/broken-calculator/"},l="0991 - Broken Calculator (Medium)",i={unversionedId:"0900-0999/broken-calculator-medium",id:"0900-0999/broken-calculator-medium",title:"0991 - Broken Calculator (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/broken-calculator/",source:"@site/solutions/0900-0999/0991-broken-calculator-medium.md",sourceDirName:"0900-0999",slug:"/0900-0999/broken-calculator-medium",permalink:"/solutions/0900-0999/broken-calculator-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0991-broken-calculator-medium.md",tags:[],version:"current",sidebarPosition:991,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/broken-calculator/"},sidebar:"tutorialSidebar",previous:{title:"0990 - Satisfiability of Equality Equations (Medium)",permalink:"/solutions/0900-0999/satisfiability-of-equality-equations-medium"},next:{title:"0992 - Subarrays with K Different Integers (Hard)",permalink:"/solutions/0900-0999/subarrays-with-k-different-integers-hard"}},p={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Greedy",id:"approach-1-greedy",level:2}],c=(s="SolutionAuthor",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var s;const m={toc:u},d="wrapper";function b(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0991---broken-calculator-medium"},"0991 - Broken Calculator (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/broken-calculator/"},"https://leetcode.com/problems/broken-calculator/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"There is a broken calculator that has the integer ",(0,a.kt)("inlineCode",{parentName:"p"},"startValue")," on its display initially. In one operation, you can:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"multiply the number on display by ",(0,a.kt)("inlineCode",{parentName:"li"},"2"),", or"),(0,a.kt)("li",{parentName:"ul"},"subtract ",(0,a.kt)("inlineCode",{parentName:"li"},"1")," from the number on display.")),(0,a.kt)("p",null,"Given two integers ",(0,a.kt)("inlineCode",{parentName:"p"},"startValue")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),", return ",(0,a.kt)("em",{parentName:"p"},"the minimum number of operations needed to display")," ",(0,a.kt)("inlineCode",{parentName:"p"},"target")," ",(0,a.kt)("em",{parentName:"p"},"on the calculator"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: startValue = 2, target = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: startValue = 5, target = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: startValue = 3, target = 10\nOutput: 3\nExplanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= x, y <= 10^9"))),(0,a.kt)("h2",{id:"approach-1-greedy"},"Approach 1: Greedy"),(0,a.kt)("p",null,"We solve it backwards. For operation 1, instead of multiplying the number by $$2$$, we divide it by $$2$$ if possible. Similarly, we add $$1$$ to the number for operation 2. At the end, the number may be less than startValue, in this case we can only use operation 2."),(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int brokenCalc(int startValue, int target) {\n        int ans = 0;\n        while (target > startValue) {\n            if (target % 2 == 0) {\n                // use operation 1\n                target /= 2;\n            } else {\n                // use operation 2\n                target += 1;\n            }\n            // increase number of operations\n            ans += 1;\n        }\n        // target can be less than startValue\n        // e.g. right after operation 1\n        if (target < startValue) {\n            // use operation 2\n            ans += startValue - target;\n        }\n        return ans;\n    }\n};\n")))}b.isMDXComponent=!0}}]);