"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[45001],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),c=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return o.createElement(p.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(t),h=r,d=m["".concat(p,".").concat(h)]||m[h]||u[h]||a;return t?o.createElement(d,i(i({ref:n},s),{},{components:t})):o.createElement(d,i({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=h;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},40090:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=t(87462),r=(t(67294),t(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/count-number-of-rectangles-containing-each-point/"},i="2250 - Count Number of Rectangles Containing Each Point (Medium)",l={unversionedId:"2200-2299/count-number-of-rectangles-containing-each-point-medium",id:"2200-2299/count-number-of-rectangles-containing-each-point-medium",title:"2250 - Count Number of Rectangles Containing Each Point (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/count-number-of-rectangles-containing-each-point/",source:"@site/solutions/2200-2299/2250-count-number-of-rectangles-containing-each-point-medium.md",sourceDirName:"2200-2299",slug:"/2200-2299/count-number-of-rectangles-containing-each-point-medium",permalink:"/solutions/2200-2299/count-number-of-rectangles-containing-each-point-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2250-count-number-of-rectangles-containing-each-point-medium.md",tags:[],version:"current",sidebarPosition:2250,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/count-number-of-rectangles-containing-each-point/"},sidebar:"tutorialSidebar",previous:{title:"2249 - Count Lattice Points Inside a Circle (Medium)",permalink:"/solutions/2200-2299/count-lattice-points-inside-a-circle-medium"},next:{title:"2251 - Number of Flowers in Full Bloom (Hard)",permalink:"/solutions/2200-2299/number-of-flowers-in-full-bloom-hard"}},p={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Lower Bound",id:"approach-1-lower-bound",level:2}],s=(m="SolutionAuthor",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const u={toc:c},h="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(h,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2250---count-number-of-rectangles-containing-each-point-medium"},"2250 - Count Number of Rectangles Containing Each Point (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/count-number-of-rectangles-containing-each-point/"},"https://leetcode.com/problems/count-number-of-rectangles-containing-each-point/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given a 2D integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"rectangles")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"rectangles[i] = [li, hi]")," indicates that ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," rectangle has a length of ",(0,r.kt)("inlineCode",{parentName:"p"},"li")," and a height of ",(0,r.kt)("inlineCode",{parentName:"p"},"hi"),". You are also given a 2D integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"points")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"points[j] = [xj, yj]")," is a point with coordinates ",(0,r.kt)("inlineCode",{parentName:"p"},"(xj, yj)"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," rectangle has its ",(0,r.kt)("strong",{parentName:"p"},"bottom-left corner")," point at the coordinates ",(0,r.kt)("inlineCode",{parentName:"p"},"(0, 0)")," and its ",(0,r.kt)("strong",{parentName:"p"},"top-right corner")," point at ",(0,r.kt)("inlineCode",{parentName:"p"},"(li, hi)"),"."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"an integer array")," ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," ",(0,r.kt)("em",{parentName:"p"},"of length")," ",(0,r.kt)("inlineCode",{parentName:"p"},"points.length")," ",(0,r.kt)("em",{parentName:"p"},"where")," ",(0,r.kt)("inlineCode",{parentName:"p"},"count[j]")," ",(0,r.kt)("em",{parentName:"p"},"is the number of rectangles that ",(0,r.kt)("strong",{parentName:"em"},"contain")," the")," ",(0,r.kt)("inlineCode",{parentName:"p"},"jth")," ",(0,r.kt)("em",{parentName:"p"},"point.")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," rectangle ",(0,r.kt)("strong",{parentName:"p"},"contains")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"jth")," point if ",(0,r.kt)("inlineCode",{parentName:"p"},"0 <= xj <= li")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"0 <= yj <= hi"),". Note that points that lie on the ",(0,r.kt)("strong",{parentName:"p"},"edges")," of a rectangle are also considered to be contained by that rectangle."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/03/02/example1.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]]\nOutput: [2,1]\nExplanation: \nThe first rectangle contains no points.\nThe second rectangle contains only the point (2, 1).\nThe third rectangle contains the points (2, 1) and (1, 4).\nThe number of rectangles that contain the point (2, 1) is 2.\nThe number of rectangles that contain the point (1, 4) is 1.\nTherefore, we return [2, 1].\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/03/02/example2.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]]\nOutput: [1,3]\nExplanation:\nThe first rectangle contains only the point (1, 1).\nThe second rectangle contains only the point (1, 1).\nThe third rectangle contains the points (1, 3) and (1, 1).\nThe number of rectangles that contain the point (1, 3) is 1.\nThe number of rectangles that contain the point (1, 1) is 3.\nTherefore, we return [1, 3].\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= rectangles.length, points.length <= 5 * 10^4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rectangles[i].length == points[j].length == 2")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= li, xj <= 10^9")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= hi, yj <= 100")),(0,r.kt)("li",{parentName:"ul"},"All the ",(0,r.kt)("inlineCode",{parentName:"li"},"rectangles")," are ",(0,r.kt)("strong",{parentName:"li"},"unique"),"."),(0,r.kt)("li",{parentName:"ul"},"All the ",(0,r.kt)("inlineCode",{parentName:"li"},"points")," are ",(0,r.kt)("strong",{parentName:"li"},"unique"),".")),(0,r.kt)("h2",{id:"approach-1-lower-bound"},"Approach 1: Lower Bound"),(0,r.kt)("p",null,"Observation: The max $$y$$ is only $$100$$, while the max $$x$$is $$10^9$$."),(0,r.kt)("p",null,"For each $$y$$, we push the corresponding $$x$$ and then we sort all the $$x$$s for each $$y$$."),(0,r.kt)("p",null,"Then iterate each point, and iterate from $$p_y$$ to $$max_y$$to check how many points are greater than $$p_x$$."),(0,r.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> countRectangles(vector<vector<int>>& rectangles, vector<vector<int>>& points) {\n        int mxY = 101;\n        vector<int> ans;\n        vector<vector<int>> m(mxY);\n        // use y as a key\n        for (auto& r : rectangles) m[r[1]].push_back(r[0]);\n        // sort m[i]\n        for (int i = 0; i < mxY; i++) sort(m[i].begin(), m[i].end());\n        // iterate each point\n        for (auto& p : points) {\n            int cnt = 0;\n            // iterate from p[1] to mxY \n            // as these points are covering p[1]\n            for (int y = p[1]; y < mxY; y++) {\n                // find the first position that p[0] can fit into\n                // elements behind this position can form rectangles \n                // covering (p[0], p[1])\n                cnt += m[y].end() - lower_bound(m[y].begin(), m[y].end(), p[0]);\n            }\n            // push the result to ans\n            ans.push_back(cnt);\n        }\n        return ans;\n    }\n};\n")))}d.isMDXComponent=!0}}]);