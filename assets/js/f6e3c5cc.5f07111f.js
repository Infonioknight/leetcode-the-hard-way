"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[51197],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),f=i,d=c["".concat(l,".").concat(f)]||c[f]||m[f]||o;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},17428:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return b},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return m}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/fruit-into-baskets/",tags:["Array","Hash Table","Sliding Window"]},l="0904 - Fruit Into Baskets (Medium)",u={unversionedId:"0900-0999/fruit-into-baskets-medium",id:"0900-0999/fruit-into-baskets-medium",title:"0904 - Fruit Into Baskets (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/fruit-into-baskets/",source:"@site/solutions/0900-0999/0904-fruit-into-baskets-medium.md",sourceDirName:"0900-0999",slug:"/0900-0999/fruit-into-baskets-medium",permalink:"/solutions/0900-0999/fruit-into-baskets-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0904-fruit-into-baskets-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"Sliding Window",permalink:"/solutions/tags/sliding-window"}],version:"current",sidebarPosition:904,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/fruit-into-baskets/",tags:["Array","Hash Table","Sliding Window"]},sidebar:"tutorialSidebar",previous:{title:"0901 - Online Stock Span (Medium)",permalink:"/solutions/0900-0999/online-stock-span-medium"},next:{title:"0909 - Snakes and Ladders (Medium)",permalink:"/solutions/0900-0999/snakes-and-ladders-medium"}},p={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window",id:"approach-1-sliding-window",level:2}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},f=c("Tabs"),d=c("TabItem"),h=c("SolutionAuthor"),k={toc:m};function b(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0904---fruit-into-baskets-medium"},"0904 - Fruit Into Baskets (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/fruit-into-baskets/"},"https://leetcode.com/problems/fruit-into-baskets/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array ",(0,o.kt)("inlineCode",{parentName:"p"},"fruits")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"fruits[i]")," is the ",(0,o.kt)("strong",{parentName:"p"},"type")," of fruit the ",(0,o.kt)("inlineCode",{parentName:"p"},"ith")," tree produces."),(0,o.kt)("p",null,"You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You only have ",(0,o.kt)("strong",{parentName:"li"},"two")," baskets, and each basket can only hold a ",(0,o.kt)("strong",{parentName:"li"},"single type")," of fruit. There is no limit on the amount of fruit each basket can hold."),(0,o.kt)("li",{parentName:"ul"},"Starting from any tree of your choice, you must pick ",(0,o.kt)("strong",{parentName:"li"},"exactly one fruit")," from ",(0,o.kt)("strong",{parentName:"li"},"every")," tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets."),(0,o.kt)("li",{parentName:"ul"},"Once you reach a tree with fruit that cannot fit in your baskets, you must stop.")),(0,o.kt)("p",null,"Given the integer array ",(0,o.kt)("inlineCode",{parentName:"p"},"fruits"),", return ",(0,o.kt)("em",{parentName:"p"},"the ",(0,o.kt)("strong",{parentName:"em"},"maximum")," number of fruits you can pick"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: fruits = [1,2,1]\nOutput: 3\nExplanation: We can pick from all 3 trees.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: fruits = [0,1,2,2]\nOutput: 3\nExplanation: We can pick from trees [1,2,2].\nIf we had started at the first tree, we would only pick from trees [0,1].\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: fruits = [1,2,3,2,2]\nOutput: 4\nExplanation: We can pick from trees [2,3,2,2].\nIf we had started at the first tree, we would only pick from trees [1,2].\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= fruits.length <= 10^5")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= fruits[i] < fruits.length"))),(0,o.kt)("h2",{id:"approach-1-sliding-window"},"Approach 1: Sliding Window"),(0,o.kt)(f,{mdxType:"Tabs"},(0,o.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int totalFruit(vector<int>& fruits) {\n        int n = fruits.size(), ans = 0;\n        // count the frequency of fruits\n        unordered_map<int, int> m;\n        // two pointers \n        // - l is the pointer to the starting index of the window\n        // - r is the pointer to the ending index of the window\n        for (int l = 0, r = 0; r < n; r++) {\n            // add fruits[r] to a hashmap\n            m[fruits[r]]++;\n            // if there is more than two types\n            if (m.size() > 2) {\n                // then we need to substract one from the freq of leftmost element, i.e. fruits[l]\n                // if it is 0, then we can erase it\n                if (--m[fruits[l]] == 0) m.erase(fruits[l]);\n                // shrink the window by moving the `l` to the right\n                l += 1;\n            }\n            // the maximum number of fruits we can pick is simply the window size\n            ans = max(ans, r - l + 1);\n        }\n        return ans;\n    }\n};\n"))),(0,o.kt)(d,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def totalFruit(self, fruits: List[int]) -> int:\n        ans = 0\n        # count the frequency of fruits\n        cnt = Counter()\n        # two pointers \n        # - l is the pointer to the starting index of the window\n        # - r is the pointer to the ending index of the window\n        l = 0\n        for r in range(len(fruits)):\n            # add fruits[r] to a counter\n            cnt[fruits[r]] += 1\n            # if there is more than two types\n            if len(cnt) > 2:\n                # then we need to substract one from the freq of leftmost element, i.e. fruits[l]\n                cnt[fruits[l]] -= 1\n                # if it is 0, then we can erase it\n                if cnt[fruits[l]] == 0: cnt.pop(fruits[l])\n                # shrink the window by moving the `l` to the right\n                l += 1\n            # the maximum number of fruits we can pick is simply the window size\n            ans = max(ans, r - l + 1)\n        return ans\n")))))}b.isMDXComponent=!0}}]);