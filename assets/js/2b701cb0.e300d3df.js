"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[40627],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),s=l(t),d=i,b=s["".concat(c,".").concat(d)]||s[d]||m[d]||o;return t?r.createElement(b,a(a({ref:n},u),{},{components:t})):r.createElement(b,a({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=s;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:i,a[1]=p;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},6715:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return m}});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),a=["components"],p={description:"Author: @wingkwong | https://leetcode.com/problems/n-th-tribonacci-number/",tags:["Math","Dynamic Programming","Memoization"]},c="1137 - N-th Tribonacci Number (Easy)",l={unversionedId:"1100-1199/n-th-tribonacci-number-easy",id:"1100-1199/n-th-tribonacci-number-easy",title:"1137 - N-th Tribonacci Number (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/n-th-tribonacci-number/",source:"@site/solutions/1100-1199/1137-n-th-tribonacci-number-easy.md",sourceDirName:"1100-1199",slug:"/1100-1199/n-th-tribonacci-number-easy",permalink:"/solutions/1100-1199/n-th-tribonacci-number-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1100-1199/1137-n-th-tribonacci-number-easy.md",tags:[{label:"Math",permalink:"/solutions/tags/math"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Memoization",permalink:"/solutions/tags/memoization"}],version:"current",sidebarPosition:1137,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/n-th-tribonacci-number/",tags:["Math","Dynamic Programming","Memoization"]},sidebar:"tutorialSidebar",previous:{title:"1135 - Connecting Cities With Minimum Cost (Medium)",permalink:"/solutions/1100-1199/connecting-cities-with-minimum-cost-medium"},next:{title:"1140 - Stone Game II (Medium)",permalink:"/solutions/1100-1199/stone-game-ii-medium"}},u={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2},{value:"Approach 2: Dynamic Programming (Space Optimized)",id:"approach-2-dynamic-programming-space-optimized",level:2},{value:"Approach 3: Hardcode",id:"approach-3-hardcode",level:2}],s=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)}},d=s("Tabs"),b=s("TabItem"),h=s("SolutionAuthor"),g={toc:m};function f(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1137---n-th-tribonacci-number-easy"},"1137 - N-th Tribonacci Number (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/n-th-tribonacci-number/"},"https://leetcode.com/problems/n-th-tribonacci-number/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"The Tribonacci sequence Tn is defined as follows:"),(0,o.kt)("p",null,"T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0."),(0,o.kt)("p",null,"Given ",(0,o.kt)("inlineCode",{parentName:"p"},"n"),", return the value of Tn."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 4\nOutput: 4\nExplanation:\nT_3 = 0 + 1 + 1 = 2\nT_4 = 1 + 1 + 2 = 4\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 25\nOutput: 1389537\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= n <= 37")),(0,o.kt)("li",{parentName:"ul"},"The answer is guaranteed to fit within a 32-bit integer, ie. ",(0,o.kt)("inlineCode",{parentName:"li"},"answer <= 2^31 - 1"),".")),(0,o.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// TC: O(N)\n// SC: O(N)\nclass Solution {\npublic:\n    // since first three numbers are given, \n    // let dp[i] be the value of T_n\n    // we can build the dp[i] based on dp[i - 1] + dp[i - 2] + dp[i - 3]\n    int tribonacci(int n) {\n        // first three numbers are known\n        if (n == 0) return 0;\n        if (n == 1 || n == 2) return 1;\n        // dp[i]: the value of T_n\n        vector<int> dp(n + 1);\n        // base case\n        dp[0] = 0;\n        dp[1] = dp[2] = 1;\n        // dp[i] is the sum of the previous three values\n        for(int i = 3; i <= n; i++) dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n        return dp[n];\n    }\n};\n")))),(0,o.kt)("h2",{id:"approach-2-dynamic-programming-space-optimized"},"Approach 2: Dynamic Programming (Space Optimized)"),(0,o.kt)("p",null,"In the above DP solution, we can further optimize the space to constant space since we just need to know the previous three values."),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// TC: O(N)\n// SC: O(1)\nclass Solution {\npublic:\n    int tribonacci(int n) {\n        if (n == 0) return 0;\n        if (n == 1 || n == 2) return 1;\n        // vector<int> dp(n + 1);\n        // dp[0] = 0;\n        // dp[1] = dp[2] = 1;\n        int a = 0, b = 1, c = 1, t;\n        for(int i = 3; i <= n; i++) {\n            // dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n            t = a + b + c;\n            a = b;\n            b = c;\n            c = t;\n        }\n        // return dp[n];\n        return c;\n    }\n};\n")))),(0,o.kt)("h2",{id:"approach-3-hardcode"},"Approach 3: Hardcode"),(0,o.kt)("p",null,"Here's the hardcoded solution. In case someone is interested, you may take a look at the tribonacci sequence A000073 at OEIS."),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(b,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> lol = { 0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136, 5768, 10609, 19513, 35890, 66012, 121415, 223317, 410744, 755476, 1389537, 2555757, 4700770, 8646064, 15902591, 29249425, 53798080, 98950096, 181997601, 334745777, 615693474, 1132436852, 2082876103 };\n    int tribonacci(int n) {\n        return lol[n];\n    }\n};\n")))))}f.isMDXComponent=!0}}]);