"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[79971],{3905:function(n,e,t){t.d(e,{Zo:function(){return s},kt:function(){return g}});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var p=r.createContext({}),c=function(n){var e=r.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},s=function(n){var e=c(n.components);return r.createElement(p.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,p=n.parentName,s=l(n,["components","mdxType","originalType","parentName"]),u=c(t),g=o,f=u["".concat(p,".").concat(g)]||u[g]||m[g]||i;return t?r.createElement(f,a(a({ref:e},s),{},{components:t})):r.createElement(f,a({ref:e},s))}));function g(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,a=new Array(i);a[0]=u;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=n,l.mdxType="string"==typeof n?n:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},748:function(n,e,t){t.r(e),t.d(e,{assets:function(){return s},contentTitle:function(){return p},default:function(){return b},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return m}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),a=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/flip-string-to-monotone-increasing/",tags:["String","Dynamic Programming"]},p="0926 - Flip String to Monotone Increasing (Medium)",c={unversionedId:"0900-0999/flip-string-to-monotone-increasing-medium",id:"0900-0999/flip-string-to-monotone-increasing-medium",title:"0926 - Flip String to Monotone Increasing (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/flip-string-to-monotone-increasing/",source:"@site/solutions/0900-0999/0926-flip-string-to-monotone-increasing-medium.md",sourceDirName:"0900-0999",slug:"/0900-0999/flip-string-to-monotone-increasing-medium",permalink:"/solutions/0900-0999/flip-string-to-monotone-increasing-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0926-flip-string-to-monotone-increasing-medium.md",tags:[{label:"String",permalink:"/solutions/tags/string"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"}],version:"current",sidebarPosition:926,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/flip-string-to-monotone-increasing/",tags:["String","Dynamic Programming"]},sidebar:"tutorialSidebar",previous:{title:"0912 - Sort an Array (Medium)",permalink:"/solutions/0900-0999/sort-an-array-medium"},next:{title:"0936 - Stamping The Sequence (Hard)",permalink:"/solutions/0900-0999/stamping-the-sequence-hard"}},s={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],u=function(n){return function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}},g=u("Tabs"),f=u("TabItem"),d=u("SolutionAuthor"),k={toc:m};function b(n){var e=n.components,t=(0,o.Z)(n,a);return(0,i.kt)("wrapper",(0,r.Z)({},k,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0926---flip-string-to-monotone-increasing-medium"},"0926 - Flip String to Monotone Increasing (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/flip-string-to-monotone-increasing/"},"https://leetcode.com/problems/flip-string-to-monotone-increasing/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"A binary string is monotone increasing if it consists of some number of ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"'s (possibly none), followed by some number of ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),"'s (also possibly none)."),(0,i.kt)("p",null,"You are given a binary string ",(0,i.kt)("inlineCode",{parentName:"p"},"s"),". You can flip ",(0,i.kt)("inlineCode",{parentName:"p"},"s[i]")," changing it from ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," or from ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the minimum number of flips to make"),(0,i.kt)("inlineCode",{parentName:"p"},"s"),(0,i.kt)("em",{parentName:"p"},"monotone increasing"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "00110"\nOutput: 1\nExplanation: We flip the last digit to get 00111.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "010110"\nOutput: 2\nExplanation: We flip to get 011111, or alternatively 000111.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "00011000"\nOutput: 2\nExplanation: We flip to get 00000000.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= s.length <= 10^5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"s[i]")," is either ",(0,i.kt)("inlineCode",{parentName:"li"},"'0'")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"'1'"),".")),(0,i.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,i.kt)(g,{mdxType:"Tabs"},(0,i.kt)(f,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int minFlipsMonoIncr(string s) {\n        // counters to count numbers of 0s and 1s\n        int cnt0 = 0, cnt1 = 0;\n        // for each character\n        for(auto x : s) {\n            // we count the number of zeros\n            if (x == '0') cnt0++;\n            // or the number of ones\n            else cnt1++;\n            // we can either flip all ones to zeros \n            // e.g. [111]0000 -> [000]0000\n            // or we can just flip the current zero\n            // e.g. 001[0] -> 001[1]\n            cnt0 = min(cnt0, cnt1);\n        }\n        return cnt0;\n    }\n};\n"))),(0,i.kt)(f,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int minFlipsMonoIncr(String s) {\n        // counters to count numbers of 0s and 1s\n        int cnt0 = 0, cnt1 = 0;\n        // for each character\n        for (char x : s.toCharArray()) {\n            // we count the number of zeros\n            if (x == '0') cnt0 += 1;\n            // of the number of ones\n            else cnt1 += 1;\n            // we can either flip all ones to zeros \n            // e.g. [111]0000 -> [000]0000\n            // or we can just flip the current zero\n            // e.g. 001[0] -> 001[1]\n            cnt0 = Math.min(cnt0, cnt1);\n        }\n        return cnt0;\n    }\n}\n\n"))),(0,i.kt)(f,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def minFlipsMonoIncr(self, s: str) -> int:\n        # counters to count numbers of 0s and 1s\n        cnt0, cnt1 = 0, 0\n        # for each character\n        for x in s:\n            # we count the number of zeros\n            if x == '0':\n                cnt0 += 1\n            # or the number of ones\n            else:\n                cnt1 += 1\n            # we can either flip all ones to zeros \n            # e.g. [111]0000 -> [000]0000\n            # or we can just flip the current zero\n            # e.g. 001[0] -> 001[1]\n            cnt0 = min(cnt0, cnt1)\n        return cnt0\n"))),(0,i.kt)(f,{value:"rs",label:"Rust",mdxType:"TabItem"},(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rs"},"impl Solution {\n    pub fn min_flips_mono_incr(s: String) -> i32 {\n        // counters to count numbers of 0s and 1s\n        let mut cnt0 = 0;\n        let mut cnt1 = 0;\n        // for each character\n        for x in s.chars() {\n            // we count the number of zeros\n            if x == '0' {\n                cnt0 += 1;\n            }\n            // or the number of ones\n            else {\n                cnt1 += 1;\n            }\n            // we can either flip all ones to zeros \n            // e.g. [111]0000 -> [000]0000\n            // or we can just flip the current zero\n            // e.g. 001[0] -> 001[1]\n            cnt0 = cnt0.min(cnt1);\n        }\n        cnt0\n    }\n}\n")))))}b.isMDXComponent=!0}}]);