"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[96401],{3905:function(t,e,n){n.d(e,{Zo:function(){return l},kt:function(){return d}});var r=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var p=r.createContext({}),u=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},l=function(t){var e=u(t.components);return r.createElement(p.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,p=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),m=u(n),d=o,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(f,a(a({ref:e},l),{},{components:n})):r.createElement(f,a({ref:e},l))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s.mdxType="string"==typeof t?t:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},57865:function(t,e,n){n.r(e),n.d(e,{assets:function(){return c},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return m}});var r,o=n(87462),i=n(63366),a=(n(67294),n(3905)),s=["components"],p={description:"Author: @wingkwong | https://leetcode.com/problems/optimal-partition-of-string/"},u="2405 - Optimal Partition of String (Medium)",l={unversionedId:"2400-2499/optimal-partition-of-string-medium",id:"2400-2499/optimal-partition-of-string-medium",title:"2405 - Optimal Partition of String (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/optimal-partition-of-string/",source:"@site/solutions/2400-2499/2405-optimal-partition-of-string-medium.md",sourceDirName:"2400-2499",slug:"/2400-2499/optimal-partition-of-string-medium",permalink:"/solutions/2400-2499/optimal-partition-of-string-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2405-optimal-partition-of-string-medium.md",tags:[],version:"current",sidebarPosition:2405,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/optimal-partition-of-string/"},sidebar:"tutorialSidebar",previous:{title:"2404 - Most Frequent Even Element (Easy)",permalink:"/solutions/2400-2499/most-frequent-even-element-easy"},next:{title:"2406 - Divide Intervals Into Minimum Number of Groups (Medium)",permalink:"/solutions/2400-2499/divide-intervals-into-minimum-number-of-groups-medium"}},c={},m=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Greedy",id:"approach-1-greedy",level:2}],d=(r="SolutionAuthor",function(t){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)}),f={toc:m};function g(t){var e=t.components,n=(0,i.Z)(t,s);return(0,a.kt)("wrapper",(0,o.Z)({},f,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2405---optimal-partition-of-string-medium"},"2405 - Optimal Partition of String (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given a string ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),", partition the string into one or more ",(0,a.kt)("strong",{parentName:"p"},"substrings")," such that the characters in each substring are ",(0,a.kt)("strong",{parentName:"p"},"unique"),". That is, no letter appears in a single substring more than ",(0,a.kt)("strong",{parentName:"p"},"once"),"."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"minimum")," number of substrings in such a partition.")),(0,a.kt)("p",null,"Note that each character should belong to exactly one substring in a partition."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "abacaba"\nOutput: 4\nExplanation:\nTwo possible partitions are ("a","ba","cab","a") and ("ab","a","ca","ba").\nIt can be shown that 4 is the minimum number of substrings needed.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "ssssss"\nOutput: 6\nExplanation:\nThe only valid partition is ("s","s","s","s","s","s").\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= s.length <= 105")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s")," consists of only English lowercase letters.")),(0,a.kt)("h2",{id:"approach-1-greedy"},"Approach 1: Greedy"),(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    // the idea is to keep each partition as long as possible \n    // so that we could have the minimum number of substrings\n    int partitionString(string s) {\n        // the minimum number of substring is at least 1\n        // e.g. \"a\"\n        int ans = 1;\n        // cnt is used to count the frequency of each character\n        vector<int> cnt(26);\n        // for each character\n        for (auto& c : s) {\n            // we check if it exists before\n            // if so, then we should create a new partition\n            // because no letter appears in a single substring more than once\n            if (cnt[c - 'a']) {\n                // reset the counter\n                cnt = vector<int>(26);\n                // create a new partition\n                ans++;\n            }\n            // increase the frequency of the current character by 1\n            cnt[c - 'a']++;\n        } \n        return ans;\n    }\n};\n")))}g.isMDXComponent=!0}}]);