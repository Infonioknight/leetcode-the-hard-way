"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[65267],{3905:(e,a,t)=>{t.d(a,{Zo:()=>i,kt:()=>d});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function m(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),p=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},i=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},k=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,i=m(e,["components","mdxType","originalType","parentName"]),u=p(t),k=r,d=u["".concat(s,".").concat(k)]||u[k]||c[k]||o;return t?n.createElement(d,l(l({ref:a},i),{},{components:t})):n.createElement(d,l({ref:a},i))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=k;var m={};for(var s in a)hasOwnProperty.call(a,s)&&(m[s]=a[s]);m.originalType=e,m[u]="string"==typeof e?e:r,l[1]=m;for(var p=2;p<o;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}k.displayName="MDXCreateElement"},51213:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>N,frontMatter:()=>o,metadata:()=>m,toc:()=>p});var n=t(87462),r=(t(67294),t(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/number-of-flowers-in-full-bloom/",tags:["Array","Hash Table","Binary Search","Sorting","Prefix Sum","Ordered Set"]},l="2251 - Number of Flowers in Full Bloom (Hard)",m={unversionedId:"2200-2299/number-of-flowers-in-full-bloom-hard",id:"2200-2299/number-of-flowers-in-full-bloom-hard",title:"2251 - Number of Flowers in Full Bloom (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/number-of-flowers-in-full-bloom/",source:"@site/solutions/2200-2299/2251-number-of-flowers-in-full-bloom-hard.md",sourceDirName:"2200-2299",slug:"/2200-2299/number-of-flowers-in-full-bloom-hard",permalink:"/solutions/2200-2299/number-of-flowers-in-full-bloom-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2251-number-of-flowers-in-full-bloom-hard.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"Binary Search",permalink:"/solutions/tags/binary-search"},{label:"Sorting",permalink:"/solutions/tags/sorting"},{label:"Prefix Sum",permalink:"/solutions/tags/prefix-sum"},{label:"Ordered Set",permalink:"/solutions/tags/ordered-set"}],version:"current",sidebarPosition:2251,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/number-of-flowers-in-full-bloom/",tags:["Array","Hash Table","Binary Search","Sorting","Prefix Sum","Ordered Set"]},sidebar:"tutorialSidebar",previous:{title:"2250 - Count Number of Rectangles Containing Each Point (Medium)",permalink:"/solutions/2200-2299/count-number-of-rectangles-containing-each-point-medium"},next:{title:"2255 - Count Prefixes of a Given String (Easy)",permalink:"/solutions/2200-2299/count-prefixes-of-a-given-string-easy"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Line Sweep",id:"approach-1-line-sweep",level:2}],i=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",a)},u=i("Tabs"),c=i("TabItem"),k=i("SolutionAuthor"),d={toc:p},h="wrapper";function N(e){let{components:a,...t}=e;return(0,r.kt)(h,(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2251---number-of-flowers-in-full-bloom-hard"},"2251 - Number of Flowers in Full Bloom (Hard)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-flowers-in-full-bloom/"},"https://leetcode.com/problems/number-of-flowers-in-full-bloom/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given a ",(0,r.kt)("strong",{parentName:"p"},"0-indexed")," 2D integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"flowers"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"flowers[i] = [starti, endi]")," means the ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," flower will be in ",(0,r.kt)("strong",{parentName:"p"},"full bloom")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"starti")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"endi")," (",(0,r.kt)("strong",{parentName:"p"},"inclusive"),"). You are also given a ",(0,r.kt)("strong",{parentName:"p"},"0-indexed")," integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"persons")," of size ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"persons[i]")," is the time that the ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," person will arrive to see the flowers."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"an integer array")," ",(0,r.kt)("inlineCode",{parentName:"p"},"answer")," ",(0,r.kt)("em",{parentName:"p"},"of size")," ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),(0,r.kt)("em",{parentName:"p"},", where")," ",(0,r.kt)("inlineCode",{parentName:"p"},"answer[i]")," ",(0,r.kt)("em",{parentName:"p"},"is the ",(0,r.kt)("strong",{parentName:"em"},"number")," of flowers that are in full bloom when the")," ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," ",(0,r.kt)("em",{parentName:"p"},"person arrives.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/03/02/ex1new.jpg",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: flowers = [[1,6],[3,7],[9,12],[4,13]], persons = [2,3,7,11]\nOutput: [1,2,2,2]\nExplanation: The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/03/02/ex2new.jpg",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: flowers = [[1,10],[3,3]], persons = [3,3,2]\nOutput: [2,2,1]\nExplanation: The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= flowers.length <= 5 * 10^4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flowers[i].length == 2")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= starti <= endi <= 10^9")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= persons.length <= 5 * 10^4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= persons[i] <= 10^9"))),(0,r.kt)("h2",{id:"approach-1-line-sweep"},"Approach 1: Line Sweep"),(0,r.kt)("p",null,"We can put ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mi",{parentName:"mrow"},"l"),(0,r.kt)("mi",{parentName:"mrow"},"o"),(0,r.kt)("mi",{parentName:"mrow"},"w"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"r"),(0,r.kt)("mi",{parentName:"mrow"},"s")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"flowers")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02691em"}},"w"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"ers")))))," and ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"p"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"o"),(0,r.kt)("mi",{parentName:"mrow"},"p"),(0,r.kt)("mi",{parentName:"mrow"},"l"),(0,r.kt)("mi",{parentName:"mrow"},"e")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"people")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"eo"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"pl"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"e")))))," on the number line and apply standard line sweep. Add the running sum to the answer if ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mi",{parentName:"mrow"},"d"),(0,r.kt)("mi",{parentName:"mrow"},"x")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"idx")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x")))))," is not ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mn",{parentName:"mrow"},"1")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"-1")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord"},"1")))))," indicating that is a person. However, this solution would be slow and can be further optimized with Binary Search."),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(k,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> fullBloomFlowers(vector<vector<int>>& flowers, vector<int>& people) {\n        int n = people.size();\n        vector<int> ans(n);\n        vector<array<int, 3>> v; // {time, idx, val}\n        for (auto& flower : flowers) {\n            v.push_back({flower[0], -1, 1}); // in\n            v.push_back({flower[1] + 1, -1, -1}); // out\n        }\n        // include people\n        for (int i = 0; i < n; i++) v.push_back({people[i], i, 0});\n        // sort in ascending by time -> idx -> val\n        sort(v.begin(), v.end());\n        int sum = 0;\n        for (auto& [time, idx, val] : v) {\n            // calculate the prefix sum\n            sum += val;\n            // idx is not -1, set the answer for people[idx]\n            if (idx != -1) ans[idx] = sum;\n        }\n        return ans;\n    }\n};\n"))),(0,r.kt)(c,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,r.kt)(k,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},"class Solution {\n    fun fullBloomFlowers(flowers: Array<IntArray>, people: IntArray): IntArray {\n        val n = people.size\n        val ans = IntArray(n)\n        // {time, idx, val}\n        val v = mutableListOf<Triple<Int, Int, Int>>()\n        for (flower in flowers) {\n            v.add(Triple(flower[0], -1, 1))\n            v.add(Triple(flower[1] + 1, -1, -1))\n        }\n        for (i in 0 until n) v.add(Triple(people[i], i, 0))\n        v.sortBy { it.first }\n        var sum = 0\n        for ((time, idx, value) in v) {\n            sum += value\n            if (idx != -1) {\n                ans[idx] = sum\n            }\n        }\n        return ans\n    }\n}\n")))))}N.isMDXComponent=!0}}]);