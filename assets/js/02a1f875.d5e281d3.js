"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[65880],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),h=a,k=u["".concat(l,".").concat(h)]||u[h]||m[h]||i;return t?r.createElement(k,o(o({ref:n},c),{},{components:t})):r.createElement(k,o({ref:n},c))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},91159:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const i={description:"Author: @wingkwong,@heiheihang | https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/"},o="1337 - The K Weakest Rows in a Matrix (Easy)",s={unversionedId:"1300-1399/the-k-weakest-rows-in-a-matrix-easy",id:"1300-1399/the-k-weakest-rows-in-a-matrix-easy",title:"1337 - The K Weakest Rows in a Matrix (Easy)",description:"Author: @wingkwong,@heiheihang | https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/",source:"@site/solutions/1300-1399/1337-the-k-weakest-rows-in-a-matrix-easy.md",sourceDirName:"1300-1399",slug:"/1300-1399/the-k-weakest-rows-in-a-matrix-easy",permalink:"/solutions/1300-1399/the-k-weakest-rows-in-a-matrix-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1300-1399/1337-the-k-weakest-rows-in-a-matrix-easy.md",tags:[],version:"current",sidebarPosition:1337,frontMatter:{description:"Author: @wingkwong,@heiheihang | https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/"},sidebar:"tutorialSidebar",previous:{title:"1335 - Minimum Difficulty of a Job Schedule (Hard)",permalink:"/solutions/1300-1399/minimum-difficulty-of-a-job-schedule-hard"},next:{title:"1346 - Check If N and Its Double Exist (Easy)",permalink:"/solutions/1300-1399/check-if-n-and-its-double-exist-easy"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2},{value:"Approach 2: Heap",id:"approach-2-heap",level:2},{value:"Approach 3: Binary Search",id:"approach-3-binary-search",level:2},{value:"Approach 4: Binary Search + Priority Queue",id:"approach-4-binary-search--priority-queue",level:2}],c=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const m={toc:p},h="wrapper";function k(e){let{components:n,...t}=e;return(0,a.kt)(h,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1337---the-k-weakest-rows-in-a-matrix-easy"},"1337 - The K Weakest Rows in a Matrix (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/"},"https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given an ",(0,a.kt)("inlineCode",{parentName:"p"},"m x n")," binary matrix ",(0,a.kt)("inlineCode",{parentName:"p"},"mat")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),"'s (representing soldiers) and ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"'s (representing civilians). The soldiers are positioned ",(0,a.kt)("strong",{parentName:"p"},"in front")," of the civilians. That is, all the ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),"'s will appear to the ",(0,a.kt)("strong",{parentName:"p"},"left")," of all the ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"'s in each row."),(0,a.kt)("p",null,"A row ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," is ",(0,a.kt)("strong",{parentName:"p"},"weaker")," than a row ",(0,a.kt)("inlineCode",{parentName:"p"},"j")," if one of the following is true:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of soldiers in row ",(0,a.kt)("inlineCode",{parentName:"li"},"i")," is less than the number of soldiers in row ",(0,a.kt)("inlineCode",{parentName:"li"},"j"),"."),(0,a.kt)("li",{parentName:"ul"},"Both rows have the same number of soldiers and ",(0,a.kt)("inlineCode",{parentName:"li"},"i < j"),".")),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the indices of the")," ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," ",(0,a.kt)("em",{parentName:"p"}," ",(0,a.kt)("strong",{parentName:"em"},"weakest")," rows in the matrix ordered from weakest to strongest"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: mat = \n[[1,1,0,0,0],\n [1,1,1,1,0],\n [1,0,0,0,0],\n [1,1,0,0,0],\n [1,1,1,1,1]], \nk = 3\nOutput: [2,0,3]\nExplanation: \nThe number of soldiers in each row is: \n- Row 0: 2 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 2 \n- Row 4: 5 \nThe rows ordered from weakest to strongest are [2,0,3,1,4].\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: mat = \n[[1,0,0,0],\n [1,1,1,1],\n [1,0,0,0],\n [1,0,0,0]], \nk = 2\nOutput: [0,2]\nExplanation: \nThe number of soldiers in each row is: \n- Row 0: 1 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 1 \nThe rows ordered from weakest to strongest are [0,2,3,1].\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"m == mat.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == mat[i].length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"2 <= n, m <= 100")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= k <= m")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matrix[i][j]")," is either 0 or 1.")),(0,a.kt)("h2",{id:"approach-1-brute-force"},"Approach 1: Brute Force"),(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("p",null,"Iterate each row to find out the number of soldiers, store the count with the row index. Sort it and take the first $$k$$ counts."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {\n        vector<int> ans;\n        vector<pair<int, int>> a;\n        for (int i = 0; i < mat.size(); i++) {\n            a.push_back({\n                // number of soldiers\n                accumulate(mat[i].begin(), mat[i].end(), 0),\n                // row index\n                i\n            });\n        }\n        sort(a.begin(), a.end());\n        // or use partial_sort\n        // partial_sort(a.begin(), a.begin() + k, a.end());\n        for (int i = 0; i < k; i++) {\n            // add the count to answer\n            ans.push_back(a[i].second);\n        }\n        return ans;\n    }\n};\n")),(0,a.kt)("h2",{id:"approach-2-heap"},"Approach 2: Heap"),(0,a.kt)(c,{name:"@heiheihang",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:\n        rows = []\n        \n        for i in range(len(mat)):\n            cnt = 0\n            for j in range(len(mat[i])):\n                if(mat[i][j] == 1):\n                    cnt += 1\n                else:\n                    break\n            heappush(rows, [-cnt, -i])\n            if len(rows) > k:\n                heappop(rows)\n            \n        ans = []\n        \n        while rows:\n            cnt, row = heappop(rows)\n            ans.append(-row)\n            \n        ans.reverse()\n        return ans\n")),(0,a.kt)("h2",{id:"approach-3-binary-search"},"Approach 3: Binary Search"),(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("p",null,"Instead of searching linearly, we can use binary search to find out the number of soldiers. The rest is same as approach 1."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int n = nums.size(), l = 0, r = n;\n        while (l < r) {\n            int m = l + (r - l) / 2;\n            if (nums[m] == target) l = m + 1;\n            else r = m;\n        }\n        return l;\n    }\n\n    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {\n        vector<int> ans;\n        vector<pair<int, int>> a;\n        for (int i = 0; i < mat.size(); i++) {\n            a.push_back({\n                search(mat[i], 1),\n                // accumulate(mat[i].begin(), mat[i].end(), 0),\n                i\n            });\n        }        \n        sort(a.begin(), a.end());\n        // or use partial_sort\n        // partial_sort(a.begin(), a.begin() + k, a.end());\n        for (int i = 0; i < k; i++) {\n            ans.push_back(a[i].second);\n        }\n        return ans;\n    }\n};\n")),(0,a.kt)("h2",{id:"approach-4-binary-search--priority-queue"},"Approach 4: Binary Search + Priority Queue"),(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("p",null,"Instead of using a vector to store and sort, we use priority queue to handle the order."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int n = nums.size(), l = 0, r = n;\n        while (l < r) {\n            int m = l + (r - l) / 2;\n            if (nums[m] == target) l = m + 1;\n            else r = m;\n        }\n        return l;\n    }\n\n    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {\n        vector<int> ans;\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n        for (int i = 0; i < mat.size(); i++) {\n            pq.push({\n                search(mat[i], 1),\n                i\n            });\n        }\n        for (int i = 0; i < k; i++) {\n            ans.push_back(pq.top().second);\n            pq.pop();\n        }\n        return ans;\n    }\n};\n")))}k.isMDXComponent=!0}}]);