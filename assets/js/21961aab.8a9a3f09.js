"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[72097],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=i,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},58090:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital/",tags:["Tree","Depth-First Search","Breadth-First Search","Graph"]},p="2477 - Minimum Fuel Cost to Report to the Capital (Medium)",s={unversionedId:"2400-2499/minimum-fuel-cost-to-report-to-the-capital-medium",id:"2400-2499/minimum-fuel-cost-to-report-to-the-capital-medium",title:"2477 - Minimum Fuel Cost to Report to the Capital (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital/",source:"@site/solutions/2400-2499/2477-minimum-fuel-cost-to-report-to-the-capital-medium.md",sourceDirName:"2400-2499",slug:"/2400-2499/minimum-fuel-cost-to-report-to-the-capital-medium",permalink:"/solutions/2400-2499/minimum-fuel-cost-to-report-to-the-capital-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2477-minimum-fuel-cost-to-report-to-the-capital-medium.md",tags:[{label:"Tree",permalink:"/solutions/tags/tree"},{label:"Depth-First Search",permalink:"/solutions/tags/depth-first-search"},{label:"Breadth-First Search",permalink:"/solutions/tags/breadth-first-search"},{label:"Graph",permalink:"/solutions/tags/graph"}],version:"current",sidebarPosition:2477,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital/",tags:["Tree","Depth-First Search","Breadth-First Search","Graph"]},sidebar:"tutorialSidebar",previous:{title:"2461 - Maximum Sum of Distinct Subarrays With Length K (Medium)",permalink:"/solutions/2400-2499/maximum-sum-of-distinct-subarrays-with-length-k-medium"},next:{title:"2485 - Find the Pivot Integer (Easy)",permalink:"/solutions/2400-2499/find-the-pivot-integer-easy"}},c={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}],m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)}},d=m("Tabs"),h=m("TabItem"),f=m("SolutionAuthor"),g={toc:u};function k(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2477---minimum-fuel-cost-to-report-to-the-capital-medium"},"2477 - Minimum Fuel Cost to Report to the Capital (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital/"},"https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"There is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," cities numbered from ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"n - 1")," and exactly ",(0,a.kt)("inlineCode",{parentName:"p"},"n - 1")," roads. The capital city is city ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),". You are given a 2D integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"roads")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"roads[i] = [ai, bi]")," denotes that there exists a ",(0,a.kt)("strong",{parentName:"p"},"bidirectional road")," connecting cities ",(0,a.kt)("inlineCode",{parentName:"p"},"ai")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"bi"),"."),(0,a.kt)("p",null,"There is a meeting for the representatives of each city. The meeting is in the capital city."),(0,a.kt)("p",null,"There is a car in each city. You are given an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"seats")," that indicates the number of seats in each car."),(0,a.kt)("p",null,"A representative can use the car in their city to travel or change the car and ride with another representative. The cost of traveling between two cities is one liter of fuel."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the minimum number of liters of fuel to reach the capital city"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: roads = [[0,1],[0,2],[0,3]], seats = 5\nOutput: 3\nExplanation: \n- Representative1 goes directly to the capital with 1 liter of fuel.\n- Representative2 goes directly to the capital with 1 liter of fuel.\n- Representative3 goes directly to the capital with 1 liter of fuel.\nIt costs 3 liters of fuel at minimum. \nIt can be proven that 3 is the minimum number of liters of fuel needed.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2\nOutput: 7\nExplanation: \n- Representative2 goes directly to city 3 with 1 liter of fuel.\n- Representative2 and representative3 go together to city 1 with 1 liter of fuel.\n- Representative2 and representative3 go together to the capital with 1 liter of fuel.\n- Representative1 goes directly to the capital with 1 liter of fuel.\n- Representative5 goes directly to the capital with 1 liter of fuel.\n- Representative6 goes directly to city 4 with 1 liter of fuel.\n- Representative4 and representative6 go together to the capital with 1 liter of fuel.\nIt costs 7 liters of fuel at minimum. \nIt can be proven that 7 is the minimum number of liters of fuel needed.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: roads = [], seats = 1\nOutput: 0\nExplanation: No representatives need to travel to the capital city.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 105")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"roads.length == n - 1")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"roads[i].length == 2")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= ai, bi < n")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ai != bi")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"roads")," represents a valid tree."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= seats <= 105"))),(0,a.kt)("h2",{id:"approach-1-dfs"},"Approach 1: DFS"),(0,a.kt)(d,{mdxType:"Tabs"},(0,a.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {\n        long long ans = 0;\n        // build the graph\n        vector<vector<int>> g(roads.size() + 1);\n        for (auto& x : roads) {\n            // bidirectional\n            // x[0] can go to x[1]\n            g[x[0]].push_back(x[1]);\n            // x[1] can go to x[0]\n            g[x[1]].push_back(x[0]);\n        }\n        // u is the source\n        // p is the parent\n        function<int(int,int)> dfs = [&](int u, int p) {\n            int cnt = 1;\n            // v is the city that is accessible from city u\n            for (auto v : g[u]) {\n                // make sure we are not entering a circle\n                // i.e. not visiting the source back\n                if (v ^ p) {\n                    // if not, then move to city v with parent city u\n                    cnt += dfs(v, u);\n                }\n            }\n            // we need ceil(cnt / seats) liters of fuel from the current city to the parent city\n            // ceil(cnt / seats) can be written as `(cnt + seats - 1) / seats`\n            if (u) ans += (cnt + seats - 1) / seats;\n            return cnt;\n        };\n        // start from city 0 with parent city 0\n        dfs(0, -1);\n        return ans;\n    }\n};\n")))))}k.isMDXComponent=!0}}]);