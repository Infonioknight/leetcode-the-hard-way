"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[32893],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),b=a,h=m["".concat(l,".").concat(b)]||m[b]||u[b]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=b;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},97426:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>y,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={description:"Author: @aryankashyap7, @radojicic23 | https://leetcode.com/problems/climbing-stairs/",tags:["Math","Dynamic Programming","Memoization"]},o="0070 - Climbing Stairs (Easy)",s={unversionedId:"0000-0099/climbing-stairs-easy",id:"0000-0099/climbing-stairs-easy",title:"0070 - Climbing Stairs (Easy)",description:"Author: @aryankashyap7, @radojicic23 | https://leetcode.com/problems/climbing-stairs/",source:"@site/solutions/0000-0099/0070-climbing-stairs-easy.md",sourceDirName:"0000-0099",slug:"/0000-0099/climbing-stairs-easy",permalink:"/solutions/0000-0099/climbing-stairs-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0070-climbing-stairs-easy.md",tags:[{label:"Math",permalink:"/solutions/tags/math"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Memoization",permalink:"/solutions/tags/memoization"}],version:"current",sidebarPosition:70,frontMatter:{description:"Author: @aryankashyap7, @radojicic23 | https://leetcode.com/problems/climbing-stairs/",tags:["Math","Dynamic Programming","Memoization"]},sidebar:"tutorialSidebar",previous:{title:"0069 - Sqrt(x) (Easy)",permalink:"/solutions/0000-0099/sqrt-x-easy"},next:{title:"0072 - Edit Distance (Hard)",permalink:"/solutions/0000-0099/edit-distance-hard"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Fibonacci Series",id:"approach-1-fibonacci-series",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},m=c("Tabs"),u=c("TabItem"),b=c("SolutionAuthor"),h={toc:p},d="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0070---climbing-stairs-easy"},"0070 - Climbing Stairs (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/climbing-stairs/"},"https://leetcode.com/problems/climbing-stairs/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are climbing a staircase. It takes ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," steps to reach the top."),(0,a.kt)("p",null,"Each time you can either climb ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"2")," steps. In how many distinct ways can you climb to the top?"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: x = 8\nOutput: 2\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 45"))),(0,a.kt)("h2",{id:"approach-1-fibonacci-series"},"Approach 1: Fibonacci Series"),(0,a.kt)("p",null,"We can apply the concept of Fibonacci Numbers to solve this problem. The number of ways to reach the $n^{th}$ step is equal to the sum of ways of reaching $(n-1)^{th}$ step and ways of reaching $(n-2)^{th}$ step. The base cases for this problem are $n = 1$ and $n = 2$."),(0,a.kt)("p",null,"We can see that for $n = 1$, the number of ways to reach the $1^{st}$ step is $1$ and for $n = 2$, the number of ways to reach the $2^{nd}$ step is $2$. Similarly, for $n = 3$, the number of ways to reach the $3^{rd}$ step is $3$ and for $n = 4$, the number of ways to reach the $4^{th}$ step is $5$. This follows the Fibonacci Series(1, 2, 3, 5, 8, 13, ...)."),(0,a.kt)("p",null,"Time Complexity: $O(n)$, where $n$ is the number of steps to reach the top."),(0,a.kt)("p",null,"Space complexity: $O(1)$"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(b,{name:"@aryankashyap7",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int climbStairs(int n){\n        // base cases\n        if (n < 4) return n;\n        // apply Fibonacci Series where a and b are the previous two numbers\n        int a = 2, b = 3;\n        int res = 0;\n        // calculate the number of ways to reach the n^{th} step\n        for (int i = 4; i <= n; i++) {\n            res = a + b;\n            // Updating the values of a and b\n            if (i % 2 == 0) a = res;\n            else b = res;\n        }\n        // return the number of ways possible\n        return res;\n    }\n};\n"))),(0,a.kt)(u,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(b,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def climbStairs(self, n: int) -> int:\n        # base case\n        if n < 4:\n            return n\n        # apply Fibonacci Series where a and b are the previous two numbers\n        a, b = 2, 3\n        res = 0\n        # calculate the number of ways to reach the n^{th} step\n        for i in range(4, n+1):\n            res = a + b\n            # updating the values of a and b\n            if (i % 2 == 0):\n                a = res\n            else:\n                b = res\n        return res\n"))),(0,a.kt)(u,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)(b,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function (n) {\n  // base case\n  if (n < 4) {\n    return n;\n  }\n  // apply Fibonacci Series where a and b are the previous two numbers\n  let a = 2;\n  let b = 3;\n  let res = 0;\n  // calculate the number of ways to reach the n^{th} step\n  for (i = 4; i < n + 1; i++) {\n    res = a + b;\n    // updating values of a and b\n    if (i % 2 == 0) {\n      a = res;\n    } else {\n      b = res;\n    }\n  }\n  return res;\n};\n")))))}y.isMDXComponent=!0}}]);