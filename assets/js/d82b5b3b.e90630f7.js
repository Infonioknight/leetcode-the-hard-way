"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[55879],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),s=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=a,h=p["".concat(m,".").concat(d)]||p[d]||c[d]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},47890:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @ColeB2 | https://leetcode.com/problems/target-sum/",tags:["Array","Dynamic Programming","Backtracking"]},i="0494 - Target Sum (Medium)",l={unversionedId:"0400-0499/target-sum-medium",id:"0400-0499/target-sum-medium",title:"0494 - Target Sum (Medium)",description:"Author: @ColeB2 | https://leetcode.com/problems/target-sum/",source:"@site/solutions/0400-0499/0494-target-sum-medium.md",sourceDirName:"0400-0499",slug:"/0400-0499/target-sum-medium",permalink:"/solutions/0400-0499/target-sum-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0494-target-sum-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Backtracking",permalink:"/solutions/tags/backtracking"}],version:"current",sidebarPosition:494,frontMatter:{description:"Author: @ColeB2 | https://leetcode.com/problems/target-sum/",tags:["Array","Dynamic Programming","Backtracking"]},sidebar:"tutorialSidebar",previous:{title:"0493 - Reverse Pairs (Hard)",permalink:"/solutions/0400-0499/reverse-pairs-hard"},next:{title:"0496 - Next Greater Element I (Easy)",permalink:"/solutions/0400-0499/next-greater-element-i-easy"}},m={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming - Memoization",id:"approach-1-dynamic-programming---memoization",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},p=u("Tabs"),c=u("TabItem"),d=u("SolutionAuthor"),h={toc:s},g="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0494---target-sum-medium"},"0494 - Target Sum (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/target-sum/"},"https://leetcode.com/problems/target-sum/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),"."),(0,a.kt)("p",null,"You want to build an ",(0,a.kt)("strong",{parentName:"p"},"expression")," out of nums by adding one of the symbols ",(0,a.kt)("inlineCode",{parentName:"p"},"'+'")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"'-'")," before each integer in nums and then concatenate all the integers."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For example, if ",(0,a.kt)("inlineCode",{parentName:"li"},"nums = [2, 1]"),", you can add a ",(0,a.kt)("inlineCode",{parentName:"li"},"'+'")," before ",(0,a.kt)("inlineCode",{parentName:"li"},"2")," and a ",(0,a.kt)("inlineCode",{parentName:"li"},"'-'")," before ",(0,a.kt)("inlineCode",{parentName:"li"},"1")," and concatenate them to build the expression ",(0,a.kt)("inlineCode",{parentName:"li"},'"+2-1"'),".")),(0,a.kt)("p",null,"Return the number of different ",(0,a.kt)("strong",{parentName:"p"},"expressions")," that you can build, which evaluates to ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,1,1,1,1], target = 3\nOutput: 5\nExplanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1], target = 1\nOutput: 1\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 20")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= nums[i] <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= sum(nums[i]) <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-1000 <= target <= 1000"))),(0,a.kt)("h2",{id:"approach-1-dynamic-programming---memoization"},"Approach 1: Dynamic Programming - Memoization"),(0,a.kt)("p",null,"For each number in $$nums$$ we can calculate and store the possible sums on each iteration, and continue to do that and count all the sums at the end. "),(0,a.kt)("p",null,"To improve that we can use a hash map, with our key, value pairs being the $$sum$$ as our key, and the number of times that sum occurs as the value. This avoids repeated work on each iteration and allows $$O(1)$$ access to the $$target$$ number at the end instead of counting the occurrences of our target sum."),(0,a.kt)("p",null,"Time Complexity: $$O(n * s)$$ where $$n$$ is the number of nums, and $$s$$ is the range of possible sums. Our for loops will loop over all numbers, and all possible sums."),(0,a.kt)("p",null,"Space Complexity: $$O(s)$$ where $$s$$ is the range of possible sums. Our $$dp$$ hash map will contain key, value pairs based on the number of sums we can create."),(0,a.kt)(p,{mdxType:"Tabs"},(0,a.kt)(c,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(d,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def findTargetSumWays(self, nums: List[int], target: int) -> int:\n        # initialize our memoization hash map.\n        dp = defaultdict(int)\n        # Start with sum 0 = 1. As at the start, we have a sum of 0, that\n        # occurs 1 time.\n        dp[0] = 1\n        # Iterate all our numbers in nums array:\n        for num in nums:\n            # initialize a new dp dict, as we don't need to remember\n            # each sum on each iteration, we just need the new sums\n            # we create on every pass.\n            new_dp = defaultdict(int)\n            # iterate over each key, value pair. \n            # _sum = keys which are our sums we created in dp.\n            # value = freq, which is the frequency of each sum.\n            for _sum, freq in dp.items():\n                # The new sums we create will be the _sum +/- num\n                # so our new keys will be _sum + num and _sum - num.\n                # The values or frequency of each will be all the \n                # frequencies that each original _sum occurred at in \n                # the original dp hash map.\n                new_dp[_sum + num] += freq\n                new_dp[_sum - num] += freq\n            # replace our old dp hash map with the new_dp hash map.\n            dp = new_dp\n        # Return the frequency of target in dp hash map.\n        return dp[target]\n")))))}k.isMDXComponent=!0}}]);