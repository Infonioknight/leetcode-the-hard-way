"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[57523],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,h=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},90093:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @yashh0903 | https://leetcode.com/problems/next-greater-node-in-linked-list/",tags:["Array","Linked List","Stack","Monotonic Stack"]},i="1019 - Next Greater Node In Linked List (Medium)",l={unversionedId:"1000-1099/next-greater-node-in-linked-list",id:"1000-1099/next-greater-node-in-linked-list",title:"1019 - Next Greater Node In Linked List (Medium)",description:"Author: @yashh0903 | https://leetcode.com/problems/next-greater-node-in-linked-list/",source:"@site/solutions/1000-1099/1019-next-greater-node-in-linked-list.md",sourceDirName:"1000-1099",slug:"/1000-1099/next-greater-node-in-linked-list",permalink:"/solutions/1000-1099/next-greater-node-in-linked-list",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1000-1099/1019-next-greater-node-in-linked-list.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Linked List",permalink:"/solutions/tags/linked-list"},{label:"Stack",permalink:"/solutions/tags/stack"},{label:"Monotonic Stack",permalink:"/solutions/tags/monotonic-stack"}],version:"current",sidebarPosition:1019,frontMatter:{description:"Author: @yashh0903 | https://leetcode.com/problems/next-greater-node-in-linked-list/",tags:["Array","Linked List","Stack","Monotonic Stack"]},sidebar:"tutorialSidebar",previous:{title:"1011 - Capacity to Ship Packages within d days (Medium)",permalink:"/solutions/1000-1099/capacity-to-ship-packages-within-d-days-medium"},next:{title:"1029 - Two City Scheduling (Medium)",permalink:"/solutions/1000-1099/two-city-scheduling-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Stack",id:"approach-1-stack",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=d("Tabs"),m=d("TabItem"),u=d("SolutionAuthor"),h={toc:p},k="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(k,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1019---next-greater-node-in-linked-list-medium"},"1019 - Next Greater Node In Linked List (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/next-greater-node-in-linked-list/"},"https://leetcode.com/problems/next-greater-node-in-linked-list/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given the ",(0,a.kt)("inlineCode",{parentName:"p"},"head")," of a linked list with ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," nodes."),(0,a.kt)("p",null,"For each node in the list, find the value of the ",(0,a.kt)("strong",{parentName:"p"},"next greater node"),". That is, for each node, find the value of the first node that is next to it and has a ",(0,a.kt)("strong",{parentName:"p"},"strictly larger")," value than it."),(0,a.kt)("p",null,"Return an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"answer")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"answer[i]")," is the value of the next greater node of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ith")," node (",(0,a.kt)("strong",{parentName:"p"},"1-indexed"),"). If the ",(0,a.kt)("inlineCode",{parentName:"p"},"ith")," node does not have a next greater node, set ",(0,a.kt)("inlineCode",{parentName:"p"},"answer[i] = 0"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: head = [2,1,5]\nOutput: [5,5,0]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: head = [2,7,4,3,5]\nOutput: [7,0,5,5,0]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the list is ",(0,a.kt)("inlineCode",{parentName:"li"},"n"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 1e4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= Node.val <= 1e9"))),(0,a.kt)("h2",{id:"approach-1-stack"},"Approach 1: Stack"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Initialize an empty stack and an empty answer vector."),(0,a.kt)("li",{parentName:"ol"},"Reverse the given linked list."),(0,a.kt)("li",{parentName:"ol"},"Traverse the reversed linked list."),(0,a.kt)("li",{parentName:"ol"},"For each node:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"While the stack is not empty and the top element is less than or equal to the current node's value, pop elements from the stack."),(0,a.kt)("li",{parentName:"ul"},"If the stack is empty, append 0 to the answer vector."),(0,a.kt)("li",{parentName:"ul"},"If the stack is not empty, append the top element to the answer vector."),(0,a.kt)("li",{parentName:"ul"},"Push the current node's value onto the stack."))),(0,a.kt)("li",{parentName:"ol"},"Reverse the answer vector to obtain the correct order of next larger elements."),(0,a.kt)("li",{parentName:"ol"},"Return the answer vector.")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time Complexity: O(n), where n is the number of nodes in the linked list."),(0,a.kt)("li",{parentName:"ul"},"Space Complexity: O(n), as we use a stack to store elements and an answer vector to store the")),(0,a.kt)(c,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(u,{name:"@yashh0903",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> nextLargerNodes(ListNode* head) {\n        // Stores the result\n        vector<int> ans;\n        // Stack to keep track of elements\n        stack<int> st;\n\n        ListNode* newHead = NULL;\n\n        // Reversing the linked list\n        while (head != NULL) {\n            ListNode* next = head->next;\n            head->next = newHead;\n            newHead = head;\n            head = next;\n        }\n\n        while (newHead != nullptr) {\n            if (st.empty()) ans.push_back(0);\n            else if (!st.empty() && st.top() > newHead->val) ans.push_back(st.top());\n            else if (!st.empty() && st.top() <= newHead->val) {\n                // Pop elements from the stack until finding an element \n                // greater than the current node's value or the stack becomes empty\n                while (!st.empty() && st.top() <= newHead->val) st.pop();\n                // Append the top element to the answer vector\n                if (!st.empty()) ans.push_back(st.top());\n                // If the stack becomes empty, \n                // there is no larger element, so append 0 to the answer vector\n                else ans.push_back(0);\n            }\n            // Push the current node's value onto the stack\n            st.push(newHead->val);\n            // Move to the next node\n            newHead = newHead->next;\n        }\n        // Reversing the answer vector to restore the correct order\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n\n")))))}f.isMDXComponent=!0}}]);