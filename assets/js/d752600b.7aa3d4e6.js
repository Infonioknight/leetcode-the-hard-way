"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[9546],{34791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var o=n(85893),s=n(11151);const r={description:"Author: @heiheihang | https://leetcode.com/problems/sum-of-left-leaves/"},i="0404 - Sum of Left Leaves (Easy)",l={id:"0400-0499/sum-of-left-leaves-easy",title:"0404 - Sum of Left Leaves (Easy)",description:"Author: @heiheihang | https://leetcode.com/problems/sum-of-left-leaves/",source:"@site/solutions/0400-0499/0404-sum-of-left-leaves-easy.md",sourceDirName:"0400-0499",slug:"/0400-0499/sum-of-left-leaves-easy",permalink:"/solutions/0400-0499/sum-of-left-leaves-easy",draft:!1,unlisted:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0404-sum-of-left-leaves-easy.md",tags:[],version:"current",sidebarPosition:404,frontMatter:{description:"Author: @heiheihang | https://leetcode.com/problems/sum-of-left-leaves/"},sidebar:"tutorialSidebar",previous:{title:"0403 - Frog Jump (Hard)",permalink:"/solutions/0400-0499/Frog-Jump"},next:{title:"0413 - Arithmetic Slices (Medium)",permalink:"/solutions/0400-0499/arithmetic-slices-medium"}},a={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components},{SolutionAuthor:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("SolutionAuthor",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"0404---sum-of-left-leaves-easy",children:"0404 - Sum of Left Leaves (Easy)"}),"\n",(0,o.jsx)(t.h2,{id:"problem-link",children:"Problem Link"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://leetcode.com/problems/sum-of-left-leaves/",children:"https://leetcode.com/problems/sum-of-left-leaves/"})}),"\n",(0,o.jsx)(t.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,o.jsxs)(t.p,{children:["Given the ",(0,o.jsx)(t.code,{children:"root"})," of a binary tree, return the sum of all left leaves."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Example 1:"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:"https://assets.leetcode.com/uploads/2021/04/08/leftsum-tree.jpg",alt:""})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Input: root = [3,9,20,null,null,15,7]\nOutput: 24\nExplanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.\n"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Example 2:"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Input: root = [1]\nOutput: 0 \n"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Constraints:"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["The number of nodes in the tree is in the range ",(0,o.jsx)(t.code,{children:"[1, 1000]"}),"."]}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"-1000 <= Node.val <= 1000"})}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"approach-1-dfs",children:"Approach 1: DFS"}),"\n",(0,o.jsxs)(t.p,{children:["Following the template from ",(0,o.jsx)(t.a,{href:"../../tutorials/graph-theory/depth-first-search",children:"DFS Guide"}),", we iterate to each node and check if it is a left leaf. If it is a left leaf, we return that value to its parent for cumulating the sum. The trick here is to add a ",(0,o.jsx)(t.code,{children:"is_left"})," parameter to the ",(0,o.jsx)(t.code,{children:"dfs"})," function."]}),"\n",(0,o.jsx)(n,{name:"@heiheihang"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:\n        def dfs(node, isLeft):\n            \n            #skip when we reach the end of the path\n            if(node is None):\n                return 0\n                \n            #if node is a leaf (no left and right) and is the left child\n            #return its value for adding\n            if(node.left is None and node.right is None and isLeft is True):\n                return node.val \n            \n            #perform dfs on both children\n            #set isLeft to true on left child\n            #set isLeft to false on right child\n            return dfs(node.left, True) + dfs(node.right, False)\n        \n        #root can be a leaf if it is the only node in the tree\n        #but it is not a left leaf (no right/left)\n        return dfs(root, False)\n"})})]})}function c(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>i});var o=n(67294);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);