"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[89400],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=u(n),k=o,d=m["".concat(l,".").concat(k)]||m[k]||c[k]||r;return n?a.createElement(d,p(p({ref:t},s),{},{components:n})):a.createElement(d,p({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,p=new Array(r);p[0]=k;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:o,p[1]=i;for(var u=2;u<r;u++)p[u]=n[u];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},43322:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var a=n(87462),o=(n(67294),n(3905));const r={description:"Author: @wingkwong | https://leetcode.com/problems/implement-stack-using-queues"},p="0225 - Implement Stack using Queues (Easy)",i={unversionedId:"0200-0299/implement-stack-using-queues-easy",id:"0200-0299/implement-stack-using-queues-easy",title:"0225 - Implement Stack using Queues (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/implement-stack-using-queues",source:"@site/solutions/0200-0299/0225-implement-stack-using-queues-easy.md",sourceDirName:"0200-0299",slug:"/0200-0299/implement-stack-using-queues-easy",permalink:"/solutions/0200-0299/implement-stack-using-queues-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0225-implement-stack-using-queues-easy.md",tags:[],version:"current",sidebarPosition:225,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/implement-stack-using-queues"},sidebar:"tutorialSidebar",previous:{title:"0219 - Contains Duplicate II (Easy)",permalink:"/solutions/0200-0299/contains-duplicate-ii-easy"},next:{title:"0226 - Invert Binary Tree (Easy)",permalink:"/solutions/0200-0299/invert-binary-tree-easy"}},l={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: 2 Queues",id:"approach-1-2-queues",level:2},{value:"Approach 2: 1 Queue",id:"approach-2-1-queue",level:2}],s=(m="SolutionAuthor",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var m;const c={toc:u},k="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(k,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0225---implement-stack-using-queues-easy"},"0225 - Implement Stack using Queues (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/implement-stack-using-queues"},"https://leetcode.com/problems/implement-stack-using-queues")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (",(0,o.kt)("inlineCode",{parentName:"p"},"push"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"top"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"pop"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"empty"),")."),(0,o.kt)("p",null,"Implement the ",(0,o.kt)("inlineCode",{parentName:"p"},"MyStack")," class:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"void push(int x)")," Pushes element x to the top of the stack."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"int pop()")," Removes the element on the top of the stack and returns it."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"int top()")," Returns the element on the top of the stack."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"boolean empty()")," Returns ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," if the stack is empty, ",(0,o.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Notes:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You must use ",(0,o.kt)("strong",{parentName:"li"},"only")," standard operations of a queue, which means that only ",(0,o.kt)("inlineCode",{parentName:"li"},"push to back"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"peek/pop from front"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"size")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"is empty")," operations are valid."),(0,o.kt)("li",{parentName:"ul"},"Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input\n["MyStack", "push", "push", "top", "pop", "empty"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\n\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= x <= 9")),(0,o.kt)("li",{parentName:"ul"},"At most ",(0,o.kt)("inlineCode",{parentName:"li"},"100")," calls will be made to ",(0,o.kt)("inlineCode",{parentName:"li"},"push"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"pop"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"top"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"empty"),"."),(0,o.kt)("li",{parentName:"ul"},"All the calls to ",(0,o.kt)("inlineCode",{parentName:"li"},"pop")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"top")," are valid.")),(0,o.kt)("h2",{id:"approach-1-2-queues"},"Approach 1: 2 Queues"),(0,o.kt)("p",null,"We can push all elements to one queue. For ",(0,o.kt)("inlineCode",{parentName:"p"},"pop")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"top")," function, we move first $$n - 1$$ elements to another queue. What's left would be the top element. For ",(0,o.kt)("inlineCode",{parentName:"p"},"pop")," function, we pop the top element as well and swap the queue."),(0,o.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class MyStack {\npublic:\n    queue<int> q1, q2;\n    MyStack() { }\n    \n    void push(int x) {\n        q1.push(x);\n    }\n    \n    int pop() {\n        while (q1.size() > 1) {\n            int x = q1.front();\n            q1.pop();\n            q2.push(x);\n        }\n        int res = q1.front();\n        q1.pop();\n        swap(q1, q2);\n        return res;\n    }\n    \n    int top() {\n        while (q1.size() > 1) {\n            int x = q1.front();\n            q1.pop();\n            q2.push(x);\n        }\n        return q1.front();\n    }\n    \n    bool empty() {\n        return q1.empty();\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */\n")),(0,o.kt)("h2",{id:"approach-2-1-queue"},"Approach 2: 1 Queue"),(0,o.kt)("p",null,"For every push, we simply make the order backwards for ",(0,o.kt)("inlineCode",{parentName:"p"},"push")," function. For ",(0,o.kt)("inlineCode",{parentName:"p"},"pop"),"() and ",(0,o.kt)("inlineCode",{parentName:"p"},"top()"),", we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"front()")," to get the top element and return it."),(0,o.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class MyStack {\npublic:\n    queue<int> q1;\n    MyStack() { }\n    \n    void push(int x) {\n        q1.push(x);\n        for (int i = 1; i < q1.size(); i++) {\n            q1.push(q1.front());\n            q1.pop();\n        }\n    }\n    \n    int pop() {\n        int x = q1.front(); q1.pop();\n        return x;\n    }\n    \n    int top() {\n        return q1.front();\n    }\n    \n    bool empty() {\n        return q1.empty();\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */\n")))}d.isMDXComponent=!0}}]);