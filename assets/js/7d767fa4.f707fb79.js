"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[75548],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,y=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return t?r.createElement(y,l(l({ref:n},u),{},{components:t})):r.createElement(y,l({ref:n},u))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[m]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7090:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>b,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const o={description:"Author: @vigneshshiv, @wingkwong | https://leetcode.com/problems/happy-number/",tags:["Array","Math","Two Pointers"]},l="0202 - Happy Number (Easy)",i={unversionedId:"0200-0299/happy-number-easy",id:"0200-0299/happy-number-easy",title:"0202 - Happy Number (Easy)",description:"Author: @vigneshshiv, @wingkwong | https://leetcode.com/problems/happy-number/",source:"@site/solutions/0200-0299/0202-happy-number-easy.md",sourceDirName:"0200-0299",slug:"/0200-0299/happy-number-easy",permalink:"/solutions/0200-0299/happy-number-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0202-happy-number-easy.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Math",permalink:"/solutions/tags/math"},{label:"Two Pointers",permalink:"/solutions/tags/two-pointers"}],version:"current",sidebarPosition:202,frontMatter:{description:"Author: @vigneshshiv, @wingkwong | https://leetcode.com/problems/happy-number/",tags:["Array","Math","Two Pointers"]},sidebar:"tutorialSidebar",previous:{title:"0200 - Number of Islands (Medium)",permalink:"/solutions/0200-0299/number-of-islands-medium"},next:{title:"0204 - Count Primes",permalink:"/solutions/0200-0299/count-primes"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Floyd&#39;s Tortoise and Hare",id:"approach-1-floyds-tortoise-and-hare",level:2}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},m=u("Tabs"),c=u("TabItem"),d=u("SolutionAuthor"),y={toc:p},h="wrapper";function b(e){let{components:n,...t}=e;return(0,a.kt)(h,(0,r.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0202---happy-number-easy"},"0202 - Happy Number (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/happy-number/"},"https://leetcode.com/problems/happy-number/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Write an algorithm to determine if a number ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," is happy."),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"happy number")," is a number defined by the following process:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Starting with any positive integer, replace the number by the sum of the squares of its digits."),(0,a.kt)("li",{parentName:"ul"},"Repeat the process until the number equals 1 (where it will stay), or it ",(0,a.kt)("strong",{parentName:"li"},"loops endlessly in a cycle")," which does not include 1."),(0,a.kt)("li",{parentName:"ul"},"Those numbers for which this process ",(0,a.kt)("strong",{parentName:"li"},"ends in 1")," are happy.")),(0,a.kt)("p",null,"Return ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," ",(0,a.kt)("em",{parentName:"p"},"if")," ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," ",(0,a.kt)("em",{parentName:"p"},"is a happy number, and")," ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," ",(0,a.kt)("em",{parentName:"p"},"if not"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 19\nOutput: true\nExplanation:\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 2\nOutput: false\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 2^31 - 1"))),(0,a.kt)("h2",{id:"approach-1-floyds-tortoise-and-hare"},"Approach 1: Floyd's Tortoise and Hare"),(0,a.kt)("p",null,"As stated clearly in the problem, ",(0,a.kt)("strong",{parentName:"p"},"loops endlessly in a cycle"),", So we can solve this by using Floyd's Tortoise and Hare algorithm."),(0,a.kt)("p",null,"It's a simple cycle detection algorithm, where one pointer traverses twice as fast as another, once two pointers meet, we can trace back to where the cycle begins."),(0,a.kt)("p",null,"Time Complexity: $O(m)$, where $m$ - # of cycles"),(0,a.kt)("p",null,"Space complexity: $O(1)$"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(d,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean isHappy(int n) {\n        int slow = n, fast = n;\n        do {\n            slow = digitSquareSum(slow);\n            fast = digitSquareSum(digitSquareSum(fast));\n        } while (slow != fast);\n        return slow == 1 ? true : false;\n    }\n    \n    public int digitSquareSum(int num) {\n        int ans = 0;\n        while (num > 0) {\n            int digit = num % 10;\n            ans += digit * digit;\n            num /= 10;\n        }\n        return ans;\n    }\n}\n"))),(0,a.kt)(c,{value:"rs",label:"Rust",mdxType:"TabItem"},(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"impl Solution {\n    fn nxt(mut n: i32) -> i32 {\n        let mut res = 0;\n        while n > 0 {\n            let d = n % 10;\n            res += d * d;\n            n /= 10;\n        }\n        res\n    }\n    \n    pub fn is_happy(n: i32) -> bool {\n        let mut slow = n;\n        let mut fast = Solution::nxt(n);\n        while fast != 1 && slow != fast {\n            slow = Solution::nxt(slow);\n            fast = Solution::nxt(Solution::nxt(fast));\n        }\n        return fast == 1;\n    }\n}\n"))),(0,a.kt)(c,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(d,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def next_num(self, n: int) -> int:\n        # initialize num as 0\n        num = 0\n        # while our number exists: loop\n        while n:\n            # add ones digit squared to num\n            num += (n % 10) ** 2\n            # integer division to remove ones digit.\n            n = n // 10\n        return num\n\n    def isHappy(self, n: int) -> bool:\n        ## Cycle Detection - initialize slow/fast pointers\n        slow, fast = n, self.next_num(n)\n        ## Since we will always reach a cycle at some point\n        ## loop until fast reaches slow\n        while slow != fast:\n            # move fast pointer 2 numbers, slow 1.\n            fast = self.next_num(self.next_num(fast))\n            slow = self.next_num(slow)\n        # If the cycle location ends on 1, we are happy, else False.\n        return fast == 1\n")))))}b.isMDXComponent=!0}}]);