"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[1303],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,k=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(k,i(i({ref:t},s),{},{components:n})):r.createElement(k,i({ref:t},s))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[m]="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},41510:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/combinations/",tags:["Backtracking"]},i="0077 - Combinations (Medium)",c={unversionedId:"0000-0099/combinations-medium",id:"0000-0099/combinations-medium",title:"0077 - Combinations (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/combinations/",source:"@site/solutions/0000-0099/0077-combinations-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/combinations-medium",permalink:"/solutions/0000-0099/combinations-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0077-combinations-medium.md",tags:[{label:"Backtracking",permalink:"/solutions/tags/backtracking"}],version:"current",sidebarPosition:77,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/combinations/",tags:["Backtracking"]},sidebar:"tutorialSidebar",previous:{title:"0076 - Minimum Window Substring (Hard)",permalink:"/solutions/0000-0099/minimum-window-substring-hard"},next:{title:"0078 - Subsets (Medium)",permalink:"/solutions/0000-0099/subsets-medium"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Backtracking",id:"approach-1-backtracking",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},m=s("Tabs"),u=s("TabItem"),d=s("SolutionAuthor"),k={toc:p},b="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(b,(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0077---combinations-medium"},"0077 - Combinations (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/combinations/"},"https://leetcode.com/problems/combinations/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given two integers ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,o.kt)("em",{parentName:"p"},"all possible combinations of")," ",(0,o.kt)("inlineCode",{parentName:"p"},"k")," ",(0,o.kt)("em",{parentName:"p"},"numbers chosen from the range")," ",(0,o.kt)("inlineCode",{parentName:"p"},"[1, n]"),"."),(0,o.kt)("p",null,"You may return the answer in ",(0,o.kt)("strong",{parentName:"p"},"any order"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 4, k = 2\nOutput: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\nExplanation: There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 1, k = 1\nOutput: [[1]]\nExplanation: There is 1 choose 1 = 1 total combination.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= n <= 20")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= k <= n"))),(0,o.kt)("h2",{id:"approach-1-backtracking"},"Approach 1: Backtracking"),(0,o.kt)("p",null,"This question can be solved by standard backtracking. Check out ",(0,o.kt)("a",{parentName:"p",href:"../../tutorials/basic-topics/backtracking"},"Backtracking")," section for the detailed explanation."),(0,o.kt)(m,{mdxType:"Tabs"},(0,o.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<int>> combine(int n, int k) {\n        vector<int> chosen;\n        vector<vector<int>> ans;\n        function<void(int)> backtrack = [&](int start) {\n            if (chosen.size() == k) {\n                ans.push_back(chosen);\n                return;\n            }\n            for (int i = start; i <= n; i++) {\n                chosen.push_back(i);\n                backtrack(i + 1);\n                chosen.pop_back();\n            } \n        };\n        backtrack(1);\n        return ans;\n    }\n};\n")))))}h.isMDXComponent=!0}}]);