"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[34506],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,h=c["".concat(p,".").concat(d)]||c[d]||m[d]||a;return n?o.createElement(h,i(i({ref:t},u),{},{components:n})):o.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40974:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>w,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=n(87462),r=(n(67294),n(3905));const a={description:"Author: @wingkwong, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/power-of-two/"},i="0231 - Power of Two (Easy)",l={unversionedId:"0200-0299/power-of-two-easy",id:"0200-0299/power-of-two-easy",title:"0231 - Power of Two (Easy)",description:"Author: @wingkwong, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/power-of-two/",source:"@site/solutions/0200-0299/0231-power-of-two-easy.md",sourceDirName:"0200-0299",slug:"/0200-0299/power-of-two-easy",permalink:"/solutions/0200-0299/power-of-two-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0231-power-of-two-easy.md",tags:[],version:"current",sidebarPosition:231,frontMatter:{description:"Author: @wingkwong, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/power-of-two/"},sidebar:"tutorialSidebar",previous:{title:"0230 - Kth Smallest Element in a BST (Medium)",permalink:"/solutions/0200-0299/kth-smallest-element-in-a-bst-medium"},next:{title:"0234 - Palindrome Linked List (Easy)",permalink:"/solutions/0200-0299/palindrome-linked-list-easy"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Bit Manipulation",id:"approach-1-bit-manipulation",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=u("Tabs"),m=u("TabItem"),d=u("SolutionAuthor"),h={toc:s},f="wrapper";function w(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0231---power-of-two-easy"},"0231 - Power of Two (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/power-of-two/"},"https://leetcode.com/problems/power-of-two/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given an integer ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),", return ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"true")," if it is a power of two. Otherwise, return ",(0,r.kt)("inlineCode",{parentName:"em"},"false")),"."),(0,r.kt)("p",null,"An integer ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," is a power of two, if there exists an integer ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," such that ",(0,r.kt)("inlineCode",{parentName:"p"},"n == 2^x"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: n = 1\nOutput: true\nExplanation: 2^0 = 1\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: n = 16\nOutput: true\nExplanation: 2^4 = 16\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: n = 3\nOutput: false\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-2^31 <= n <= 2^31 - 1"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Follow up:")," Could you solve it without loops/recursion?"),(0,r.kt)("h2",{id:"approach-1-bit-manipulation"},"Approach 1: Bit Manipulation"),(0,r.kt)("p",null,"It's obvious to see that the answer is ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," if $n <= 0$. If $n$ is positive, a power of two would only have $1$ bit set. We can use $n$ ","&"," $(n-1)$ which is a common trick to remove the rightmost set bit. If it's a power of 2, the only set bit would be removed, hence the result would be $0$. Otherwise, even we remove the rightmost set bit, the value wont be $0$."),(0,r.kt)(c,{mdxType:"Tabs"},(0,r.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isPowerOfTwo(int n) {\n        // 1. check if it is a positive number\n        // 2. check the value is 0 after removing the rightmost bit\n        return n > 0 && !(n & (n - 1));\n    }\n};\n"))),(0,r.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(d,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    /**\n     * 1. check if it is a positive number\n     * 2. check the value is 0 after removing the rightmost bit\n     *\n     * Samples below\n     * \n     *  #1 n = 5\n     *     5 = 0101\n     *   5-1 = 0100\n     *   ans = 0100 (not a valid answer)\n     *\n     *  #2 n = 8\n     *     8 = 1000\n     *   n-1 = 0111\n     *   ans = 0000 (right answer)\n     *\n     */\n    public boolean isPowerOfTwo(int n) {\n        return n > 0 & (n & (n - 1)) == 0;\n    }\n}\n"))),(0,r.kt)(m,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# 1. check if it's a positive number\n# 2. check the value is 0 after removing the rightmost bit\nclass Solution:\n    def isPowerOfTwo(self, n: int) -> bool:\n        return n > 0 and not (n & (n - 1))\n"))),(0,r.kt)(m,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number} n\n * @return {boolean}\n */\n\n// 1. check if it's a positive number\n// 2. check the value is 0 after removing the rightmost bit\nvar isPowerOfTwo = function(n) {\n    return n > 0 && !(n & (n - 1));\n};\n")))))}w.isMDXComponent=!0}}]);