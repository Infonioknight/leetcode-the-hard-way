"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[26873],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},$=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),$=o,k=m["".concat(u,".").concat($)]||m[$]||c[$]||a;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=$;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}$.displayName="MDXCreateElement"},30237:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>k,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/consecutive-numbers-sum/"},i="0829 - Consecutive Numbers Sum (Hard)",s={unversionedId:"0800-0899/consecutive-numbers-sum-hard",id:"0800-0899/consecutive-numbers-sum-hard",title:"0829 - Consecutive Numbers Sum (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/consecutive-numbers-sum/",source:"@site/solutions/0800-0899/0829-consecutive-numbers-sum-hard.md",sourceDirName:"0800-0899",slug:"/0800-0899/consecutive-numbers-sum-hard",permalink:"/solutions/0800-0899/consecutive-numbers-sum-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0800-0899/0829-consecutive-numbers-sum-hard.md",tags:[],version:"current",sidebarPosition:829,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/consecutive-numbers-sum/"},sidebar:"tutorialSidebar",previous:{title:"0814 - Binary Tree Pruning (Medium)",permalink:"/solutions/0800-0899/binary-tree-pruning-medium"},next:{title:"0838 - Push Dominoes (Medium)",permalink:"/solutions/0800-0899/push-dominoes-medium"}},u={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach: Math",id:"approach-math",level:2}],p=(m="SolutionAuthor",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var m;const c={toc:l},$="wrapper";function k(e){let{components:t,...n}=e;return(0,o.kt)($,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0829---consecutive-numbers-sum-hard"},"0829 - Consecutive Numbers Sum (Hard)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/consecutive-numbers-sum/"},"https://leetcode.com/problems/consecutive-numbers-sum/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given an integer ",(0,o.kt)("inlineCode",{parentName:"p"},"n"),", return ",(0,o.kt)("em",{parentName:"p"},"the number of ways you can write")," ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," ",(0,o.kt)("em",{parentName:"p"},"as the sum of consecutive positive integers.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 9\nOutput: 3\nExplanation: 9 = 4 + 5 = 2 + 3 + 4\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5 \n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= n <= 10^9"))),(0,o.kt)("h2",{id:"approach-math"},"Approach: Math"),(0,o.kt)("p",null,"The first observation is that $$n$$itself is one of the answer. We can define $$ans = 1$$."),(0,o.kt)("p",null,"Let $$x$$ be the first number of the sequence, then we should have"),(0,o.kt)("p",null,"$$\nn = x + (x + 1) + (x + 2) + ... + (x + (k - 1))\n$$"),(0,o.kt)("p",null,"We can arrange the formula. First there are $$k$$ terms of $$x$$ so we can just multiply them together. The remaining sum is just $$0 + 1 + 2 + ... + (k - 1)$$ which is $$k * (k - 1) / 2$$. Why? We can get that from sum of $$n$$ terms in Arithmetic Progress (A.P.) formula"),(0,o.kt)("p",null,"$$\nS = (n / 2) ",(0,o.kt)("em",{parentName:"p"}," (2 ")," a + (n - 1) * d)\n$$"),(0,o.kt)("p",null,"where $$a$$is the first term and $$d$$ is the common difference."),(0,o.kt)("p",null,"We can further transform from"),(0,o.kt)("p",null,"$$\nS = (n / 2) ",(0,o.kt)("em",{parentName:"p"}," (a + a + (n - 1) ")," d)\n$$"),(0,o.kt)("p",null,"to the following expression"),(0,o.kt)("p",null,"$$\nS = (n / 2) ",(0,o.kt)("em",{parentName:"p"}," (a ")," l)\n$$"),(0,o.kt)("p",null,"where $$l$$is the last term and it is equivalent to $$a + (n - 1) * d$$."),(0,o.kt)("p",null,"Back to our problem, from $$0 + 1 + 2 + ... + (k - 1)$$, we can see that the first term is 0 and and last term is $$(k - 1)$$. Therefore, we can know that  $$0 + 1 + 2 + ... + (k - 1) = (k / 2) ",(0,o.kt)("em",{parentName:"p"}," (0 + (k - 1))  = k ")," (k - 1) / 2$$."),(0,o.kt)("p",null,"Now we have $$k ",(0,o.kt)("em",{parentName:"p"}," x = n - k "),' (k - 1) / 2$$, which means we can construct a sum of $$n$$using $$k$$terms starting from $$x$$ if $$n - k * (k - 1) / 2$$ is a multiple of $$k$$. We can iterate $$k$$and check if this statement is true or not. The next problem would be "What is the range of $$k$$?".'),(0,o.kt)("p",null,"Since $$n$$itself is already considered, so we need to start $$k$$ from 2. From the above formula, $$n - k * (k - 1) / 2$$ needs to be greater than 0."),(0,o.kt)("p",null,"$$\nn - k * (k - 1) / 2 > 0\n$$"),(0,o.kt)("p",null,"$$\nk ",(0,o.kt)("em",{parentName:"p"}," (k - 1) < 2 ")," n\n$$"),(0,o.kt)("p",null,"The upper bound for $$k$$ approximately would be around $$\\sqrt {2 ",(0,o.kt)("em",{parentName:"p"}," n + k}$$. Therefore, we iterate $$k$$ from $$2$$ to $$\\sqrt {2 ")," n + k}$$ to check if $$n - k * (k - 1) / 2$$ is a multiple of $$k$$. If so, it means we have one sequence so we increase the answer by $$1$$."),(0,o.kt)(p,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int consecutiveNumbersSum(int n) {\n        int ans = 1;\n        // n = x + (x + 1) + (x + 2) + ... + (x + (k - 1))\n        // n = k * x + k * (k - 1) / 2\n        // k * x = n - k * (k - 1) / 2\n        // n - k * (k - 1) / 2 > 0\n        // k * (k - 1) < 2 * n\n        // ~= k * k < 2 * n + k\n        for (int k = 2; k < sqrt(2 * n + k); k++) {\n            ans += (n - (k * (k - 1) / 2)) % k == 0;\n        }\n        return ans;\n    }\n};\n")))}k.isMDXComponent=!0}}]);