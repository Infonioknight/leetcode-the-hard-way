"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[35769],{3905:(e,a,t)=>{t.d(a,{Zo:()=>o,kt:()=>N});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function m(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),l=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):m(m({},a),e)),t},o=function(e){var a=l(e.components);return n.createElement(p.Provider,{value:a},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},k=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),c=l(t),k=r,N=c["".concat(p,".").concat(k)]||c[k]||h[k]||s;return t?n.createElement(N,m(m({ref:a},o),{},{components:t})):n.createElement(N,m({ref:a},o))}));function N(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,m=new Array(s);m[0]=k;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[c]="string"==typeof e?e:r,m[1]=i;for(var l=2;l<s;l++)m[l]=t[l];return n.createElement.apply(null,m)}return n.createElement.apply(null,t)}k.displayName="MDXCreateElement"},84051:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>m,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=t(87462),r=(t(67294),t(3905));const s={description:"Author: @ColeB2 | https://leetcode.com/problems/reconstruct-itinerary/",tags:["Depth-First Search","Graph","Eulerian Circuit"]},m="0332 - Reconstruct Itinerary (Hard)",i={unversionedId:"0300-0399/reconstruct-itinerary-hard",id:"0300-0399/reconstruct-itinerary-hard",title:"0332 - Reconstruct Itinerary (Hard)",description:"Author: @ColeB2 | https://leetcode.com/problems/reconstruct-itinerary/",source:"@site/solutions/0300-0399/0332-reconstruct-itinerary-hard.md",sourceDirName:"0300-0399",slug:"/0300-0399/reconstruct-itinerary-hard",permalink:"/solutions/0300-0399/reconstruct-itinerary-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0300-0399/0332-reconstruct-itinerary-hard.md",tags:[{label:"Depth-First Search",permalink:"/solutions/tags/depth-first-search"},{label:"Graph",permalink:"/solutions/tags/graph"},{label:"Eulerian Circuit",permalink:"/solutions/tags/eulerian-circuit"}],version:"current",sidebarPosition:332,frontMatter:{description:"Author: @ColeB2 | https://leetcode.com/problems/reconstruct-itinerary/",tags:["Depth-First Search","Graph","Eulerian Circuit"]},sidebar:"tutorialSidebar",previous:{title:"0327 - Count of Range Sum (Hard)",permalink:"/solutions/0300-0399/count-of-range-sum-hard"},next:{title:"0334 - Increasing Triplet Subsequence (Medium)",permalink:"/solutions/0300-0399/increasing-triplet-subsequence-medium"}},p={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Euler Path DFS",id:"approach-1-euler-path-dfs",level:2}],o=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",a)},c=o("Tabs"),h=o("TabItem"),k=o("SolutionAuthor"),N={toc:l},d="wrapper";function u(e){let{components:a,...t}=e;return(0,r.kt)(d,(0,n.Z)({},N,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0332---reconstruct-itinerary-hard"},"0332 - Reconstruct Itinerary (Hard)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/reconstruct-itinerary/"},"https://leetcode.com/problems/reconstruct-itinerary/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given a list of airline ",(0,r.kt)("inlineCode",{parentName:"p"},"tickets")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"tickets[i] = [fromi, toi]")," represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it."),(0,r.kt)("p",null,"All of the tickets belong to a man who departs from ",(0,r.kt)("inlineCode",{parentName:"p"},'"JFK"'),", thus, the itinerary must begin with ",(0,r.kt)("inlineCode",{parentName:"p"},'"JFK"'),". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For example, the itinerary ",(0,r.kt)("inlineCode",{parentName:"li"},'["JFK", "LGA"]')," has a smaller lexical order than ",(0,r.kt)("inlineCode",{parentName:"li"},'["JFK", "LGB"]'),".")),(0,r.kt)("p",null,"You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: tickets = [["MUC","LHR"],["JFK","MUC"],["SFO","SJC"],["LHR","SFO"]]\nOutput: ["JFK","MUC","LHR","SFO","SJC"]\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: tickets = [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]\nOutput: ["JFK","ATL","JFK","SFO","ATL","SFO"]\nExplanation: Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"] but it is larger in lexical order.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= tickets.length <= 300")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tickets[i].length == 2")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fromi.length == 3")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toi.length == 3")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fromi")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"toi")," consist of uppercase English letters."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fromi != toi"))),(0,r.kt)("h2",{id:"approach-1-euler-path-dfs"},"Approach 1: Euler Path DFS"),(0,r.kt)("p",null,"The simple way to solve this would be the bruteforce/dfs/backtracking. That is to create an adjacency list, run our DFS algorithm and track the path and a visited set at each iteration (you'd also need a way to differentiate 2 of the same ticket), and find all itineraries, then choose the lexically smallest itinerary."),(0,r.kt)("p",null,"You could also simplify it by sorting the sublists of our adjacency list in reverse sorted order. This would give you the lexically smallest itinerary first, so you could stop your DFS early. But still the copying of the paths, and visited sets for each iteration for backtracking purposes would be inefficient."),(0,r.kt)("p",null,"A more efficient solution involves knowing a bit about Euler Paths, and how to create them. We do the same thing to start, we build our adjacency list, and sort the lists in reverse order so the lexically smaller destination appears at the end of each list. Ex: ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},'"'),(0,r.kt)("mi",{parentName:"mrow"},"J"),(0,r.kt)("mi",{parentName:"mrow"},"F"),(0,r.kt)("mi",{parentName:"mrow"},"K"),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},'"'),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},'"'),(0,r.kt)("mi",{parentName:"mrow"},"C"),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},'"'),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},'"'),(0,r.kt)("mi",{parentName:"mrow"},"B"),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},'"'),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},'"'),(0,r.kt)("mi",{parentName:"mrow"},"A"),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},'"'),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"}")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},'\\{"JFK": ["C", "B", "A"]\\}')))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,r.kt)("span",{parentName:"span",className:"mord"},'"'),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.09618em"}},"J"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"K"),(0,r.kt)("span",{parentName:"span",className:"mord"},'"'),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mopen"},"["),(0,r.kt)("span",{parentName:"span",className:"mord"},'"'),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,r.kt)("span",{parentName:"span",className:"mord"},'"'),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},'"'),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05017em"}},"B"),(0,r.kt)("span",{parentName:"span",className:"mord"},'"'),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},'"'),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,r.kt)("span",{parentName:"span",className:"mord"},'"'),(0,r.kt)("span",{parentName:"span",className:"mclose"},"]}")))))),(0,r.kt)("p",null,"Then we would start our DFS at ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"J"),(0,r.kt)("mi",{parentName:"mrow"},"F"),(0,r.kt)("mi",{parentName:"mrow"},"K")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"JFK")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.09618em"}},"J"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"K"))))),". Inside our dfs, while our current destinations have tickets, we would traverse to the lexically smallest destination, and continue that until we reach a destination that has no tickets. Since we reached a dead end, that is when we backtrack, we do that by adding the dead-end destination to our itinerary and popping it off the stack to try the next destination."),(0,r.kt)("p",null,"This will give us an itinerary in reverse order, as you can imagine ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"J"),(0,r.kt)("mi",{parentName:"mrow"},"F"),(0,r.kt)("mi",{parentName:"mrow"},"K")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"JFK")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.09618em"}},"J"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"F"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"K")))))," was the first destination on the stack, and will be the last destination off the stack. Since we find it in reverse, we must reverse our itinerary before returning it."),(0,r.kt)("p",null,"Time Complexity: We can break out time complexity into 3 parts. Constructing our adjacency list ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"V"),(0,r.kt)("mo",{parentName:"mrow"},"+"),(0,r.kt)("mi",{parentName:"mrow"},"E"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(V + E)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.22222em"}},"V"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"E"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"))))),", sorting our adjacency list, ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"E"),(0,r.kt)("mi",{parentName:"mrow"},"l"),(0,r.kt)("mi",{parentName:"mrow"},"o"),(0,r.kt)("mi",{parentName:"mrow"},"g"),(0,r.kt)("mi",{parentName:"mrow"},"E"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(ElogE)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"El"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"E"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"))))),", then finally our Euler traversal in ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"E"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(E)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"E"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))," time."),(0,r.kt)("p",null,"Space Complexity: $$O(V + E) where V is the vertices, and E is the edges, we need to create an adjacency list."),(0,r.kt)(c,{mdxType:"Tabs"},(0,r.kt)(h,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(k,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'class Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        # Create an adjaceny list. O(V+E)\n        # key: from destination and values: list of all to destinations.\n        adj_list = defaultdict(list)\n        for from_dest, to_dest in tickets:\n            adj_list[from_dest].append(to_dest)\n        # Reverse sort all the to destinations so we can pop the last\n        # destination off the list in order we are traversing.\n        # Do this so our destination is smallest lexically.\n        # O(ElogE)\n        for to_dest in adj_list.values():\n            to_dest.sort(reverse=True)\n\n        # Initialize our stack, starting at "JFK" and our\n        # itinerary which will be empty to start.\n        stack = ["JFK"]\n        itinerary = []\n        # While our stack still has values and isn\'t empty. O(E)\n        while stack:\n            # adj_list[stack[-1]] -> stack[-1] top of the stack, and\n            # our current destination. So we are checking that while\n            # the destination we are at (which updates on each loop), \n            # has a destination to go to, go to it.\n            while adj_list[stack[-1]]:\n                stack.append(adj_list[stack[-1]].pop())\n            # Reached a dead end, not more tickets from the last destination.\n            else:\n                itinerary.append(stack.pop())\n                # No tickets, we reached a dead end, then the place\n                # that reaches a dead end should be the last in our\n                # itinerary, so we will add it to the itinerary first.\n                # And backtrack to last destination we were at.\n        # Since we added the itinerary in reverse order, return reversed\n        # version of our itinerary.\n        return itinerary[::-1]\n')))))}u.isMDXComponent=!0}}]);