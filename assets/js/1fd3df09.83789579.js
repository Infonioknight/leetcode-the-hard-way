"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[98425],{3905:function(a,e,n){n.d(e,{Zo:function(){return i},kt:function(){return u}});var t=n(67294);function r(a,e,n){return e in a?Object.defineProperty(a,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):a[e]=n,a}function s(a,e){var n=Object.keys(a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(a);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.push.apply(n,t)}return n}function m(a){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){r(a,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(n,e))}))}return a}function o(a,e){if(null==a)return{};var n,t,r=function(a,e){if(null==a)return{};var n,t,r={},s=Object.keys(a);for(t=0;t<s.length;t++)n=s[t],e.indexOf(n)>=0||(r[n]=a[n]);return r}(a,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(a);for(t=0;t<s.length;t++)n=s[t],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(a,n)&&(r[n]=a[n])}return r}var p=t.createContext({}),l=function(a){var e=t.useContext(p),n=e;return a&&(n="function"==typeof a?a(e):m(m({},e),a)),n},i=function(a){var e=l(a.components);return t.createElement(p.Provider,{value:e},a.children)},d={inlineCode:"code",wrapper:function(a){var e=a.children;return t.createElement(t.Fragment,{},e)}},c=t.forwardRef((function(a,e){var n=a.components,r=a.mdxType,s=a.originalType,p=a.parentName,i=o(a,["components","mdxType","originalType","parentName"]),c=l(n),u=r,f=c["".concat(p,".").concat(u)]||c[u]||d[u]||s;return n?t.createElement(f,m(m({ref:e},i),{},{components:n})):t.createElement(f,m({ref:e},i))}));function u(a,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof a||r){var s=n.length,m=new Array(s);m[0]=c;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=a,o.mdxType="string"==typeof a?a:r,m[1]=o;for(var l=2;l<s;l++)m[l]=n[l];return t.createElement.apply(null,m)}return t.createElement.apply(null,n)}c.displayName="MDXCreateElement"},35763:function(a,e,n){n.r(e),n.d(e,{assets:function(){return i},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return d}});var t=n(87462),r=n(63366),s=(n(67294),n(3905)),m=["components"],o={description:"Author: @dhanu084 | https://leetcode.com/problems/find-all-groups-of-farmland/",tags:["Graphs","DFS"]},p="1992 - Find All Groups of Farmland (Medium)",l={unversionedId:"1900-1999/find-all-groups-of-farmland-medium",id:"1900-1999/find-all-groups-of-farmland-medium",title:"1992 - Find All Groups of Farmland (Medium)",description:"Author: @dhanu084 | https://leetcode.com/problems/find-all-groups-of-farmland/",source:"@site/solutions/1900-1999/1992-find-all-groups-of-farmland-medium.md",sourceDirName:"1900-1999",slug:"/1900-1999/find-all-groups-of-farmland-medium",permalink:"/solutions/1900-1999/find-all-groups-of-farmland-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1900-1999/1992-find-all-groups-of-farmland-medium.md",tags:[{label:"Graphs",permalink:"/solutions/tags/graphs"},{label:"DFS",permalink:"/solutions/tags/dfs"}],version:"current",sidebarPosition:1992,frontMatter:{description:"Author: @dhanu084 | https://leetcode.com/problems/find-all-groups-of-farmland/",tags:["Graphs","DFS"]},sidebar:"tutorialSidebar",previous:{title:"1980 - Find Unique Binary String (Medium)",permalink:"/solutions/1900-1999/find-unique-binary-string-medium"},next:{title:"1996 - The Number of Weak Characters in the Game (Medium)",permalink:"/solutions/1900-1999/the-number-of-weak-characters-in-the-game-medium"}},i={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}],c=function(a){return function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)}},u=c("Tabs"),f=c("TabItem"),h=c("SolutionAuthor"),N={toc:d};function k(a){var e=a.components,n=(0,r.Z)(a,m);return(0,s.kt)("wrapper",(0,t.Z)({},N,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"1992---find-all-groups-of-farmland-medium"},"1992 - Find All Groups of Farmland (Medium)"),(0,s.kt)("h2",{id:"problem-link"},"Problem Link"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-all-groups-of-farmland/"},"https://leetcode.com/problems/find-all-groups-of-farmland/")),(0,s.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,s.kt)("p",null,"You are given a 0-indexed m x n binary matrix land where a 0 represents a hectare of forested land and a 1 represents a hectare of farmland."),(0,s.kt)("p",null,"To keep the land organized, there are designated rectangular areas of hectares that consist entirely of farmland. These rectangular areas are called groups. No two groups are adjacent, meaning farmland in one group is not four-directionally adjacent to another farmland in a different group."),(0,s.kt)("p",null,"land can be represented by a coordinate system where the top left corner of land is (0, 0) and the bottom right corner of land is (m-1, n-1). Find the coordinates of the top left and bottom right corner of each group of farmland. A group of farmland with a top left corner at (r1, c1) and a bottom right corner at (r2, c2) is represented by the 4-length array ","[r1, c1, r2, c2]","."),(0,s.kt)("p",null,"Return a 2D array containing the 4-length arrays described above for each group of farmland in land. If there are no groups of farmland, return an empty array. You may return the answer in any order."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 1:"),":\n",(0,s.kt)("a",{parentName:"p",href:"https://assets.leetcode.com/uploads/2021/07/27/screenshot-2021-07-27-at-12-23-15-copy-of-diagram-drawio-diagrams-net.png"})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: land = [[1,0,0],[0,1,1],[0,1,1]]\nOutput: [[0,0,0,0],[1,1,2,2]]\nExplanation:\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[0][0].\nThe second group has a top left corner at land[1][1] and a bottom right corner at land[2][2].\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 2:"),"\n[](Input: land = [","[1,0,0]",",","[0,1,1]",",","[0,1,1]","]\nOutput: [","[0,0,0,0]",",","[1,1,2,2]","]\nExplanation:\nThe first group has a top left corner at land","[0][0]"," and a bottom right corner at land","[0][0]",".\nThe second group has a top left corner at land","[1][1]"," and a bottom right corner at land","[2][2]",".)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: land = [[1,1],[1,1]]\nOutput: [[0,0,1,1]]\nExplanation:\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[1][1].\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 3:"),"\n",(0,s.kt)("a",{parentName:"p",href:"https://assets.leetcode.com/uploads/2021/07/27/screenshot-2021-07-27-at-12-32-24-copy-of-diagram-drawio-diagrams-net.png"})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Input: land = [[0]]\nOutput: []\nExplanation:\nThere are no groups of farmland.\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Constraints:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"m == land.length"),(0,s.kt)("li",{parentName:"ul"},"n == land","[i]",".length"),(0,s.kt)("li",{parentName:"ul"},"1 <= m, n <= 300"),(0,s.kt)("li",{parentName:"ul"},"land consists of only 0's and 1's."),(0,s.kt)("li",{parentName:"ul"},"Groups of farmland are rectangular in shape.")),(0,s.kt)("h2",{id:"approach-1-dfs"},"Approach 1: DFS"),(0,s.kt)("p",null,"Time Complexity: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2217"),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2217"),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mo",{parentName:"mrow"},"\u2217"),(0,s.kt)("mn",{parentName:"mrow"},"4"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n * m + n * m * 4)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4653em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4653em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"4"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,s.kt)("p",null,"Space Complexity: ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2217"),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n*m)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"m"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))," for visited set / array"),(0,s.kt)(u,{mdxType:"Tabs"},(0,s.kt)(f,{value:"py",label:"Python",mdxType:"TabItem"},(0,s.kt)(h,{name:"@dhanu084",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def findFarmland(self, land: List[List[int]]) -> List[List[int]]:\n\n        n, m = len(land), len(land[0])\n        visited = set()\n        res = []\n\n        def dfs(r, c , max_coords):\n\n            # if the row or col is out of bounds or already visited or is a forest just return\n            if r < 0 or c < 0 or r >= n or c >= m or (r, c) in visited or land[r][c] == 0:\n                return\n\n            # update the visited coordinates in the set\n            visited.add((r, c))\n            '''\n                update the ending coordinates in the array when ever\n                we find more connected farmlands and increase coordinates\n            '''\n            max_coords[0] = max(max_coords[0], r)\n            max_coords[1] = max(max_coords[1], c)\n\n            # traverse all 4 adjacent directions to find connected farmlands\n            for (del_row, del_col) in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n                dfs(del_row + r, del_col + c, max_coords)\n\n        for i in range(n):\n            for j in range(m):\n                # whenever we find a land, mark all its group as visited using dfs\n                if land[i][j] == 1 and (i, j) not in visited:\n                    # start is the array of indices where the farm land starts\n                    start = [i, j]\n                    '''\n                        end is the array of indices where the farm land ends\n                        It gets updated in the dfs call\n                    '''\n                    end = [-1, -1]\n                    dfs(i, j, end)\n                    # once we have our start and end corrdinates just concantenate and add it to results\n                    res.append(start + end)\n        return res\n\n")))))}k.isMDXComponent=!0}}]);