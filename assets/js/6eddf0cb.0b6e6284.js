"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[62573],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(n),h=a,m=p["".concat(s,".").concat(h)]||p[h]||c[h]||o;return n?r.createElement(m,l(l({ref:t},d),{},{components:n})):r.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},83699:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>v,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @dhanu084, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/validate-binary-search-tree/"},l="0098 - Validate Binary Search Tree (Medium)",i={unversionedId:"0000-0099/validate-binary-search-tree-medium",id:"0000-0099/validate-binary-search-tree-medium",title:"0098 - Validate Binary Search Tree (Medium)",description:"Author: @dhanu084, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/validate-binary-search-tree/",source:"@site/solutions/0000-0099/0098-validate-binary-search-tree-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/validate-binary-search-tree-medium",permalink:"/solutions/0000-0099/validate-binary-search-tree-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0098-validate-binary-search-tree-medium.md",tags:[],version:"current",sidebarPosition:98,frontMatter:{description:"Author: @dhanu084, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/validate-binary-search-tree/"},sidebar:"tutorialSidebar",previous:{title:"0097 - Interleaving String (Medium)",permalink:"/solutions/0000-0099/interleaving-string-medium"},next:{title:"0100 - 0199",permalink:"/solutions/category/0100---0199"}},s={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Preorder Traversal",id:"approach-1-preorder-traversal",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},p=d("Tabs"),c=d("TabItem"),h=d("SolutionAuthor"),m={toc:u},f="wrapper";function v(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0098---validate-binary-search-tree-medium"},"0098 - Validate Binary Search Tree (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/validate-binary-search-tree/"},"https://leetcode.com/problems/validate-binary-search-tree/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given the root of a binary tree, determine if it is a valid binary search tree (BST)."),(0,a.kt)("p",null,"A valid BST is defined as follows:"),(0,a.kt)("p",null,"The left\nsubtree\nof a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [2,1,3]\nOutput: true\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ","[1, 104]","."),(0,a.kt)("li",{parentName:"ul"},"-231 <= Node.val <= 231 - 1")),(0,a.kt)("h2",{id:"approach-1-preorder-traversal"},"Approach 1: Preorder Traversal"),(0,a.kt)("p",null,"Time Complexity: $$O(n)$$"),(0,a.kt)("p",null,"Space Complexity: $$O(n)$$ for recursive stack space"),(0,a.kt)(p,{mdxType:"Tabs"},(0,a.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(h,{name:"@dhanu084",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n\n        def validate(root, left, right):\n            if root is None:\n                return True\n            # Validate the condition for each subtree\n            if root.val <= left or root.val >= right:\n                return False\n            # all subtrees left of root should be less than right so pass root.val as right\n            left = validate(root.left, left, root.val)\n            # all subtrees right of root should be greater than right so pass root.val as left\n            right = validate(root.right, root.val, right)\n            # only if left and right subtrees are valid return true\n            return left and right\n        # pass -inf as the left minimum and inf as right maximum initially\n        return validate(root, -inf, inf)\n"))),(0,a.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(h,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        if (root == null) return true;\n        return checkBST(root, null, null);\n    }\n    \n    public boolean checkBST(TreeNode root, Integer min, Integer max) {\n        if (root == null) return true;\n        // Check the node value with it's parent\n        // If node is left, then value should be less than or equal to it's parent\n        // If node is right, then value should be greater than or equal to it's parent\n        if ((min != null && root.val <= min) || (max != null && root.val >= max)) {\n            return false;\n        }\n        return checkBST(root.left, min, root.val) && checkBST(root.right, root.val, max);\n    }\n}\n"))),(0,a.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool valid(TreeNode* node, long left, long right) {\n        if (!node) {\n            return true;\n        }\n        if (!(node->val > left && node->val < right)) {\n            return false;\n        }\n        return (valid(node->left, left, node->val) && \n                valid(node->right, node->val, right));\n    }\n\n    bool isValidBST(TreeNode* root) {\n        return valid(root, LONG_MIN, LONG_MAX);\n    }\n};\n"))),(0,a.kt)(c,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)(h,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function(root) {\n    function valid(node, left, right) {\n        if (!node) {\n            return true;\n        }\n        if (!(node.val > left && node.val < right)) {\n            return false;\n        }\n        return (valid(node.left, left, node.val) && \n                valid(node.right, node.val, right));\n    }\n    return valid(root, parseFloat(-Infinity), parseFloat(Infinity));\n};\n")))))}v.isMDXComponent=!0}}]);