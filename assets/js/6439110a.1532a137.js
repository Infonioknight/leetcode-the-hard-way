"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[85094],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=m(t),d=i,h=u["".concat(l,".").concat(d)]||u[d]||c[d]||r;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var m=2;m<r;m++)o[m]=t[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4276:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>k,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=t(87462),i=(t(67294),t(3905));const r={description:"Author: @wingkwong | https://leetcode.com/problems/minimum-genetic-mutation/",tags:["Hash Table","String","Breadth-First Search"]},o="0433 - Minimum Genetic Mutation (Medium)",s={unversionedId:"0400-0499/minimum-genetic-mutation-medium",id:"0400-0499/minimum-genetic-mutation-medium",title:"0433 - Minimum Genetic Mutation (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/minimum-genetic-mutation/",source:"@site/solutions/0400-0499/0433-minimum-genetic-mutation-medium.md",sourceDirName:"0400-0499",slug:"/0400-0499/minimum-genetic-mutation-medium",permalink:"/solutions/0400-0499/minimum-genetic-mutation-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0433-minimum-genetic-mutation-medium.md",tags:[{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"String",permalink:"/solutions/tags/string"},{label:"Breadth-First Search",permalink:"/solutions/tags/breadth-first-search"}],version:"current",sidebarPosition:433,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/minimum-genetic-mutation/",tags:["Hash Table","String","Breadth-First Search"]},sidebar:"tutorialSidebar",previous:{title:"0429 - N-ary Tree Level Order Traversal (Medium)",permalink:"/solutions/0400-0499/n-ary-tree-level-order-traversal-medium"},next:{title:"0435 - Non-overlapping Intervals (Medium)",permalink:"/solutions/0400-0499/non-overlapping-intervals-medium"}},l={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: BFS",id:"approach-1-bfs",level:2}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},u=p("Tabs"),c=p("TabItem"),d=p("SolutionAuthor"),h={toc:m},g="wrapper";function k(e){let{components:n,...t}=e;return(0,i.kt)(g,(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0433---minimum-genetic-mutation-medium"},"0433 - Minimum Genetic Mutation (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-genetic-mutation/"},"https://leetcode.com/problems/minimum-genetic-mutation/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"A gene string can be represented by an 8-character long string, with choices from ",(0,i.kt)("inlineCode",{parentName:"p"},"'A'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'C'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'G'"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"'T'"),"."),(0,i.kt)("p",null,"Suppose we need to investigate a mutation from a gene string ",(0,i.kt)("inlineCode",{parentName:"p"},"start")," to a gene string ",(0,i.kt)("inlineCode",{parentName:"p"},"end")," where one mutation is defined as one single character changed in the gene string."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example, ",(0,i.kt)("inlineCode",{parentName:"li"},'"AACCGGTT" --\x3e "AACCGGTA"')," is one mutation.")),(0,i.kt)("p",null,"There is also a gene bank ",(0,i.kt)("inlineCode",{parentName:"p"},"bank")," that records all the valid gene mutations. A gene must be in ",(0,i.kt)("inlineCode",{parentName:"p"},"bank")," to make it a valid gene string."),(0,i.kt)("p",null,"Given the two gene strings ",(0,i.kt)("inlineCode",{parentName:"p"},"start")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"end")," and the gene bank ",(0,i.kt)("inlineCode",{parentName:"p"},"bank"),", return ",(0,i.kt)("em",{parentName:"p"},"the minimum number of mutations needed to mutate from"),(0,i.kt)("inlineCode",{parentName:"p"},"start"),(0,i.kt)("em",{parentName:"p"},"to"),(0,i.kt)("inlineCode",{parentName:"p"},"end"),". If there is no such a mutation, return ",(0,i.kt)("inlineCode",{parentName:"p"},"-1"),"."),(0,i.kt)("p",null,"Note that the starting point is assumed to be valid, so it might not be included in the bank."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: start = "AACCGGTT", end = "AACCGGTA", bank = ["AACCGGTA"]\nOutput: 1\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: start = "AACCGGTT", end = "AAACGGTA", bank = ["AACCGGTA","AACCGCTA","AAACGGTA"]\nOutput: 2\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: start = "AAAAACCC", end = "AACCCCCC", bank = ["AAAACCCC","AAACCCCC","AACCCCCC"]\nOutput: 3\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"start.length == 8")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"end.length == 8")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= bank.length <= 10")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bank[i].length == 8")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"start"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"end"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"bank[i]")," consist of only the characters ",(0,i.kt)("inlineCode",{parentName:"li"},"['A', 'C', 'G', 'T']"),".")),(0,i.kt)("h2",{id:"approach-1-bfs"},"Approach 1: BFS"),(0,i.kt)(u,{mdxType:"Tabs"},(0,i.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    // Intuition: we can see each string as a node and we can connect them if \n    // 1. there is only one single character different\n    // 2. the target node is available in `bank`\n    // the problem is now to find the shortest path from the starting point to the ending point\n    // so we can use BFS\n    int minMutation(string start, string end, vector<string>& bank) {\n        // a queue to store each gene string (node)\n        queue<string> q;\n        // a hash map to store if we\'ve visited a node\n        unordered_map<string, int> vis;\n        // distance\n        int steps = 0;\n        // we start from gene string `start` as a starting point\n        // push it to the queue\n        q.push(start);\n        // and mark it visited\n        vis[start] = 1;\n        // BFS\n        while (!q.empty()) {\n            // iterate from the back because the size of q varies\n            // which would result in wrong answer if you iterate from 0\n            // alternatively, you can define a new variable for q.size() before the for-loop\n            // i.e. \n            // int n = q.size();\n            // for (int i = 0; i < n; i++) { \n            for (int i = q.size(); i > 0; i--) {\n                // get the gene string from the queue\n                string s = q.front();\n                q.pop();\n                // if it is same as `end`, that means we found the answer\n                if (s == end) return steps;\n                // otherwise, given a gene string with 8-character long\n                // we can replace each character with "A", "C", "G" and "T" (i.e. mutate)\n                for (int j = 0; j < 8; j++) {\n                    // s[j] will be modified later, \n                    // hence store the original character here\n                    char oc = s[j];\n                    // iterate ACGT\n                    // alternatively, you can use `for (char c : "ACGT") { ... }`\n                    for (int k = 0; k < 4; k++) {\n                        // replace the j-th character in s with the k-th character in ACGT\n                        s[j] = "ACGT"[k];\n                        // we can reach the next node if the next node hasn\'t been visited\n                        // and the next node is available in `bank`\n                        if (!vis[s] && find(bank.begin(), bank.end(), s) != bank.end()) {\n                            // push the next node to the queue\n                            q.push(s);\n                            // and mark it visited\n                            vis[s] = 1;\n                        }\n                    }\n                    // since we updated the character, we revert it back\n                    s[j] = oc;\n                }\n            }\n            // increase the step count\n            steps += 1;\n        }\n        // not able to reach `end`, return -1 here\n        return -1;\n    }\n};\n'))),(0,i.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'class Solution {\n    // Intuition: we can see each string as a node and we can connect them if \n    // 1. there is only one single character different\n    // 2. the target node is available in `bank`\n    // the problem is now to find the shortest path from the starting point to the ending point\n    // so we can use BFS\n    public int minMutation(String start, String end, String[] bank) {\n        // a queue to store each gene string (node)\n        Queue<String> q = new LinkedList<>();\n        // a hash set to store if we\'ve visited a node\n        HashSet<String> vis = new HashSet<String>();\n        // convert bank to List\n        List<String> banks = Arrays.asList(bank);\n        // distance\n        int steps = 0;\n        // we start from gene string `start` as a starting point\n        // push it to the queue\n        q.add(start);\n        // and mark it visited\n        vis.add(start);\n        // BFS\n        while (!q.isEmpty()) {\n            // iterate from the back because the size of q varies\n            // which would result in wrong answer if you iterate from 0\n            // alternatively, you can define a new variable for q.size() before the for-loop\n            // i.e. \n            // int n = q.size();\n            // for (int i = 0; i < n; i++) { \n            for (int i = q.size(); i > 0; i--) {\n                // get the gene string from the queue\n                String s = q.poll();\n                // if it is same as `end`, that means we found the answer\n                if (s.equals(end)) return steps;\n                // otherwise, given a gene string with 8-character long\n                // we can replace each character with "A", "C", "G" and "T"\n                char[] ca = s.toCharArray();\n                for (int j = 0; j < 8; j++) {\n                    // s[j] will be modified later, \n                    // hence store the original character here\n                    char oc = ca[j];\n                    // iterate ACGT\n                    // alternatively, you can use `for (char c : "ACGT") { ... }`\n                    for (int k = 0; k < 4; k++) {\n                        // replace the j-th character in s with the k-th character in ACGT\n                        ca[j] = "ACGT".charAt(k);\n                        // we can reach the next node if the next node hasn\'t been visited\n                        // and the next node is available in `bank`\n                        String t = new String(ca);\n                        if (!vis.contains(t) && banks.contains(t)) {\n                            // push the next node to the queue\n                            q.add(t);\n                            // and mark it visited\n                            vis.add(t);\n                        }\n                    }\n                    // since we updated the character, we revert it back\n                    ca[j] = oc;\n                }\n            }\n            // increase the step count\n            steps += 1;\n        }\n        // not able to reach `end`, return -1 here\n        return -1;\n    }\n}\n')))))}k.isMDXComponent=!0}}]);