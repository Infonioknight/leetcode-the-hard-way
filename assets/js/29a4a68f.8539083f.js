"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[9351],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),h=r,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||a;return n?i.createElement(m,o(o({ref:t},p),{},{components:n})):i.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},30435:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var i=n(87462),r=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/buildings-with-an-ocean-view/"},o="1762 - Buildings With an Ocean View (Medium)",l={unversionedId:"1700-1799/buildings-with-an-ocean-view-medium",id:"1700-1799/buildings-with-an-ocean-view-medium",title:"1762 - Buildings With an Ocean View (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/buildings-with-an-ocean-view/",source:"@site/solutions/1700-1799/1762-buildings-with-an-ocean-view-medium.md",sourceDirName:"1700-1799",slug:"/1700-1799/buildings-with-an-ocean-view-medium",permalink:"/solutions/1700-1799/buildings-with-an-ocean-view-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1700-1799/1762-buildings-with-an-ocean-view-medium.md",tags:[],version:"current",sidebarPosition:1762,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/buildings-with-an-ocean-view/"},sidebar:"tutorialSidebar",previous:{title:"1751 - Maximum Number of Events That Can Be Attended II (Hard)",permalink:"/solutions/1700-1799/maximum-number-of-events-that-can-be-attended-ii-hard"},next:{title:"1768 - Merge Strings Alternately (Easy)",permalink:"/solutions/1700-1799/merge-strings-alternately-easy"}},s={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Backwards",id:"approach-1-backwards",level:2}],p=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var c;const d={toc:u},h="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1762---buildings-with-an-ocean-view-medium"},"1762 - Buildings With an Ocean View (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/buildings-with-an-ocean-view/"},"https://leetcode.com/problems/buildings-with-an-ocean-view/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"There are ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," buildings in a line. You are given an integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"heights")," of size ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," that represents the heights of the buildings in the line."),(0,r.kt)("p",null,"The ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a ",(0,r.kt)("strong",{parentName:"p"},"smaller")," height."),(0,r.kt)("p",null,"Return a list of indices ",(0,r.kt)("strong",{parentName:"p"},"(0-indexed)")," of buildings that have an ocean view, sorted in increasing order."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: heights = [4,2,3,1]\nOutput: [0,2,3]\nExplanation: Building 1 (0-indexed) does not have an ocean view because building 2 is taller.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: heights = [4,3,2,1]\nOutput: [0,1,2,3]\nExplanation: All the buildings have an ocean view.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: heights = [1,3,2,4]\nOutput: [3]\nExplanation: Only building 3 has an ocean view.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= heights.length <= 10^5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= heights[i] <= 10^9"))),(0,r.kt)("h2",{id:"approach-1-backwards"},"Approach 1: Backwards"),(0,r.kt)("p",null,"We iterate $$heights$$ from right to left and track the maximum height. If the current building is taller than the maximum height, it means it has an ocean view and we can set it as the new max height."),(0,r.kt)("p",null,"Since we do it backwards, we reverse the answer at the end."),(0,r.kt)(p,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> findBuildings(vector<int>& heights) {\n        int n = heights.size(), prev_mx = -1;\n        vector<int> ans;\n        // do it backwards\n        for (int i = n - 1; i >= 0; i--) {\n            // check if the current building is taller than the prev max\n            if (heights[i] > prev_mx) {\n                // if so, then this buildign has an ocean view\n                ans.push_back(i);\n                // update prev_mx\n                prev_mx = heights[i];\n            }\n        }\n        // reverse the order\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n")))}m.isMDXComponent=!0}}]);