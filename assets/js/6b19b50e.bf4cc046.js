"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[716],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return c}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=p(n),c=a,f=d["".concat(s,".").concat(c)]||d[c]||u[c]||o;return n?r.createElement(f,l(l({ref:t},m),{},{components:n})):r.createElement(f,l({ref:t},m))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},60826:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return y},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),l=["components"],i={description:"Author: @wingkwong | https://leetcode.com/problems/walls-and-gates/",tags:["Array","Breadth-First Search","Matrix"]},s="0286 - Walls and Gates (Medium)",p={unversionedId:"0200-0299/walls-and-gates-medium",id:"0200-0299/walls-and-gates-medium",title:"0286 - Walls and Gates (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/walls-and-gates/",source:"@site/solutions/0200-0299/0286-walls-and-gates-medium.md",sourceDirName:"0200-0299",slug:"/0200-0299/walls-and-gates-medium",permalink:"/solutions/0200-0299/walls-and-gates-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0286-walls-and-gates-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Breadth-First Search",permalink:"/solutions/tags/breadth-first-search"},{label:"Matrix",permalink:"/solutions/tags/matrix"}],version:"current",sidebarPosition:286,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/walls-and-gates/",tags:["Array","Breadth-First Search","Matrix"]},sidebar:"tutorialSidebar",previous:{title:"0283 - Move Zeroes (Easy)",permalink:"/solutions/0200-0299/move-zeroes-easy"},next:{title:"0287 - Find the Duplicate Number (Medium)",permalink:"/solutions/0200-0299/find-the-duplicate-number-medium"}},m={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Multi-Source BFS",id:"approach-1-multi-source-bfs",level:2}],d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},c=d("Tabs"),f=d("TabItem"),h=d("SolutionAuthor"),k={toc:u};function y(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0286---walls-and-gates-medium"},"0286 - Walls and Gates (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/walls-and-gates/"},"https://leetcode.com/problems/walls-and-gates/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given an ",(0,o.kt)("inlineCode",{parentName:"p"},"m x n")," grid ",(0,o.kt)("inlineCode",{parentName:"p"},"rooms"),"\xa0initialized with these three possible values."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-1"),"\xa0A wall or an obstacle."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0")," A gate."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"INF")," Infinity means an empty room. We use the value ",(0,o.kt)("inlineCode",{parentName:"li"},"231 - 1 = 2147483647")," to represent ",(0,o.kt)("inlineCode",{parentName:"li"},"INF")," as you may assume that the distance to a gate is less than ",(0,o.kt)("inlineCode",{parentName:"li"},"2147483647"),".")),(0,o.kt)("p",null,"Fill each empty room with the distance to ",(0,o.kt)("em",{parentName:"p"},"its nearest gate"),". If it is impossible to reach a gate, it should be filled with ",(0,o.kt)("inlineCode",{parentName:"p"},"INF"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]\nOutput: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: rooms = [[-1]]\nOutput: [[-1]]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"m == rooms.length")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"n == rooms[i].length")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 250")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"rooms[i][j]")," is ",(0,o.kt)("inlineCode",{parentName:"li"},"-1"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"0"),", or ",(0,o.kt)("inlineCode",{parentName:"li"},"231 - 1"),".")),(0,o.kt)("h2",{id:"approach-1-multi-source-bfs"},"Approach 1: Multi-Source BFS"),(0,o.kt)(c,{mdxType:"Tabs"},(0,o.kt)(f,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(h,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'class Solution:\n    def wallsAndGates(self, rooms: List[List[int]]) -> None:\n        """\n        Do not return anything, modify rooms in-place instead.\n        """\n        # Multi-source BFS\n        # We can see each gate as a source, then we start from each gate\n        # If the next room `rooms[next_x][next_y` is empty, \n        # we update the value rooms[x][y] + 1 and\n        # we push (next_x, next_y) to the queue\n        \n        n, m = len(rooms), len(rooms[0])\n        q = deque()\n        for i in range(n):\n            for j in range(m):\n                if rooms[i][j] == 0:\n                    q.append((i, j))\n        while q:\n            x, y = q.popleft()\n            for dx, dy in (0, 1), (1, 0), (0, -1), (-1, 0):\n                next_x, next_y = dx + x, dy + y\n                if 0 <= next_x < n and 0 <= next_y < m and rooms[next_x][next_y] == 2147483647:\n                    rooms[next_x][next_y] = rooms[x][y] + 1\n                    q.append((next_x, next_y))\n                    \n')))))}y.isMDXComponent=!0}}]);