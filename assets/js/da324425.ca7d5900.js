"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[18971],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),m=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=m(n),k=a,d=c["".concat(p,".").concat(k)]||c[k]||u[k]||i;return n?r.createElement(d,o(o({ref:t},l),{},{components:n})):r.createElement(d,o({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=k;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var m=2;m<i;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},74705:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var r=n(87462),a=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/kth-missing-positive-number/"},o="1539 - Kth Missing Positive Number (Easy)",s={unversionedId:"1500-1599/kth-missing-positive-number-easy",id:"1500-1599/kth-missing-positive-number-easy",title:"1539 - Kth Missing Positive Number (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/kth-missing-positive-number/",source:"@site/solutions/1500-1599/1539-kth-missing-positive-number-easy.md",sourceDirName:"1500-1599",slug:"/1500-1599/kth-missing-positive-number-easy",permalink:"/solutions/1500-1599/kth-missing-positive-number-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1500-1599/1539-kth-missing-positive-number-easy.md",tags:[],version:"current",sidebarPosition:1539,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/kth-missing-positive-number/"},sidebar:"tutorialSidebar",previous:{title:"1531 - String Compression II (Hard)",permalink:"/solutions/1500-1599/string-compression-ii-hard"},next:{title:"1547 - Minimum Cost to Cut a Stick (Hard)",permalink:"/solutions/1500-1599/minimum-cost-to-cut-a-stick-hard"}},p={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2}],l=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var c;const u={toc:m},k="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(k,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1539---kth-missing-positive-number-easy"},"1539 - Kth Missing Positive Number (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/kth-missing-positive-number/"},"https://leetcode.com/problems/kth-missing-positive-number/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an array ",(0,a.kt)("inlineCode",{parentName:"p"},"arr")," of positive integers sorted in a ",(0,a.kt)("strong",{parentName:"p"},"strictly increasing order"),", and an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Find the")," ",(0,a.kt)("inlineCode",{parentName:"p"},"kth")," ",(0,a.kt)("em",{parentName:"p"},"positive integer that is missing from this array.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: arr = [2,3,4,7,11], k = 5\nOutput: 9\nExplanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: arr = [1,2,3,4], k = 2\nOutput: 6\nExplanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= arr.length <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= arr[i] <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= k <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"arr[i] < arr[j]")," for ",(0,a.kt)("inlineCode",{parentName:"li"},"1 <= i < j <= arr.length"))),(0,a.kt)("h2",{id:"approach-1-brute-force"},"Approach 1: Brute Force"),(0,a.kt)("p",null,"Iterate each number to find out the ",(0,a.kt)("span",{parentName:"p",className:"math math-inline"},(0,a.kt)("span",{parentName:"span",className:"katex"},(0,a.kt)("span",{parentName:"span",className:"katex-mathml"},(0,a.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,a.kt)("semantics",{parentName:"math"},(0,a.kt)("mrow",{parentName:"semantics"},(0,a.kt)("mi",{parentName:"mrow"},"k")),(0,a.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"k")))),(0,a.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,a.kt)("span",{parentName:"span",className:"base"},(0,a.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,a.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k"))))),"-th missing number."),(0,a.kt)(l,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findKthPositive(vector<int>& arr, int k) {\n        int target = 1;\n        while (k > 0) {\n            // target is missing. decrease k by 1\n            if (find(arr.begin(), arr.end(), target) == arr.end()) k -= 1;\n            // find the ans\n            if (k == 0) break;\n            // check next number\n            target += 1;\n        }\n        return target;\n    }\n};\n")))}d.isMDXComponent=!0}}]);