"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[92045],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,g=c["".concat(l,".").concat(d)]||c[d]||u[d]||o;return a?n.createElement(g,i(i({ref:t},m),{},{components:a})):n.createElement(g,i({ref:t},m))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},33127:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={description:"Author: @wingkwong, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/valid-anagram/",tags:["Hash Map"]},i="0242 - Valid Anagram (Easy)",s={unversionedId:"0200-0299/valid-anagram-easy",id:"0200-0299/valid-anagram-easy",title:"0242 - Valid Anagram (Easy)",description:"Author: @wingkwong, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/valid-anagram/",source:"@site/solutions/0200-0299/0242-valid-anagram-easy.md",sourceDirName:"0200-0299",slug:"/0200-0299/valid-anagram-easy",permalink:"/solutions/0200-0299/valid-anagram-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0242-valid-anagram-easy.md",tags:[{label:"Hash Map",permalink:"/solutions/tags/hash-map"}],version:"current",sidebarPosition:242,frontMatter:{description:"Author: @wingkwong, @vigneshshiv, @radojicic23 | https://leetcode.com/problems/valid-anagram/",tags:["Hash Map"]},sidebar:"tutorialSidebar",previous:{title:"0239 - Sliding Window Maximum (Hard)",permalink:"/solutions/0200-0299/sliding-maximum-window-hard"},next:{title:"0246 - Strobogrammatic Number (Easy)",permalink:"/solutions/0200-0299/strobogrammatic-number-easy"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sort",id:"approach-1-sort",level:2},{value:"Approach 2: Hash Map",id:"approach-2-hash-map",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=m("Tabs"),u=m("TabItem"),d=m("SolutionAuthor"),g={toc:p},h="wrapper";function y(e){let{components:t,...a}=e;return(0,r.kt)(h,(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0242---valid-anagram-easy"},"0242 - Valid Anagram (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/valid-anagram/"},"https://leetcode.com/problems/valid-anagram/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given two strings ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"t"),", return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," ",(0,r.kt)("em",{parentName:"p"},"if")," ",(0,r.kt)("inlineCode",{parentName:"p"},"t")," ",(0,r.kt)("em",{parentName:"p"},"is an anagram of")," ",(0,r.kt)("inlineCode",{parentName:"p"},"s"),(0,r.kt)("em",{parentName:"p"},", and")," ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," ",(0,r.kt)("em",{parentName:"p"},"otherwise"),"."),(0,r.kt)("p",null,"An ",(0,r.kt)("strong",{parentName:"p"},"Anagram")," is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "anagram", t = "nagaram"\nOutput: true\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s = "rat", t = "car"\nOutput: false\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= s.length, t.length <= 5 * 10^4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"t")," consist of lowercase English letters.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Follow up:")," What if the inputs contain Unicode characters? How would you adapt your solution to such a case?"),(0,r.kt)("h2",{id:"approach-1-sort"},"Approach 1: Sort"),(0,r.kt)(c,{mdxType:"Tabs"},(0,r.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        // s and t are anagrams\n        // if they are same after being sorted\n        sort(begin(s), end(s));\n        sort(begin(t), end(t));\n        return s == t;\n    }\n};\n"))),(0,r.kt)(u,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(d,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean isAnagram(String s, String t) {\n        char[] s_chars = s.toCharArray();\n        char[] t_chars = t.toCharArray();\n        // Sorting with char array\n        Arrays.sort(s_chars);\n        Arrays.sort(t_chars);\n        // Convert to string\n        s = new String(s_chars);\n        t = new String(t_chars);\n        return s.equals(t);\n    }\n}\n"))),(0,r.kt)(u,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        # if they are same after sorting they are anagrams\n        return sorted(t) == sorted(s)\n"))),(0,r.kt)(u,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isAnagram = function(s, t) {\n    // sort strings \n    const sorted_s = s.split('').sort().join('');\n    const sorted_t = t.split('').sort().join('');\n    // if they are same after sorting they are anagrams\n    return sorted_s == sorted_t;\n};\n")))),(0,r.kt)("h2",{id:"approach-2-hash-map"},"Approach 2: Hash Map"),(0,r.kt)(c,{mdxType:"Tabs"},(0,r.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        // if s and t are anagram, \n        // then the frequency of each number would be same\n        int cnt[26] = {0};\n        for (auto x : s) cnt[x - 'a']++;\n        for (auto x : t) cnt[x - 'a']--;\n        for (int i = 0; i < 26; i++) {\n            if (cnt[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n"))),(0,r.kt)(u,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(d,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public boolean isAnagram(String s, String t) {\n        int[] chars = new int[26];\n        for (char c : s.toCharArray()) {\n            chars[c - 'a']++;\n        }\n        for (char c : t.toCharArray()) {\n            chars[c - 'a']--;\n            // If any char is occurred more than \"s string\" char, then immediately return false. \n            if (chars[c - 'a'] < 0) return false;\n        }\n        for (int num : chars) {\n            if (num != 0) return false;\n        }\n        return true;\n    }\n}\n")))))}y.isMDXComponent=!0}}]);