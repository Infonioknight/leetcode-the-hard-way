"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[94107],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return c}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),d=u(t),c=a,h=d["".concat(l,".").concat(c)]||d[c]||s[c]||i;return t?r.createElement(h,o(o({ref:n},p),{},{components:t})):r.createElement(h,o({ref:n},p))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var m={};for(var l in n)hasOwnProperty.call(n,l)&&(m[l]=n[l]);m.originalType=e,m.mdxType="string"==typeof e?e:a,o[1]=m;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},36930:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return k},frontMatter:function(){return m},metadata:function(){return u},toc:function(){return s}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],m={description:"Author: @wingkwong | https://leetcode.com/problems/jump-game-ii/",tags:["Array","Dynamic Programming","Greedy"]},l="0045 - Jump Game II (Medium)",u={unversionedId:"0000-0099/jump-game-ii-medium",id:"0000-0099/jump-game-ii-medium",title:"0045 - Jump Game II (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/jump-game-ii/",source:"@site/solutions/0000-0099/0045-jump-game-ii-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/jump-game-ii-medium",permalink:"/solutions/0000-0099/jump-game-ii-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0045-jump-game-ii-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Greedy",permalink:"/solutions/tags/greedy"}],version:"current",sidebarPosition:45,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/jump-game-ii/",tags:["Array","Dynamic Programming","Greedy"]},sidebar:"tutorialSidebar",previous:{title:"0042 - Trapping Rain Water (Hard)",permalink:"/solutions/0000-0099/trapping-rain-water-hard"},next:{title:"0046 - Permutations (Medium)",permalink:"/solutions/0000-0099/permutations-medium"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: BFS",id:"approach-1-bfs",level:2}],d=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},c=d("Tabs"),h=d("TabItem"),f=d("SolutionAuthor"),g={toc:s};function k(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0045---jump-game-ii-medium"},"0045 - Jump Game II (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/jump-game-ii/"},"https://leetcode.com/problems/jump-game-ii/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given a ",(0,i.kt)("strong",{parentName:"p"},"0-indexed")," array of integers ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," of length ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),". You are initially positioned at ",(0,i.kt)("inlineCode",{parentName:"p"},"nums[0]"),"."),(0,i.kt)("p",null,"Each element ",(0,i.kt)("inlineCode",{parentName:"p"},"nums[i]")," represents the maximum length of a forward jump from index ",(0,i.kt)("inlineCode",{parentName:"p"},"i"),". In other words, if you are at ",(0,i.kt)("inlineCode",{parentName:"p"},"nums[i]"),", you can jump to any ",(0,i.kt)("inlineCode",{parentName:"p"},"nums[i + j]")," where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= j <= nums[i]")," and"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"i + j < n"))),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the minimum number of jumps to reach"),(0,i.kt)("inlineCode",{parentName:"p"},"nums[n - 1]"),". The test cases are generated such that you can reach ",(0,i.kt)("inlineCode",{parentName:"p"},"nums[n - 1]"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [2,3,0,1,4]\nOutput: 2\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 10^4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= nums[i] <= 1000"))),(0,i.kt)("h2",{id:"approach-1-bfs"},"Approach 1: BFS"),(0,i.kt)(c,{mdxType:"Tabs"},(0,i.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"// intuition:\n// we can image the input as graph.\n// in example 1, starting from the root, we can reach the 2nd node and 3rd node\n// from the 2nd node, we can reach 3rd, 4th, and 5th\n// from the 3rd node, we can reach 4th\n// from the 4th node, we can reach 5th\n// from the 5th node, it is the desination, we don't need to jump\n// here we can put those on different level, i.e.\n// lv1: 2 \n// lv2: 1 3\n// lv3: 1 4\n// each level can be reachable from the previous level starting from 2nd level\n// each level contains the possible length of jump\n// the minimum number of jumps is the jump required to make from level 1\n\nclass Solution {\npublic:\n    int jump(vector<int>& nums) {\n        // cur_end: the ending index of the current level\n        // nxt_end: the ending index of the next level\n        int n = nums.size(), cur_end = 0, nxt_end = 0, steps = 0;\n        for (int i = 0; i < n; i++) {\n            // if the current index is out of the current level, \n            // we add 1 step because we are going to the next level\n            if (i > cur_end) steps += 1, cur_end = nxt_end;\n            // update nxt_end - take the max index\n            nxt_end = max(nxt_end, i + nums[i]);\n        }\n        return steps;\n    }\n};\n"))),(0,i.kt)(h,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# intuition:\n# we can image the input as graph.\n# in example 1, starting from the root, we can reach the 2nd node and 3rd node\n# from the 2nd node, we can reach 3rd, 4th, and 5th\n# from the 3rd node, we can reach 4th\n# from the 4th node, we can reach 5th\n# from the 5th node, it is the desination, we don't need to jump\n# here we can put those on different level, i.e.\n# lv1: 2 \n# lv2: 1 3\n# lv3: 1 4\n# each level can be reachable from the previous level starting from 2nd level\n# each level contains the possible length of jump\n# the minimum number of jumps is the jump required to make from level 1\n\n\nclass Solution:\n    def jump(self, nums: List[int]) -> int:\n        n = len(nums)\n        # cur_end: the ending index of the current level\n        # nxt_end: the ending index of the next level\n        cur_end, nxt_end = 0, 0\n        steps = 0\n        for i in range(n):\n            # if the current index is out of the current level, \n            # we add 1 step because we are going to the next level\n            if i > cur_end:\n                steps += 1\n                cur_end = nxt_end\n            # update nxt_end - take the max index\n            nxt_end = max(nxt_end, i + nums[i])\n        return steps\n")))))}k.isMDXComponent=!0}}]);