"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[77750],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(t),d=o,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||a;return t?r.createElement(h,i(i({ref:n},p),{},{components:t})):r.createElement(h,i({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},71438:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=t(87462),o=(t(67294),t(3905));const a={description:"Author: @ganajayant, @RadhikaChhabra17, @radojicic23 | https://leetcode.com/problems/sort-colors/",tags:["Array","Two Pointers","Sorting"]},i="0075 - Sort Colors (Medium)",l={unversionedId:"0000-0099/sort-colors-medium",id:"0000-0099/sort-colors-medium",title:"0075 - Sort Colors (Medium)",description:"Author: @ganajayant, @RadhikaChhabra17, @radojicic23 | https://leetcode.com/problems/sort-colors/",source:"@site/solutions/0000-0099/0075-sort-colors-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/sort-colors-medium",permalink:"/solutions/0000-0099/sort-colors-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0075-sort-colors-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Two Pointers",permalink:"/solutions/tags/two-pointers"},{label:"Sorting",permalink:"/solutions/tags/sorting"}],version:"current",sidebarPosition:75,frontMatter:{description:"Author: @ganajayant, @RadhikaChhabra17, @radojicic23 | https://leetcode.com/problems/sort-colors/",tags:["Array","Two Pointers","Sorting"]},sidebar:"tutorialSidebar",previous:{title:"0074 - Search a 2D Matrix (Medium)",permalink:"/solutions/0000-0099/search-a-2d-matrix-medium"},next:{title:"0076 - Minimum Window Substring (Hard)",permalink:"/solutions/0000-0099/minimum-window-substring-hard"}},s={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Counting",id:"approach-1-counting",level:2},{value:"Approach 2: Bubble Sort",id:"approach-2-bubble-sort",level:2}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)},m=p("Tabs"),c=p("TabItem"),d=p("SolutionAuthor"),h={toc:u},b="wrapper";function f(e){let{components:n,...t}=e;return(0,o.kt)(b,(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0075---sort-colors-medium"},"0075 - Sort Colors (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sort-colors/"},"https://leetcode.com/problems/sort-colors/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue."),(0,o.kt)("p",null,"We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively."),(0,o.kt)("p",null,"You must solve this problem without using the library's sort function."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [2,0,1]\nOutput: [0,1,2]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"n == nums.length")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= n <= 300")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 100")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nums[i] is either 0, 1, or 2"))),(0,o.kt)("h2",{id:"approach-1-counting"},"Approach 1: Counting"),(0,o.kt)("p",null,"Count number of 0's 1's and 2's and add those numbers in array"),(0,o.kt)(m,{mdxType:"Tabs"},(0,o.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(d,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public void sortColors(int[] nums) {\n        int q[] = { 0, 0, 0 };\n        for (int i : nums) {\n            if (i == 0) {\n                q[0]++;\n            } else if (i == 1) {\n                q[1]++;\n            } else {\n                q[2]++;\n            }\n        }\n        for (int i = 0; i < q[0]; i++) {\n            nums[i] = 0;\n        }\n        for (int i = q[0]; i < q[0] + q[1]; i++) {\n            nums[i] = 1;\n        }\n        for (int i = q[1] + q[0]; i < q[0] + q[1] + q[2]; i++) {\n            nums[i] = 2;\n        }\n    }\n}\n")))),(0,o.kt)("h2",{id:"approach-2-bubble-sort"},"Approach 2: Bubble Sort"),(0,o.kt)("p",null,"We want all integers together. One way of doing this is sorting the array so that we will get all $0$ initially, then all $1$ and $2$. We can use bubble sort for sorting."),(0,o.kt)("p",null,"Time Complexity: $O(n ^ 2)$, where $n$ is the number of elements in array"),(0,o.kt)("p",null,"Space complexity: $O(1)$"),(0,o.kt)(m,{mdxType:"Tabs"},(0,o.kt)(c,{value:"c++",label:"C++",mdxType:"TabItem"},(0,o.kt)(d,{name:"@RadhikaChhabra17",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\n    void sortColors(vector<int>& nums) {\n        int n = nums.size();\n        bool check = true;\n        for (int i = 0; i < n - 1 && check; i++) {\n            check = false;\n            for (int j = 0; j < n - i - 1; j++) {\n                if (nums[j] > nums[j + 1]) {\n                    swap(nums[j], nums[j + 1]);\n                    check = true;\n                }\n            }\n        }\n    }\n};\n"))),(0,o.kt)(c,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar sortColors = function(nums) {\n    let swapped = false;\n    for (i = 0; i < nums.length - 1; i++) {\n        for (j = 0; j < nums.length - i - 1; j++) {\n            if (nums[j] > nums[j + 1]) {\n                swapped = true;\n                let tmp = nums[j];\n                nums[j] = nums[j + 1];\n                nums[j + 1] = tmp;\n            }\n        }\n        if (swapped === false) {\n            return;\n        }\n    }\n};\n"))),(0,o.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        """\n        Do not return anything, modify nums in-place instead.\n        """\n        swapped = False\n        for i in range(len(nums) - 1):\n            for j in range(len(nums) - i - 1):\n                if nums[j] > nums[j + 1]:\n                    swapped = True\n                    nums[j], nums[j + 1] = nums[j + 1], nums[j]\n            if not swapped:\n                return \n')))))}f.isMDXComponent=!0}}]);