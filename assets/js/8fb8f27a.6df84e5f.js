"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[94702],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,g=u["".concat(l,".").concat(d)]||u[d]||c[d]||s;return n?r.createElement(g,a(a({ref:t},m),{},{components:n})):r.createElement(g,a({ref:t},m))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:i,a[1]=o;for(var p=2;p<s;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},73229:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>k,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const s={description:"Author: @wingkwong, @vigneshshiv | https://leetcode.com/problems/greatest-common-divisor-of-strings/",tags:["Math","String"]},a="1071 - Greatest Common Divisor of Strings (Easy)",o={unversionedId:"1000-1099/greatest-common-divisor-of-strings-easy",id:"1000-1099/greatest-common-divisor-of-strings-easy",title:"1071 - Greatest Common Divisor of Strings (Easy)",description:"Author: @wingkwong, @vigneshshiv | https://leetcode.com/problems/greatest-common-divisor-of-strings/",source:"@site/solutions/1000-1099/1071-greatest-common-divisor-of-strings-easy.md",sourceDirName:"1000-1099",slug:"/1000-1099/greatest-common-divisor-of-strings-easy",permalink:"/solutions/1000-1099/greatest-common-divisor-of-strings-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1000-1099/1071-greatest-common-divisor-of-strings-easy.md",tags:[{label:"Math",permalink:"/solutions/tags/math"},{label:"String",permalink:"/solutions/tags/string"}],version:"current",sidebarPosition:1071,frontMatter:{description:"Author: @wingkwong, @vigneshshiv | https://leetcode.com/problems/greatest-common-divisor-of-strings/",tags:["Math","String"]},sidebar:"tutorialSidebar",previous:{title:"1066 - Campus Bikes II (Medium)",permalink:"/solutions/1000-1099/campus-bikes-ii-medium"},next:{title:"1100 - 1199",permalink:"/solutions/category/1100---1199"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Optimal Solution - String equals with GCD",id:"approach-1-optimal-solution---string-equals-with-gcd",level:2},{value:"Approach 2: Substring Division",id:"approach-2-substring-division",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},u=m("Tabs"),c=m("TabItem"),d=m("SolutionAuthor"),g={toc:p},h="wrapper";function k(e){let{components:t,...n}=e;return(0,i.kt)(h,(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"1071---greatest-common-divisor-of-strings-easy"},"1071 - Greatest Common Divisor of Strings (Easy)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/greatest-common-divisor-of-strings/"},"https://leetcode.com/problems/greatest-common-divisor-of-strings/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"For two strings ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),', we say "',(0,i.kt)("inlineCode",{parentName:"p"},"t")," divides ",(0,i.kt)("inlineCode",{parentName:"p"},"s"),'" if and only if ',(0,i.kt)("inlineCode",{parentName:"p"},"s = t + ... + t")," (i.e., ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," is concatenated with itself one or more times)."),(0,i.kt)("p",null,"Given two strings ",(0,i.kt)("inlineCode",{parentName:"p"},"str1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"str2"),", return ",(0,i.kt)("em",{parentName:"p"},"the largest string"),(0,i.kt)("inlineCode",{parentName:"p"},"x"),(0,i.kt)("em",{parentName:"p"},"such that"),(0,i.kt)("inlineCode",{parentName:"p"},"x"),(0,i.kt)("em",{parentName:"p"},"divides both"),(0,i.kt)("inlineCode",{parentName:"p"},"str1"),(0,i.kt)("em",{parentName:"p"},"and"),(0,i.kt)("inlineCode",{parentName:"p"},"str2"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: str1 = "ABCABC", str2 = "ABC"\nOutput: "ABC"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: str1 = "ABABAB", str2 = "ABAB"\nOutput: "AB"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: str1 = "LEET", str2 = "CODE"\nOutput: ""\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= str1.length, str2.length <= 1000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"str2")," consist of English uppercase letters.")),(0,i.kt)("h2",{id:"approach-1-optimal-solution---string-equals-with-gcd"},"Approach 1: Optimal Solution - String equals with GCD"),(0,i.kt)(u,{mdxType:"Tabs"},(0,i.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'class Solution:\n    def gcdOfStrings(self, str1: str, str2: str) -> str:\n        # if str1 + str2 == str2 + str1 is true, that means they have the same divisor\n        # see example 1: "ABCABC" + "ABC" = "ABC" + "ABCABC"\n        # if there is no such divisor, then return ""\n        # otherwise, we can use gcd to find the lengths\n        # the answer is either \n        # - str1[0 .. g] or \n        # - str2[0 .. g]\n        # where g is the gcd of their length\n        return "" if str1 + str2 != str2 + str1 else str1[:gcd(len(str1), len(str2))]\n'))),(0,i.kt)(c,{value:"java",label:"java",mdxType:"TabItem"},(0,i.kt)(d,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'class Solution {\n\n    /**\n     * m - Str1, n - str2\n     * \n     * Time complexity - O(m + n)\n     * Space complexity - O(1)\n     */\n    public String gcdOfStrings(String str1, String str2) {\n        if (!Objects.equals(str1 + str2, str2 + str1)) {\n            return "";\n        }\n        return str1.substring(0, gcd(str1.length(), str2.length()));\n    }\n\n    private int gcd(int a, int b) {\n        if (b == 0) return a;\n        return gcd(b, a % b);\n    }\n}\n')))),(0,i.kt)("h2",{id:"approach-2-substring-division"},"Approach 2: Substring Division"),(0,i.kt)("p",null,"As stated in the problem, ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," divides ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," which means length of ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," is either ",(0,i.kt)("inlineCode",{parentName:"p"},"equal")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"factor")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"s"),". "),(0,i.kt)("p",null,"First, iterate over the smallest string ",(0,i.kt)("inlineCode",{parentName:"p"},"min(t, s)"),", use the ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," to substring(0, index) and divide both ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," and\nif there's no reminder then apply factor (no. of times) with str1 and str2 to find string equals. "),(0,i.kt)(u,{mdxType:"Tabs"},(0,i.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(d,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'class Solution {\n\n    /**\n     * m - Str1, n - str2\n     * \n     * Time complexity - O(min(m, n) * (m + n))\n     * Space complexity - O(1)\n     */\n    public String gcdOfStrings(String str1, String str2) {\n        int str1Len = str1.length(), str2Len = str2.length();\n        // Check 1st char in both strings\n        if (str1.charAt(0) != str2.charAt(0)) {\n            return "";\n        }\n        // Function - Check both strings are factor by divisor substring length\n        Function<Integer, Boolean> isDivisor = len -> {\n            if (str1Len % len != 0 || str2Len % len != 0) {\n                return false;\n            }\n            int f1 = str1Len / len, f2 = str2Len / len;\n            String mini = str2.substring(0, len);\n            return Objects.equals(mini.repeat(f1), str1) && Objects.equals(mini.repeat(f2), str2);\n        };\n        for (int i = Math.min(str1Len, str2Len); i > 0; i--) {\n            if (isDivisor.apply(i)) {\n                return str1.substring(0, i);\n            }\n        }\n        return "";\n    }\n}\n')))))}k.isMDXComponent=!0}}]);