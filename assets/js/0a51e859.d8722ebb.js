"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[62882],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?i.createElement(f,a(a({ref:t},u),{},{components:n})):i.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},55308:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var i=n(87462),r=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/execution-of-all-suffix-instructions-staying-in-a-grid/"},a="2120 - Execution of All Suffix Instructions Staying in a Grid (Medium)",s={unversionedId:"2100-2199/execution-of-all-suffix-instructions-staying-in-a-grid-medium",id:"2100-2199/execution-of-all-suffix-instructions-staying-in-a-grid-medium",title:"2120 - Execution of All Suffix Instructions Staying in a Grid (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/execution-of-all-suffix-instructions-staying-in-a-grid/",source:"@site/solutions/2100-2199/2120-execution-of-all-suffix-instructions-staying-in-a-grid-medium.md",sourceDirName:"2100-2199",slug:"/2100-2199/execution-of-all-suffix-instructions-staying-in-a-grid-medium",permalink:"/solutions/2100-2199/execution-of-all-suffix-instructions-staying-in-a-grid-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2120-execution-of-all-suffix-instructions-staying-in-a-grid-medium.md",tags:[],version:"current",sidebarPosition:2120,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/execution-of-all-suffix-instructions-staying-in-a-grid/"},sidebar:"tutorialSidebar",previous:{title:"2119 - A Number After a Double Reversal (Easy)",permalink:"/solutions/2100-2199/a-number-after-a-double-reversal-easy"},next:{title:"2121 - Intervals Between Identical Elements (Medium)",permalink:"/solutions/2100-2199/intervals-between-identical-elements-medium"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Simulation",id:"approach-1-simulation",level:2},{value:"Approach 2: One Pass",id:"approach-2-one-pass",level:2}],u=(m="SolutionAuthor",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const c={toc:p},d="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2120---execution-of-all-suffix-instructions-staying-in-a-grid-medium"},"2120 - Execution of All Suffix Instructions Staying in a Grid (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/execution-of-all-suffix-instructions-staying-in-a-grid/"},"https://leetcode.com/problems/execution-of-all-suffix-instructions-staying-in-a-grid/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"There is an ",(0,r.kt)("inlineCode",{parentName:"p"},"n x n")," grid, with the top-left cell at ",(0,r.kt)("inlineCode",{parentName:"p"},"(0, 0)")," and the bottom-right cell at ",(0,r.kt)("inlineCode",{parentName:"p"},"(n - 1, n - 1)"),". You are given the integer ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," and an integer array ",(0,r.kt)("inlineCode",{parentName:"p"},"startPos")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"startPos = [startrow, startcol]")," indicates that a robot is initially at cell ",(0,r.kt)("inlineCode",{parentName:"p"},"(startrow, startcol)"),"."),(0,r.kt)("p",null,"You are also given a ",(0,r.kt)("strong",{parentName:"p"},"0-indexed")," string ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," of length ",(0,r.kt)("inlineCode",{parentName:"p"},"m")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"s[i]")," is the ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," instruction for the robot: ",(0,r.kt)("inlineCode",{parentName:"p"},"'L'")," (move left), ",(0,r.kt)("inlineCode",{parentName:"p"},"'R'")," (move right), ",(0,r.kt)("inlineCode",{parentName:"p"},"'U'")," (move up), and ",(0,r.kt)("inlineCode",{parentName:"p"},"'D'")," (move down)."),(0,r.kt)("p",null,"The robot can begin executing from any ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," instruction in ",(0,r.kt)("inlineCode",{parentName:"p"},"s"),". It executes the instructions one by one towards the end of ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," but it stops if either of these conditions is met:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The next instruction will move the robot off the grid."),(0,r.kt)("li",{parentName:"ul"},"There are no more instructions left to execute.")),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"an array")," ",(0,r.kt)("inlineCode",{parentName:"p"},"answer")," ",(0,r.kt)("em",{parentName:"p"},"of length")," ",(0,r.kt)("inlineCode",{parentName:"p"},"m")," ",(0,r.kt)("em",{parentName:"p"},"where")," ",(0,r.kt)("inlineCode",{parentName:"p"},"answer[i]")," ",(0,r.kt)("em",{parentName:"p"},"is ",(0,r.kt)("strong",{parentName:"em"},"the number of instructions")," the robot can execute if the robot ",(0,r.kt)("strong",{parentName:"em"},"begins executing from")," the")," ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," ",(0,r.kt)("em",{parentName:"p"},"instruction in")," ",(0,r.kt)("inlineCode",{parentName:"p"},"s"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/12/09/1.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: n = 3, startPos = [0,1], s = "RRDDLU"\nOutput: [1,5,4,3,1,0]\nExplanation: Starting from startPos and beginning execution from the ith instruction:\n- 0th: "RRDDLU". Only one instruction "R" can be executed before it moves off the grid.\n- 1st:  "RDDLU". All five instructions can be executed while it stays in the grid and ends at (1, 1).\n- 2nd:   "DDLU". All four instructions can be executed while it stays in the grid and ends at (1, 0).\n- 3rd:    "DLU". All three instructions can be executed while it stays in the grid and ends at (0, 0).\n- 4th:     "LU". Only one instruction "L" can be executed before it moves off the grid.\n- 5th:      "U". If moving up, it would move off the grid.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/12/09/2.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: n = 2, startPos = [1,1], s = "LURD"\nOutput: [4,1,0,0]\nExplanation:\n- 0th: "LURD".\n- 1st:  "URD".\n- 2nd:   "RD".\n- 3rd:    "D".\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/12/09/3.png",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: n = 1, startPos = [0,0], s = "LRUD"\nOutput: [0,0,0,0]\nExplanation: No matter which instruction the robot begins execution from, it would move off the grid.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"m == s.length")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= n, m <= 500")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"startPos.length == 2")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= startrow, startcol < n")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s")," consists of ",(0,r.kt)("inlineCode",{parentName:"li"},"'L'"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"'R'"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"'U'"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"'D'"),".")),(0,r.kt)("h2",{id:"approach-1-simulation"},"Approach 1: Simulation"),(0,r.kt)("p",null,"We can just simulate the whole process. For each $$i\u2212th$$instruction, we have max $$s.size()\u2212i$$steps assuming $$i$$ starts from $$0$$. We keep updating the position $$(x,y)$$and check if it is out of bound. If not, keep increasing $$cnt$$ by 1. If there is no further move we can make, we can break the loop and push the result $$cnt$$ to $$ans$$."),(0,r.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> executeInstructions(int n, vector<int>& startPos, string s) {\n        int m = s.size();\n        vector<int> ans;\n        for (int i = 0; i < m; i++) {\n            int x = startPos[0];\n            int y = startPos[1];\n            int cnt = 0;\n            for (int j = i; j < m; j++) {\n                if (s[j] == 'L') y--;\n                if (s[j] == 'R') y++;\n                if (s[j] == 'U') x--;\n                if (s[j] == 'D') x++;\n                if (0 <= x && x < n && 0 <= y && y < n) cnt++;\n                else break;\n            }\n            ans.push_back(cnt);\n        }\n        return ans;\n    }\n};\n")),(0,r.kt)("p",null,"Time Complexity: O(m ^ 2)"),(0,r.kt)("h2",{id:"approach-2-one-pass"},"Approach 2: One Pass"),(0,r.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> executeInstructions(int n, vector<int>& startPos, string s) {\n        int m = s.size(), h = m + n, v = m + n;\n        vector<int> hor((m + n) * 2, m), ver((m + n) * 2, m), ans(m);\n        for (int i = m - 1; i >= 0; i--) {\n            hor[h] = ver[v] = i;\n            if (s[i] == 'L') h++;\n            if (s[i] == 'R') h--;\n            if (s[i] == 'D') v--;\n            if (s[i] == 'U') v++;\n            ans[i] = min({\n                m, \n                hor[h - startPos[1] - 1], \n                hor[h - startPos[1] + n], \n                ver[v - startPos[0] - 1], \n                ver[v + startPos[0] * -1 + n]\n            }) - i;\n        }\n        return ans;\n    }    \n};\n")),(0,r.kt)("p",null,"Time Complexity: $O(m)$"))}f.isMDXComponent=!0}}]);