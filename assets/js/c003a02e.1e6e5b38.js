"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[11767],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},c=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(t),c=a,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return t?o.createElement(h,i(i({ref:n},d),{},{components:t})):o.createElement(h,i({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}c.displayName="MDXCreateElement"},60608:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>y,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=t(87462),a=(t(67294),t(3905));const r={description:"Author: @wingkwong | https://leetcode.com/problems/number-of-good-paths/",tags:["Array","Tree","Union Find","Graph"]},i="2421 - Number of Good Paths (Hard)",l={unversionedId:"2400-2499/number-of-good-paths-hard",id:"2400-2499/number-of-good-paths-hard",title:"2421 - Number of Good Paths (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/number-of-good-paths/",source:"@site/solutions/2400-2499/2421-number-of-good-paths-hard.md",sourceDirName:"2400-2499",slug:"/2400-2499/number-of-good-paths-hard",permalink:"/solutions/2400-2499/number-of-good-paths-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2421-number-of-good-paths-hard.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Tree",permalink:"/solutions/tags/tree"},{label:"Union Find",permalink:"/solutions/tags/union-find"},{label:"Graph",permalink:"/solutions/tags/graph"}],version:"current",sidebarPosition:2421,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/number-of-good-paths/",tags:["Array","Tree","Union Find","Graph"]},sidebar:"tutorialSidebar",previous:{title:"2420 - Find All Good Indices (Medium)",permalink:"/solutions/2400-2499/find-all-good-indices-medium"},next:{title:"2425 - Bitwise XOR of All Pairings (Medium)",permalink:"/solutions/2400-2499/bitwise-xor-of-all-pairs-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DSU",id:"approach-1-dsu",level:2}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},u=d("Tabs"),m=d("TabItem"),c=d("SolutionAuthor"),h={toc:p},g="wrapper";function y(e){let{components:n,...t}=e;return(0,a.kt)(g,(0,o.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2421---number-of-good-paths-hard"},"2421 - Number of Good Paths (Hard)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-good-paths/"},"https://leetcode.com/problems/number-of-good-paths/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"There is a tree (i.e. a connected, undirected graph with no cycles) consisting of ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," nodes numbered from ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"n - 1")," and exactly ",(0,a.kt)("inlineCode",{parentName:"p"},"n - 1")," edges."),(0,a.kt)("p",null,"You are given a ",(0,a.kt)("strong",{parentName:"p"},"0-indexed")," integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"vals")," of length ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"vals[i]")," denotes the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ith")," node. You are also given a 2D integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"edges")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"edges[i] = [ai, bi]")," denotes that there exists an ",(0,a.kt)("strong",{parentName:"p"},"undirected")," edge connecting nodes ",(0,a.kt)("inlineCode",{parentName:"p"},"ai")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"bi"),"."),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"good path")," is a simple path that satisfies the following conditions:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The starting node and the ending node have the ",(0,a.kt)("strong",{parentName:"li"},"same")," value."),(0,a.kt)("li",{parentName:"ol"},"All nodes between the starting node and the ending node have values ",(0,a.kt)("strong",{parentName:"li"},"less than or equal to")," the starting node (i.e. the starting node's value should be the maximum value along the path).")),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the number of distinct good paths"),"."),(0,a.kt)("p",null,"Note that a path and its reverse are counted as the ",(0,a.kt)("strong",{parentName:"p"},"same")," path. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"0 -> 1")," is considered to be the same as ",(0,a.kt)("inlineCode",{parentName:"p"},"1 -> 0"),". A single node is also considered as a valid path."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]\nOutput: 6\nExplanation: There are 5 good paths consisting of a single node.\nThere is 1 additional good path: 1 -> 0 -> 2 -> 4.\n(The reverse path 4 -> 2 -> 0 -> 1 is treated as the same as 1 -> 0 -> 2 -> 4.)\nNote that 0 -> 2 -> 3 is not a good path because vals[2] > vals[0].\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]\nOutput: 7\nExplanation: There are 5 good paths consisting of a single node.\nThere are 2 additional good paths: 0 -> 1 and 2 -> 3.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: vals = [1], edges = []\nOutput: 1\nExplanation: The tree consists of only one node, so there is one good path.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == vals.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 3 * 10^4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= vals[i] <= 105")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"edges.length == n - 1")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"edges[i].length == 2")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= ai, bi < n")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ai != bi")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"edges")," represents a valid tree.")),(0,a.kt)("h2",{id:"approach-1-dsu"},"Approach 1: DSU"),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    // dsu\n    vector<int> root;\n    int get(int x) {\n        return x == root[x] ? x : (root[x] = get(root[x]));\n    }\n    int numberOfGoodPaths(vector<int>& vals, vector<vector<int>>& edges) {\n        // each node is a good path\n        int n = vals.size(), ans = n;\n        vector<int> cnt(n, 1);\n        root.resize(n);\n        // each element is in its own group initially\n        for (int i = 0; i < n; i++) root[i] = i;\n        // sort by vals\n        sort(edges.begin(), edges.end(), [&](const vector<int>& x, const vector<int>& y) {\n           return max(vals[x[0]], vals[x[1]]) < max(vals[y[0]], vals[y[1]]);\n        });\n        // iterate each edge\n        for (auto e : edges) {\n            int x = e[0], y = e[1];\n            // get the root of x\n            x = get(x);\n            // get the root of y\n            y = get(y);\n            // if their vals are same, \n            if (vals[x] == vals[y]) {\n                // then there would be cnt[x] * cnt[y] good paths\n                ans += cnt[x] * cnt[y];\n                // unite them\n                root[x] = y;\n                // add the count of x to that of y\n                cnt[y] += cnt[x];\n            } else if (vals[x] > vals[y]) {\n                // unite them\n                root[y] = x;\n            } else {\n                // unite them\n                root[x] = y;\n            }\n        }\n        return ans;\n    }\n};\n\n// [3,2]\n// [1,2,3]\n\n// 3 - 1 - 2 - 3\n// 3 - 2 - 3\n// 3 - 2 - 1 - 3\n// 3 - 2 - 2 - 3\n// 3 - 2 - 1 - 2 - 3\n// 3 - 3\n// good paths += cnt[x] * cnt[y]\n"))),(0,a.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    // dsu\n    int[] root;\n    int[] cnt;\n    int get(int x) {\n        return x == root[x] ? x : (root[x] = get(root[x]));\n    }\n\n    public int numberOfGoodPaths(int[] vals, int[][] edges) {\n        // each node is a good path\n        int n = vals.length, ans = n;\n        cnt = new int[n];\n        root = new int[n];\n        // each element is in its own group initially\n        for (int i = 0; i < n; i++) {\n            root[i] = i;\n            cnt[i] = 1;\n        }\n        // sort by vals\n        List<int[]> edgesList = new ArrayList<>();\n        for(int i = 0; i < edges.length; i++) edgesList.add(edges[i]);\n        Collections.sort(edgesList, new Comparator<int[]>() {\n            public int compare(int[] x, int[] y) {\n                int a = Math.max(vals[x[0]], vals[x[1]]);\n                int b = Math.max(vals[y[0]], vals[y[1]]);\n                if(a < b) return -1;\n                else if(a > b) return 1;\n                else return 0;\n            }\n        });\n\n        // iterate each edge\n        for (int[] e : edgesList) {\n            int x = e[0], y = e[1];\n            // get the root of x\n            x = get(x);\n            // get the root of y\n            y = get(y);\n            // if their vals are same, \n            if (vals[x] == vals[y]) {\n                // then there would be cnt[x] * cnt[y] good paths\n                ans += cnt[x] * cnt[y];\n                // unite them\n                root[x] = y;\n                // add the count of x to that of y\n                cnt[y] += cnt[x];\n            } else if (vals[x] > vals[y]) {\n                // unite them\n                root[y] = x;\n            } else {\n                // unite them\n                root[x] = y;\n            }\n        }\n        return ans;\n    }\n}\n"))),(0,a.kt)(m,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def numberOfGoodPaths(self, vals: List[int], edges: List[List[int]]) -> int:\n        n = len(vals)\n        # each node is a good path\n        ans = n\n        # sort by vals\n        edges.sort(key=lambda x: max(vals[x[0]], vals[x[1]]))\n        \n        # dsu\n        cnt = [1] * n\n        root = [i for i in range(n)]\n        def get(x):\n            # recursively get the root element\n            if x == root[x]:\n                return x \n            else:\n                root[x] = get(root[x])\n                return root[x]\n        \n        # iterate each edge\n        for x, y in edges:\n            # get the root of x\n            x = get(x)\n            # get the root of y\n            y = get(y)\n            # if their vals are same\n            if vals[x] == vals[y]:\n                # then there would be cnt[x] * cnt[y] good paths\n                ans += cnt[x] * cnt[y]\n                # unite them\n                root[x] = y\n                # add the count of x to that of y\n                cnt[y] += cnt[x]\n            elif vals[x] > vals[y]:\n                # unite them\n                root[y] = x\n            else:\n                # unite them\n                root[x] = y\n        return ans\n\n"))),(0,a.kt)(m,{value:"rs",label:"Rust",mdxType:"TabItem"},(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rs"},"use std::cmp::max;\n\nimpl Solution {\n    pub fn number_of_good_paths(vals: Vec<i32>, edges: Vec<Vec<i32>>) -> i32 {\n        let n = vals.len();\n        // each node is a good path\n        let mut ans = n as i32;\n        let mut edges = edges;\n        // sort by vals\n        edges.sort_by(|x, y| max(vals[x[0] as usize], vals[x[1] as usize]).cmp(&max(vals[y[0] as usize], vals[y[1] as usize])));\n\n        // dsu\n        let mut cnt = vec![1; n];\n        // each element is in its own group initially\n        let mut root = (0 .. n).collect();\n        fn get(x: usize, root: &mut Vec<usize>) -> usize {\n            if x == root[x] {\n                return x;\n            }\n            return get(root[x], root);\n        }\n        // iterate each edge\n        for e in edges {\n            // get the root of x\n            let x = get(e[0] as usize, &mut root);\n            // get the root of y\n            let y = get(e[1] as usize, &mut root);\n            // if their vals are same, \n            if vals[x] == vals[y] {\n                // then there would be cnt[x] * cnt[y] good paths\n                ans += cnt[x] as i32 * cnt[y] as i32;\n                // unite them\n                root[x] = y;\n                // add the count of x to that of y\n                cnt[y] += cnt[x];\n            } else if vals[x] > vals[y] {\n                // unite them\n                root[y] = x;\n            } else {\n                // unite them\n                root[x] = y;\n            }\n        }\n        ans\n    }\n}\n")))))}y.isMDXComponent=!0}}]);