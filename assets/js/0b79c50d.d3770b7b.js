"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[45520],{3905:(e,a,n)=>{n.d(a,{Zo:()=>s,kt:()=>y});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function m(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=t.createContext({}),u=function(e){var a=t.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):m(m({},a),e)),n},s=function(e){var a=u(e.components);return t.createElement(o.Provider,{value:a},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,y=p["".concat(o,".").concat(d)]||p[d]||c[d]||l;return n?t.createElement(y,m(m({ref:a},s),{},{components:n})):t.createElement(y,m({ref:a},s))}));function y(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,m=new Array(l);m[0]=d;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i[p]="string"==typeof e?e:r,m[1]=i;for(var u=2;u<l;u++)m[u]=n[u];return t.createElement.apply(null,m)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3470:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>m,default:()=>y,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var t=n(87462),r=(n(67294),n(3905));const l={description:"Author: @wingkwong | https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/"},m="1491 - Average Salary Excluding the Minimum and Maximum Salary (Easy)",i={unversionedId:"1400-1499/average-salary-excluding-the-minimum-and-maximum-salary-easy",id:"1400-1499/average-salary-excluding-the-minimum-and-maximum-salary-easy",title:"1491 - Average Salary Excluding the Minimum and Maximum Salary (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/",source:"@site/solutions/1400-1499/1491-average-salary-excluding-the-minimum-and-maximum-salary-easy.md",sourceDirName:"1400-1499",slug:"/1400-1499/average-salary-excluding-the-minimum-and-maximum-salary-easy",permalink:"/solutions/1400-1499/average-salary-excluding-the-minimum-and-maximum-salary-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1400-1499/1491-average-salary-excluding-the-minimum-and-maximum-salary-easy.md",tags:[],version:"current",sidebarPosition:1491,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/"},sidebar:"tutorialSidebar",previous:{title:"1480 - Running Sum of 1d Array (Easy)",permalink:"/solutions/1400-1499/running-sum-of-1d-array-easy"},next:{title:"1494 - Parallel Courses II (Hard)",permalink:"/solutions/1400-1499/parallel-courses-ii-hard"}},o={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: One Pass",id:"approach-1-one-pass",level:2}],s=(p="SolutionAuthor",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var p;const c={toc:u},d="wrapper";function y(e){let{components:a,...n}=e;return(0,r.kt)(d,(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1491---average-salary-excluding-the-minimum-and-maximum-salary-easy"},"1491 - Average Salary Excluding the Minimum and Maximum Salary (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/"},"https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given an array of ",(0,r.kt)("strong",{parentName:"p"},"unique")," integers ",(0,r.kt)("inlineCode",{parentName:"p"},"salary")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"salary[i]")," is the salary of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," employee."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"the average salary of employees excluding the minimum and maximum salary"),". Answers within ",(0,r.kt)("inlineCode",{parentName:"p"},"10-5")," of the actual answer will be accepted."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: salary = [4000,3000,1000,2000]\nOutput: 2500.00000\nExplanation: Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: salary = [1000,2000,3000]\nOutput: 2000.00000\nExplanation: Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"3 <= salary.length <= 100")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1000 <= salary[i] <= 10^6")),(0,r.kt)("li",{parentName:"ul"},"All the integers of ",(0,r.kt)("inlineCode",{parentName:"li"},"salary")," are ",(0,r.kt)("strong",{parentName:"li"},"unique"),".")),(0,r.kt)("h2",{id:"approach-1-one-pass"},"Approach 1: One Pass"),(0,r.kt)("p",null,"We iterate $$salary$$ and calculate the total sum $$sum$$, the minimum value $$mi$$ and the maximum value $$mx$$. The average salary of employees excluding the minimum and maximum salary would be $$sum - mi - mx$$. Since we exclude two items, we just need to divide by $$len(salary) - 2$$."),(0,r.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func average(salary []int) float64 {\n    sum, n := 0, len(salary)\n    mi, mx := 100005, 0\n    for _, x := range salary {\n        // calculate the total sum\n        sum += x\n        // find the minimum value\n        if x < mi { mi = x }\n        // find the maximum value\n        if x > mx { mx = x }\n    }\n    // exclude mi & mx and get the avg \n    return float64(sum - mi - mx) / float64(n - 2)\n}\n")),(0,r.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use std::cmp;\n\nimpl Solution {\n    pub fn average(salary: Vec<i32>) -> f64 {\n        let mut sum = 0;\n        let mut mx = 0;\n        let mut mi = 100005;\n        let n = salary.len() as f64;\n        for x in salary {\n            sum += x;\n            mx = cmp::max(mx, x);\n            mi = cmp::min(mi, x);\n        }\n        return ((sum - mx - mi) as f64 / (n - 2.0)); \n    }\n}\n")))}y.isMDXComponent=!0}}]);