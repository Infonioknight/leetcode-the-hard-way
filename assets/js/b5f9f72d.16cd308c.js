"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[43092],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},81209:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],l={description:"Author: @ganajayant | https://leetcode.com/problems/binary-tree-right-side-view/"},s="0199 - Binary Tree Right Side View (Medium)",p={unversionedId:"0100-0199/binary-tree-right-side-view-medium",id:"0100-0199/binary-tree-right-side-view-medium",title:"0199 - Binary Tree Right Side View (Medium)",description:"Author: @ganajayant | https://leetcode.com/problems/binary-tree-right-side-view/",source:"@site/solutions/0100-0199/0199-binary-tree-right-side-view-medium.md",sourceDirName:"0100-0199",slug:"/0100-0199/binary-tree-right-side-view-medium",permalink:"/leetcode-the-hard-way/solutions/0100-0199/binary-tree-right-side-view-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0199-binary-tree-right-side-view-medium.md",tags:[],version:"current",sidebarPosition:199,frontMatter:{description:"Author: @ganajayant | https://leetcode.com/problems/binary-tree-right-side-view/"},sidebar:"tutorialSidebar",previous:{title:"0191 - Number of 1 Bits (Easy)",permalink:"/leetcode-the-hard-way/solutions/0100-0199/number-of-1-bits-easy"},next:{title:"0200 - 0299",permalink:"/leetcode-the-hard-way/solutions/category/0200---0299"}},u={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},m=c("Tabs"),h=c("TabItem"),f=c("SolutionAuthor"),v={toc:d};function g(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0199---binary-tree-right-side-view-medium"},"0199 - Binary Tree Right Side View (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-right-side-view/"},"https://leetcode.com/problems/binary-tree-right-side-view/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given the ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," of a binary tree, imagine yourself standing on the ",(0,o.kt)("strong",{parentName:"p"},"right side")," of it, return ",(0,o.kt)("em",{parentName:"p"},"the values of the nodes you can see ordered from top to bottom"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/02/14/tree.jpg",alt:null})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [1,2,3,null,5,null,4]\nOutput: [1,3,4]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [1,null,3]\nOutput: [1,3]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = []\nOutput: []\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ",(0,o.kt)("inlineCode",{parentName:"li"},"[0, 100]"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-100 <= Node.val <= 100"))),(0,o.kt)("h2",{id:"approach-1-dfs"},"Approach 1: DFS"),(0,o.kt)("p",null,"Maintain an ArrayList.\nTRAVERSAL -> ROOT ->RIGHT -> LEFT This is the way traversal is done in array so that rightmost node at i level is visited first.\nWhen at i level, check in array/vector, if there is an element already present at indexi in the array.\n","[ index represents the level in tree ]","->","[element at index i is rightmost node at level i]","\nIf at that level, element is present,, just continue the traversal.\nElse if no element is present at index i -> add that node to answer ","[res]"," at the i index."),(0,o.kt)(m,{mdxType:"Tabs"},(0,o.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,o.kt)(f,{name:"@ganajayant",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        ArrayList<Integer> a = new ArrayList<Integer>();\n        traverse(root, a, 0);\n        return a;\n    }\n\n    private void traverse(TreeNode root, ArrayList<Integer> a, int c) {\n        if (root == null) {\n            return;\n        }\n        if (c == a.size()) {\n            a.add(root.val);\n        }\n        traverse(root.right, a, c + 1);\n        traverse(root.left, a, c + 1);\n    }\n}\n"))),(0,o.kt)(h,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(f,{name:"@kondekarshubham123",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'\n"""\n\nbinary-tree-right-side-view\n\n    3       <-  3\n   / \\\n  9   20    <-  20\n     /  \\\n    15   7  <-  7\n\nOutput: [3, 20, 7]\n"""\nclass TreeNode:\n    def __init__(\n        self, val: int = 0, left: TreeNode | None = None, right: TreeNode | None = None\n    ) -> None:\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        def dfs(root: Optional[TreeNode], depth, right_view):\n            if not root:\n                return\n\n            if depth == len(right_view):\n                right_view.append(root.val)\n\n            dfs(root.right, depth + 1, right_view)\n            dfs(root.left, depth + 1, right_view)\n\n        right_view: list = []\n        if not root:\n            return right_view\n        dfs(root, 0, right_view)\n        return right_view\n\n')))))}g.isMDXComponent=!0}}]);