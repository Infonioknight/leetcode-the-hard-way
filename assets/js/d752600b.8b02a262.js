"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[9546],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},f="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),f=p(n),m=o,d=f["".concat(s,".").concat(m)]||f[m]||c[m]||a;return n?r.createElement(d,l(l({ref:t},u),{},{components:n})):r.createElement(d,l({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[f]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},26476:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @heiheihang | https://leetcode.com/problems/sum-of-left-leaves/"},l="0404 - Sum of Left Leaves (Easy)",i={unversionedId:"0400-0499/sum-of-left-leaves-easy",id:"0400-0499/sum-of-left-leaves-easy",title:"0404 - Sum of Left Leaves (Easy)",description:"Author: @heiheihang | https://leetcode.com/problems/sum-of-left-leaves/",source:"@site/solutions/0400-0499/0404-sum-of-left-leaves-easy.md",sourceDirName:"0400-0499",slug:"/0400-0499/sum-of-left-leaves-easy",permalink:"/solutions/0400-0499/sum-of-left-leaves-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0404-sum-of-left-leaves-easy.md",tags:[],version:"current",sidebarPosition:404,frontMatter:{description:"Author: @heiheihang | https://leetcode.com/problems/sum-of-left-leaves/"},sidebar:"tutorialSidebar",previous:{title:"0403 - Frog Jump (Hard)",permalink:"/solutions/0400-0499/Frog-Jump"},next:{title:"0413 - Arithmetic Slices (Medium)",permalink:"/solutions/0400-0499/arithmetic-slices-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}],u=(f="SolutionAuthor",function(e){return console.warn("Component "+f+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var f;const c={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0404---sum-of-left-leaves-easy"},"0404 - Sum of Left Leaves (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sum-of-left-leaves/"},"https://leetcode.com/problems/sum-of-left-leaves/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given the ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," of a binary tree, return the sum of all left leaves."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/04/08/leftsum-tree.jpg",alt:null})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [3,9,20,null,null,15,7]\nOutput: 24\nExplanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [1]\nOutput: 0 \n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ",(0,o.kt)("inlineCode",{parentName:"li"},"[1, 1000]"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-1000 <= Node.val <= 1000"))),(0,o.kt)("h2",{id:"approach-1-dfs"},"Approach 1: DFS"),(0,o.kt)("p",null,"Following the template from ",(0,o.kt)("a",{parentName:"p",href:"../../tutorials/graph-theory/depth-first-search"},"DFS Guide"),", we iterate to each node and check if it is a left leaf. If it is a left leaf, we return that value to its parent for cumulating the sum. The trick here is to add a ",(0,o.kt)("inlineCode",{parentName:"p"},"is_left")," parameter to the ",(0,o.kt)("inlineCode",{parentName:"p"},"dfs")," function."),(0,o.kt)(u,{name:"@heiheihang",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:\n        def dfs(node, isLeft):\n            \n            #skip when we reach the end of the path\n            if(node is None):\n                return 0\n                \n            #if node is a leaf (no left and right) and is the left child\n            #return its value for adding\n            if(node.left is None and node.right is None and isLeft is True):\n                return node.val \n            \n            #perform dfs on both children\n            #set isLeft to true on left child\n            #set isLeft to false on right child\n            return dfs(node.left, True) + dfs(node.right, False)\n        \n        #root can be a leaf if it is the only node in the tree\n        #but it is not a left leaf (no right/left)\n        return dfs(root, False)\n")))}d.isMDXComponent=!0}}]);