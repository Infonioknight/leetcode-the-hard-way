"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[88937],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=o,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},91090:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/intersection-of-multiple-arrays/"},i="2248 - Intersection of Multiple Arrays (Easy)",l={unversionedId:"2200-2299/intersection-of-multiple-arrays-easy",id:"2200-2299/intersection-of-multiple-arrays-easy",title:"2248 - Intersection of Multiple Arrays (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/intersection-of-multiple-arrays/",source:"@site/solutions/2200-2299/2248-intersection-of-multiple-arrays-easy.md",sourceDirName:"2200-2299",slug:"/2200-2299/intersection-of-multiple-arrays-easy",permalink:"/solutions/2200-2299/intersection-of-multiple-arrays-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2200-2299/2248-intersection-of-multiple-arrays-easy.md",tags:[],version:"current",sidebarPosition:2248,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/intersection-of-multiple-arrays/"},sidebar:"tutorialSidebar",previous:{title:"2246 - Longest Path With Different Adjacent Characters (Hard)",permalink:"/solutions/2200-2299/longest-path-with-different-adjacent-characters-hard"},next:{title:"2249 - Count Lattice Points Inside a Circle (Medium)",permalink:"/solutions/2200-2299/count-lattice-points-inside-a-circle-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2}],u=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const m={toc:p},d="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"2248---intersection-of-multiple-arrays-easy"},"2248 - Intersection of Multiple Arrays (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/intersection-of-multiple-arrays/"},"https://leetcode.com/problems/intersection-of-multiple-arrays/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given a 2D integer array ",(0,o.kt)("inlineCode",{parentName:"p"},"nums")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"nums[i]")," is a non-empty array of ",(0,o.kt)("strong",{parentName:"p"},"distinct")," positive integers, return ",(0,o.kt)("em",{parentName:"p"},"the list of integers that are present in ",(0,o.kt)("strong",{parentName:"em"},"each array")," of")," ",(0,o.kt)("inlineCode",{parentName:"p"},"nums")," ",(0,o.kt)("em",{parentName:"p"},"sorted in ",(0,o.kt)("strong",{parentName:"em"},"ascending order")),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]\nOutput: [3,4]\nExplanation: \nThe only integers present in each of nums[0] = [3,1,2,4,5], nums[1] = [1,2,3,4], and nums[2] = [3,4,5,6] are 3 and 4, so we return [3,4].\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [[1,2,3],[4,5,6]]\nOutput: []\nExplanation: \nThere does not exist any integer present both in nums[0] and nums[1], so we return an empty list [].\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 1000")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= sum(nums[i].length) <= 1000")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums[i][j] <= 1000")),(0,o.kt)("li",{parentName:"ul"},"All the values of ",(0,o.kt)("inlineCode",{parentName:"li"},"nums[i]")," are ",(0,o.kt)("strong",{parentName:"li"},"unique"),".")),(0,o.kt)("h2",{id:"approach-1-brute-force"},"Approach 1: Brute Force"),(0,o.kt)("p",null,"Observation: Each element of the final output would have a frequency of $$nums.length$$."),(0,o.kt)("p",null,"We use hash map to store the frequency for each integer. Iterate the map and look for the those with $$occurrence ==nums.length$$."),(0,o.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> intersection(vector<vector<int>>& nums) {\n        int n = nums.size();\n        unordered_map<int, int> m;\n        vector<int> ans;\n        // count each integer\n        for (auto x : nums)  for (auto y : x) m[y]++;\n        // if the count is equal to n, then take this integer\n        for (auto x : m) if (x.second == n) ans.push_back(x.first);\n        // sort in ascending order\n        sort(ans.begin(), ans.end());\n        return ans;\n    }\n};\n")))}f.isMDXComponent=!0}}]);