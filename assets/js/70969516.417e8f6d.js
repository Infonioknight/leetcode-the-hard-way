"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[29901],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=r.createContext({}),p=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,f=u["".concat(m,".").concat(c)]||u[c]||d[c]||a;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7334:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/maximum-split-of-positive-even-integers/"},o="2178 - Maximum Split of Positive Even Integers (Medium)",l={unversionedId:"2100-2199/maximum-split-of-positive-even-integers-medium",id:"2100-2199/maximum-split-of-positive-even-integers-medium",title:"2178 - Maximum Split of Positive Even Integers (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/maximum-split-of-positive-even-integers/",source:"@site/solutions/2100-2199/2178-maximum-split-of-positive-even-integers-medium.md",sourceDirName:"2100-2199",slug:"/2100-2199/maximum-split-of-positive-even-integers-medium",permalink:"/solutions/2100-2199/maximum-split-of-positive-even-integers-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2178-maximum-split-of-positive-even-integers-medium.md",tags:[],version:"current",sidebarPosition:2178,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximum-split-of-positive-even-integers/"},sidebar:"tutorialSidebar",previous:{title:"2177 - Find Three Consecutive Integers That Sum to a Given Number (Medium)",permalink:"/solutions/2100-2199/find-three-consecutive-integers-that-sum-to-a-given-number-medium"},next:{title:"2179 - Count Good Triplets in an Array (Hard)",permalink:"/solutions/2100-2199/count-good-triplets-in-an-array-hard"}},m={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Greedy",id:"approach-1-greedy",level:2}],s=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var u;const d={toc:p},c="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2178---maximum-split-of-positive-even-integers-medium"},"2178 - Maximum Split of Positive Even Integers (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-split-of-positive-even-integers/"},"https://leetcode.com/problems/maximum-split-of-positive-even-integers/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"finalSum"),". Split it into a sum of a ",(0,i.kt)("strong",{parentName:"p"},"maximum")," number of ",(0,i.kt)("strong",{parentName:"p"},"unique")," positive even integers."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example, given ",(0,i.kt)("inlineCode",{parentName:"li"},"finalSum = 12"),", the following splits are ",(0,i.kt)("strong",{parentName:"li"},"valid")," (unique positive even integers summing up to ",(0,i.kt)("inlineCode",{parentName:"li"},"finalSum"),"): ",(0,i.kt)("inlineCode",{parentName:"li"},"(2 + 10)"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"(2 + 4 + 6)"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"(4 + 8)"),". Among them, ",(0,i.kt)("inlineCode",{parentName:"li"},"(2 + 4 + 6)")," contains the maximum number of integers. Note that ",(0,i.kt)("inlineCode",{parentName:"li"},"finalSum")," cannot be split into ",(0,i.kt)("inlineCode",{parentName:"li"},"(2 + 2 + 4 + 4)")," as all the numbers should be unique.")),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"a list of integers that represent a valid split containing a ",(0,i.kt)("strong",{parentName:"em"},"maximum")," number of integers"),". If no valid split exists for ",(0,i.kt)("inlineCode",{parentName:"p"},"finalSum"),", return ",(0,i.kt)("em",{parentName:"p"},"an ",(0,i.kt)("strong",{parentName:"em"},"empty")," list"),". You may return the integers in ",(0,i.kt)("strong",{parentName:"p"},"any")," order."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: finalSum = 12\nOutput: [2,4,6]\nExplanation: The following are some valid splits: (2 + 10), (2 + 4 + 6), and (4 + 8).\n(2 + 4 + 6) has the maximum number of integers, which is 3. Thus, we return [2,4,6].\nNote that [2,6,4], [6,2,4], etc. are also accepted.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: finalSum = 7\nOutput: []\nExplanation: There are no valid splits for the given finalSum.\nThus, we return an empty array.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: finalSum = 28\nOutput: [6,8,2,12]\nExplanation: The following are some valid splits: (2 + 26), (6 + 8 + 2 + 12), and (4 + 24). \n(6 + 8 + 2 + 12) has the maximum number of integers, which is 4. Thus, we return [6,8,2,12].\nNote that [10,2,4,12], [6,2,4,16], etc. are also accepted.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= finalSum <= 10^10"))),(0,i.kt)("h2",{id:"approach-1-greedy"},"Approach 1: Greedy"),(0,i.kt)("p",null,"If $$finalSum$$ is odd, then return empty array."),(0,i.kt)("p",null,"Otherwise, we start from the lowest even number $$x = 2$$. Then add it to our final array. Subtract $$finalSum$$ from $$x$$ and set $$x$$ to the next even number. Do the same logic until $$x$$ cannot be used. At the end, add the remainder to the last element of the array."),(0,i.kt)(s,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<long long> maximumEvenSplit(long long finalSum) {\n        vector<long long> ans;\n        // final sum is odd, return empty array\n        if (finalSum & 1) return ans;\n        // add lowest even number\n        long long x = 2;\n        // check if we can use x\n        while (x <= finalSum) {\n            // add it to answer\n            ans.push_back(x);\n            // update finalSum and set x to the next even number\n            finalSum -= x, x += 2;\n        }\n        // add the remainder to the last element\n        ans.back() += finalSum;\n        return ans;\n    }\n};\n")))}f.isMDXComponent=!0}}]);