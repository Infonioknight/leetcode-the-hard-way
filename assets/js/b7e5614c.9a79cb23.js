"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[76809],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),s=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(l.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return t?i.createElement(h,o(o({ref:n},u),{},{components:t})):i.createElement(h,o({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=m;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[d]="string"==typeof e?e:r,o[1]=p;for(var s=2;s<a;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},31658:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var i=t(87462),r=(t(67294),t(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/is-graph-bipartite"},o="0785 -  Is Graph Bipartite? (Medium)",p={unversionedId:"0700-0799/is-graph-bipartite-medium",id:"0700-0799/is-graph-bipartite-medium",title:"0785 -  Is Graph Bipartite? (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/is-graph-bipartite",source:"@site/solutions/0700-0799/0785-is-graph-bipartite-medium.md",sourceDirName:"0700-0799",slug:"/0700-0799/is-graph-bipartite-medium",permalink:"/solutions/0700-0799/is-graph-bipartite-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0700-0799/0785-is-graph-bipartite-medium.md",tags:[],version:"current",sidebarPosition:785,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/is-graph-bipartite"},sidebar:"tutorialSidebar",previous:{title:"0778 - Swim in Rising Water (Hard)",permalink:"/solutions/0700-0799/swim-in-rising-water-hard"},next:{title:"0787 - Cheapest Flights Within K Stops (Medium)",permalink:"/solutions/0700-0799/cheapest-flights-within-k-stops-medium"}},l={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DSF Colouring",id:"approach-1-dsf-colouring",level:2},{value:"Approach 2: BFS Colouring",id:"approach-2-bfs-colouring",level:2},{value:"Approach 3: Custom Template",id:"approach-3-custom-template",level:2}],u=(d="SolutionAuthor",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var d;const c={toc:s},m="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0785----is-graph-bipartite-medium"},"0785 -  Is Graph Bipartite? (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/is-graph-bipartite"},"https://leetcode.com/problems/is-graph-bipartite")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"There is an ",(0,r.kt)("strong",{parentName:"p"},"undirected")," graph with ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," nodes, where each node is numbered between ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"n - 1"),". You are given a 2D array ",(0,r.kt)("inlineCode",{parentName:"p"},"graph"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"graph[u]")," is an array of nodes that node ",(0,r.kt)("inlineCode",{parentName:"p"},"u")," is adjacent to. More formally, for each ",(0,r.kt)("inlineCode",{parentName:"p"},"v")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"graph[u]"),", there is an undirected edge between node ",(0,r.kt)("inlineCode",{parentName:"p"},"u")," and node ",(0,r.kt)("inlineCode",{parentName:"p"},"v"),". The graph has the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"There are no self-edges (",(0,r.kt)("inlineCode",{parentName:"li"},"graph[u]")," does not contain ",(0,r.kt)("inlineCode",{parentName:"li"},"u"),")."),(0,r.kt)("li",{parentName:"ul"},"There are no parallel edges (",(0,r.kt)("inlineCode",{parentName:"li"},"graph[u]")," does not contain duplicate values)."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"v")," is in ",(0,r.kt)("inlineCode",{parentName:"li"},"graph[u]"),", then ",(0,r.kt)("inlineCode",{parentName:"li"},"u")," is in ",(0,r.kt)("inlineCode",{parentName:"li"},"graph[v]")," (the graph is undirected)."),(0,r.kt)("li",{parentName:"ul"},"The graph may not be connected, meaning there may be two nodes ",(0,r.kt)("inlineCode",{parentName:"li"},"u")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"v")," such that there is no path between them.")),(0,r.kt)("p",null,"A graph is ",(0,r.kt)("strong",{parentName:"p"},"bipartite")," if the nodes can be partitioned into two independent sets ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"B")," such that ",(0,r.kt)("strong",{parentName:"p"},"every")," edge in the graph connects a node in set ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," and a node in set ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),"."),(0,r.kt)("p",null,"Return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," ",(0,r.kt)("em",{parentName:"p"},"if and only if it is ",(0,r.kt)("strong",{parentName:"em"},"bipartite")),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\nOutput: false\nExplanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg",alt:null})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: graph = [[1,3],[0,2],[1,3],[0,2]]\nOutput: true\nExplanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"graph.length == n")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= n <= 100")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= graph[u].length < n")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= graph[u][i] <= n - 1")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"graph[u]")," does not contain ",(0,r.kt)("inlineCode",{parentName:"li"},"u"),"."),(0,r.kt)("li",{parentName:"ul"},"All the values of ",(0,r.kt)("inlineCode",{parentName:"li"},"graph[u]")," are ",(0,r.kt)("strong",{parentName:"li"},"unique"),"."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"graph[u]")," contains ",(0,r.kt)("inlineCode",{parentName:"li"},"v"),", then ",(0,r.kt)("inlineCode",{parentName:"li"},"graph[v]")," contains ",(0,r.kt)("inlineCode",{parentName:"li"},"u"),".")),(0,r.kt)("h2",{id:"approach-1-dsf-colouring"},"Approach 1: DSF Colouring"),(0,r.kt)("p",null,"We can colour each set, says $$0$$ and $$1$$. For example, in example 2, we can colour {0, 2} to $$0$$ and {1, 3} to $$1$$. Therefore, we greedily colour them - if the current node is marked as $$0$$, then all neighbours would be $$1$$ and so on."),(0,r.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isBipartite(vector<vector<int>>& graph) {\n        int n = graph.size();\n        // {-1, 0, 1}\n        // -1: uncoloured\n        // 0: red\n        // 1: blue\n        vector<int> vis(n, -1); \n        function<int(int,int)> dfs = [&](int u, int colour) -> int {\n            // check if it is coloured or not\n            if (vis[u] != -1) {\n                // if the colour is same as previous one -> return 1\n                if (vis[u] == (color ^ 1)) return 1;\n                // the colour is correct -> return 0 \n                else return 0;\n            }\n            // set the colour\n            vis[u] = colour;\n            // iterate each neighbours\n            for (auto& v : graph[u]) {\n                // the expected colour for neighbours would be colour ^ 1\n                // i.e. 0 -> 1 or 1 -> 0\n                if (dfs(v, colour ^ 1)) {\n                    return 1;\n                }\n            }\n            return 0;\n        };\n        // iterate each node\n        for (int i = 0; i < n; i++) {\n            // check if it is coloured\n            if (vis[i] == -1) {\n                // if not, then colour it\n                // set 0 by default\n                if (dfs(i, 0)) {\n                    // found neighbours also have the same colour\n                    // then return 0 \n                    return 0;\n                }\n            }\n        }\n        return 1;\n    }\n};\n")),(0,r.kt)("h2",{id:"approach-2-bfs-colouring"},"Approach 2: BFS Colouring"),(0,r.kt)("p",null,"Same idea but using BFS."),(0,r.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isBipartite(vector<vector<int>>& graph) {\n        int n = graph.size();\n        vector<int> vis(n, -1);\n        queue<int> q; \n        for (int i = 0; i < n; i++) {\n            if (vis[i] == -1) {\n                vis[i] = 0;\n                q.push(i);\n                while (!q.empty()) {\n                    int u = q.front(); q.pop();\n                    for (int v : graph[u])  {\n                        if (vis[v] == -1) { \n                            vis[v] = vis[u] ^ 1; \n                            q.push(v); \n                        }  else if (vis[v] == vis[u]) {\n                            return false;\n                        }\n                    }\n                }\n            } \n        }\n        return true;\n    }\n};\n")),(0,r.kt)("h2",{id:"approach-3-custom-template"},"Approach 3: Custom Template"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"is_bipartite Template"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"struct is_bipartite {\n  int V;\n  vector<vector<int>> adj;\n  vector<int> depth;\n  vector<bool> visited;\n\n  is_bipartite(int v = -1) {\n    if (v >= 0) init(v);\n  }\n\n  void init(int v) {\n    V = v;\n    adj.assign(V, {});\n  }\n\n  void add(int a, int b) {\n    adj[a].push_back(b);\n    adj[b].push_back(a);\n  }\n\n  vector<array<vector<int>, 2>> components;\n\n  bool dfs(int node, int parent) {\n    assert(!visited[node]);\n    visited[node] = true;\n    depth[node] = parent < 0 ? 0 : depth[parent] + 1;\n    components.back()[depth[node] % 2].push_back(node);\n    for (int h : adj[node])\n      if (h != parent) {\n        if (!visited[h] && !dfs(h, node)) return false;\n        if (depth[node] % 2 == depth[h] % 2) return false;\n      }\n    return true;\n  }\n\n  bool solve() {\n    depth.assign(V, -1);\n    visited.assign(V, false);\n    components = {};\n    for (int i = 0; i < V; i++)\n      if (!visited[i]) {\n        components.emplace_back();\n        if (!dfs(i, -1)) return false;\n      }\n    return true;\n  }\n}; \n"))),(0,r.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isBipartite(vector<vector<int>>& graph) {\n        int n = graph.size();\n        // init is_bipartite\n        is_bipartite c(n);\n        // iterate input and build the edges\n        for (int i = 0; i < n; i++) {\n            int from = i;\n            for (auto& to : graph[from]) {\n                c.add(from, to);\n                c.add(to, from);\n            }\n        }\n        // call solve to get the answer\n        return c.solve();\n    }\n};\n")))}h.isMDXComponent=!0}}]);