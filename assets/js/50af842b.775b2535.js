"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[67925],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>y});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(r),d=i,y=s["".concat(c,".").concat(d)]||s[d]||m[d]||a;return r?n.createElement(y,o(o({ref:t},u),{},{components:r})):n.createElement(y,o({ref:t},u))}));function y(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[s]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},97365:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>b,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=r(87462),i=(r(67294),r(3905));const a={description:"Author: @jeremiaaxel, @ColeB2, @radojicic23 | https://leetcode.com/problems/best-time-to-buy-and-sell-stock/"},o="0121 - Best Time to Buy and Sell Stock (Easy)",l={unversionedId:"0100-0199/best-time-to-buy-and-sell-stock-easy",id:"0100-0199/best-time-to-buy-and-sell-stock-easy",title:"0121 - Best Time to Buy and Sell Stock (Easy)",description:"Author: @jeremiaaxel, @ColeB2, @radojicic23 | https://leetcode.com/problems/best-time-to-buy-and-sell-stock/",source:"@site/solutions/0100-0199/0121-best-time-to-buy-and-sell-stock-easy.md",sourceDirName:"0100-0199",slug:"/0100-0199/best-time-to-buy-and-sell-stock-easy",permalink:"/solutions/0100-0199/best-time-to-buy-and-sell-stock-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0121-best-time-to-buy-and-sell-stock-easy.md",tags:[],version:"current",sidebarPosition:121,frontMatter:{description:"Author: @jeremiaaxel, @ColeB2, @radojicic23 | https://leetcode.com/problems/best-time-to-buy-and-sell-stock/"},sidebar:"tutorialSidebar",previous:{title:"0115 - Distinct Subsequences (Hard)",permalink:"/solutions/0100-0199/distinct-subsequences-hard"},next:{title:"0124 - Binary Tree Maximum Path Sum (Hard)",permalink:"/solutions/0100-0199/binary-tree-maximum-path-sum-hard"}},c={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1 : Linear Iteration",id:"approach-1--linear-iteration",level:2},{value:"Time Complexity",id:"time-complexity",level:4},{value:"Space Complexity",id:"space-complexity",level:4}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},s=u("Tabs"),m=u("TabItem"),d=u("SolutionAuthor"),y={toc:p},f="wrapper";function b(e){let{components:t,...r}=e;return(0,i.kt)(f,(0,n.Z)({},y,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0121---best-time-to-buy-and-sell-stock-easy"},"0121 - Best Time to Buy and Sell Stock (Easy)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/"},"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given an array ",(0,i.kt)("inlineCode",{parentName:"p"},"prices")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"prices[i]")," is the price of a given stock on the $i^{th}$ day."),(0,i.kt)("p",null,"You want to maximize your profit by choosing a ",(0,i.kt)("strong",{parentName:"p"},"single")," day to buy one stock and choosing a ",(0,i.kt)("strong",{parentName:"p"},"different day in the future")," to sell that stock."),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the maximum profit you can achieve from this transaction"),". If you cannot achieve any profit, return ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= prices.length <= 10 ^ 5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= prices[i] <= 10 ^ 4"))),(0,i.kt)("h2",{id:"approach-1--linear-iteration"},"Approach 1 : Linear Iteration"),(0,i.kt)("p",null,"We are going to iterate through the ",(0,i.kt)("inlineCode",{parentName:"p"},"prices")," array."),(0,i.kt)("p",null,"In this example, we use $buyPrice$ variable to store the minimum price so far and $currentMaxProfit$ variable to store the maximum profit so far."),(0,i.kt)("p",null,"While finding the minimum value of price as the $buyPrice$. We are going to check on each day's profit and save the maximum profit as the $currentMaxProfit$. Since we could only sell after we buy the stock, we don't have to check back the previous days' profits."),(0,i.kt)("p",null,"Solving this in linear time is also known as ",(0,i.kt)("strong",{parentName:"p"},"Kadane's algorithm.")),(0,i.kt)("h4",{id:"time-complexity"},"Time Complexity"),(0,i.kt)("p",null,"The time complexity for this solution is $O(n)$, where $n$ is the length of the ",(0,i.kt)("inlineCode",{parentName:"p"},"prices")," array."),(0,i.kt)("h4",{id:"space-complexity"},"Space Complexity"),(0,i.kt)("p",null,"The space complexity is $O(1)$ since we only use a constant amount of space."),(0,i.kt)(s,{mdxType:"Tabs"},(0,i.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(d,{name:"@jeremiaaxel",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int maxProfit(int[] prices) {\n        /* Initialize buy price with the highest amount of value \n        and the current maximum profit with zero */\n        int buyPrice = Integer.MAX_VALUE;\n        int currentMaxProfit = 0;\n        \n        for (int price : prices) {\n            /* if a price is smaller than the current buy price, update the buy price, \n            and continue to the next loop since it is obviously zero profit. */\n            if (price < buyPrice) {\n                buyPrice = price;\n                continue;\n            }\n            /* check if the profit from current price is bigger than the current max profit, \n            and update accordingly. */\n            int profit = price - buyPrice;\n            if (profit > currentMaxProfit) {\n                currentMaxProfit = profit;\n            }\n        }\n        \n        return currentMaxProfit;\n    }\n}\n"))),(0,i.kt)(m,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(d,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        # initialize buy_price as first price in prices, and a max_profit of 0.\n        buy_price = prices[0]\n        max_profit = 0\n        # iterate through all prices.\n        # note we start at 1, as we already "bought" the first stock.\n        for i in range(1, len(prices)):\n            # get current price we are looking at.\n            cur_price = prices[i]\n            # calculate current profit, by subtracting our buy price from our current price.\n            cur_profit = cur_price - buy_price\n            # update our max profit, using max profit, and current profit we calculated.\n            max_profit = max(max_profit, cur_profit)\n            # update the price to be the minimum of the price we bought at, and current price.\n            buy_price = min(buy_price, cur_price)\n        # return our answer.\n        return max_profit\n'))),(0,i.kt)(m,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    let buyPrice = prices[0];\n    let maxProfit = 0;\n    for (let i = 1; i < prices.length; i++) {\n        let currPrice = prices[i];\n        let currProfit = currPrice - buyPrice;\n        maxProfit = Math.max(maxProfit, currProfit);\n        buyPrice = Math.min(buyPrice, currPrice);\n    }\n    return maxProfit;\n};\n"))),(0,i.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,i.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int buyPrice = prices[0];\n        int maxProfit = 0;\n        for (int i = 1; i < prices.size(); i++) {\n            int currPrice = prices[i];\n            int currProfit = currPrice - buyPrice;\n            maxProfit = max(maxProfit, currProfit);\n            buyPrice = min(buyPrice, currPrice);\n        }\n        return maxProfit;\n    }\n};\n")))))}b.isMDXComponent=!0}}]);