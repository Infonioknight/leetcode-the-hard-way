"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[70813],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=r.createContext({}),s=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(m.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=s(t),d=a,h=p["".concat(m,".").concat(d)]||p[d]||c[d]||o;return t?r.createElement(h,u(u({ref:n},l),{},{components:t})):r.createElement(h,u({ref:n},l))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,u=new Array(o);u[0]=d;var i={};for(var m in n)hasOwnProperty.call(n,m)&&(i[m]=n[m]);i.originalType=e,i[p]="string"==typeof e?e:a,u[1]=i;for(var s=2;s<o;s++)u[s]=t[s];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},40733:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>u,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/4sum-ii/"},u="0454 -  4Sum II (Medium)",i={unversionedId:"0400-0499/0454-4sum-ii-medium",id:"0400-0499/0454-4sum-ii-medium",title:"0454 -  4Sum II (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/4sum-ii/",source:"@site/solutions/0400-0499/0454-4sum-ii-medium.md",sourceDirName:"0400-0499",slug:"/0400-0499/0454-4sum-ii-medium",permalink:"/solutions/0400-0499/0454-4sum-ii-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0454-4sum-ii-medium.md",tags:[],version:"current",frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/4sum-ii/"},sidebar:"tutorialSidebar",previous:{title:"0496 - Next Greater Element I (Easy)",permalink:"/solutions/0400-0499/next-greater-element-i-easy"},next:{title:"0500 - 0599",permalink:"/solutions/category/0500---0599"}},m={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force (TLE)",id:"approach-1-brute-force-tle",level:2},{value:"Approach 2: Hasp Map (TLE)",id:"approach-2-hasp-map-tle",level:2},{value:"Approach 3: Hash Map (Accepted)",id:"approach-3-hash-map-accepted",level:2}],l=(p="SolutionAuthor",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var p;const c={toc:s},d="wrapper";function h(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0454----4sum-ii-medium"},"0454 -  4Sum II (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/4sum-ii/"},"https://leetcode.com/problems/4sum-ii/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given four integer arrays ",(0,a.kt)("inlineCode",{parentName:"p"},"nums1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"nums2"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"nums3"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"nums4")," all of length ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),", return the number of tuples ",(0,a.kt)("inlineCode",{parentName:"p"},"(i, j, k, l)")," such that:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= i, j, k, l < n")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\nOutput: 2\nExplanation:\nThe two tuples are:\n1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\nOutput: 1\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == nums1.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == nums2.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == nums3.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == nums4.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 200")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-2^28 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 2^28"))),(0,a.kt)("h2",{id:"approach-1-brute-force-tle"},"Approach 1: Brute Force (TLE)"),(0,a.kt)("p",null,"The simple way is to iterate over all $$nums$$ to construct all possible tuples. However, this solution gives TLE as it is a $$O(n^4)$$ solution."),(0,a.kt)(l,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {\n        int ans = 0;\n        for (auto a : nums1) {\n            for (auto b : nums2) {\n                for (auto c : nums3) {\n                    for (auto d : nums4) {\n                        ans += a + b + c + d == 0;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};\n")),(0,a.kt)("h2",{id:"approach-2-hasp-map-tle"},"Approach 2: Hasp Map (TLE)"),(0,a.kt)("p",null,"We can take the same approach from ",(0,a.kt)("a",{parentName:"p",href:"../0000-0099/two-sum"},"0001 - Two Sum (Easy)"),". We know that $$a + b + c + d = 0$$ is same as $$a = -(b + c + d)$$. Therefore, we iterate $$nums1$$ to count the number of element $$a$$. Then iterate $$nums2$$, $$nums3$$ and $$nums4$$ to find if the complementary sum $$-(b + c + d)$$ is in hash map or not. However, this solution gives TLE as it is a $$O(n^3)$$ solution."),(0,a.kt)(l,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {\n        int ans = 0;\n        unordered_map<int, int> m;\n        for (auto a : nums1) m[a]++;\n        for (auto b : nums2) {\n            for (auto c : nums3) {\n                for (auto d : nums4) {\n                    // a + b + c + d == 0\n                    // a = -(b + c + d)\n                    ans += m[-(b + c + d)];\n                }\n            }\n        }\n        return ans;\n    }\n};\n")),(0,a.kt)("h2",{id:"approach-3-hash-map-accepted"},"Approach 3: Hash Map (Accepted)"),(0,a.kt)("p",null,"We can take the same approach from ",(0,a.kt)("a",{parentName:"p",href:"../0000-0099/two-sum"},"0001 - Two Sum (Easy)"),". We know that $$a + b + c + d = 0$$ is same as $$a + b = - (c + d)$$. Therefore, we iterate $$nums1$$and $$nums2$$ to count the sum of elements $$a + b$$. Then iterate $$nums3$$ and $$nums4$$to find if the complementary sum $$- (c + d)$$is in hash map or not. This solution passes as it is a $$O(n^2)$$solution."),(0,a.kt)(l,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {\n        int ans = 0;\n        unordered_map<int, int> m;\n        for (auto a : nums1) {\n            for (auto b : nums2) {\n                m[a + b]++;\n            }\n        }\n        for (auto c : nums3) {\n            for (auto d : nums4) {\n                // a + b + c + d == 0\n                // a + b = -(c + d)\n                ans += m[-(c + d)];\n            }\n        }\n        return ans;\n    }\n};\n")),(0,a.kt)("p",null,"You may also use two hash maps to store the sums $$a + b$$ and $$-(c + d)$$ and multiply the values at the end."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {\n        int ans = 0;\n        unordered_map<int, int> m1, m2;\n        for (auto a : nums1) {\n            for (auto b : nums2) {\n                m1[a + b]++;\n            }\n        }\n        for (auto c : nums3) {\n            for (auto d : nums4) {\n                m2[-(c + d)]++;\n            }\n        }\n        for (auto x : m1) {\n            ans += m1[x.first] * m2[x.first];\n        }\n        return ans;\n    }\n};\n")))}h.isMDXComponent=!0}}]);