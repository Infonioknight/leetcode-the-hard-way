"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[78728],{3905:(e,n,t)=>{t.d(n,{Zo:()=>h,kt:()=>p});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},h=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=i,p=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(p,o(o({ref:n},h),{},{components:t})):r.createElement(p,o({ref:n},h))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},93159:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(87462),i=(t(67294),t(3905));const a={description:"Author: @vigneshshiv | https://leetcode.com/problems/minimum-window-substring/"},o="0076 - Minimum Window Substring (Hard)",s={unversionedId:"0000-0099/minimum-window-substring-hard",id:"0000-0099/minimum-window-substring-hard",title:"0076 - Minimum Window Substring (Hard)",description:"Author: @vigneshshiv | https://leetcode.com/problems/minimum-window-substring/",source:"@site/solutions/0000-0099/0076-minimum-window-substring-hard.md",sourceDirName:"0000-0099",slug:"/0000-0099/minimum-window-substring-hard",permalink:"/solutions/0000-0099/minimum-window-substring-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0076-minimum-window-substring-hard.md",tags:[],version:"current",sidebarPosition:76,frontMatter:{description:"Author: @vigneshshiv | https://leetcode.com/problems/minimum-window-substring/"},sidebar:"tutorialSidebar",previous:{title:"0075 - Sort Colors (Medium)",permalink:"/solutions/0000-0099/sort-colors-medium"},next:{title:"0078 - Subsets (Medium)",permalink:"/solutions/0000-0099/subsets-medium"}},l={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window with HashMap",id:"approach-1-sliding-window-with-hashmap",level:2},{value:"Approach 2: Sliding Window with ASCII",id:"approach-2-sliding-window-with-ascii",level:2}],h=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},m=h("Tabs"),u=h("TabItem"),d=h("SolutionAuthor"),p={toc:c},w="wrapper";function f(e){let{components:n,...t}=e;return(0,i.kt)(w,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0076---minimum-window-substring-hard"},"0076 - Minimum Window Substring (Hard)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-window-substring/"},"https://leetcode.com/problems/minimum-window-substring/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given two strings ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," of lengths ",(0,i.kt)("inlineCode",{parentName:"p"},"m")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," respectively, return ",(0,i.kt)("strong",{parentName:"p"},"minimum window substring")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," such that every character in ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," (",(0,i.kt)("strong",{parentName:"p"},"including duplicates"),") is included in the window. If there is no such substring, return the empty string ",(0,i.kt)("inlineCode",{parentName:"p"},'""'),"."),(0,i.kt)("p",null,"The testcases will be generated such that the answer is ",(0,i.kt)("strong",{parentName:"p"},"unique"),"."),(0,i.kt)("p",null,"A ",(0,i.kt)("strong",{parentName:"p"},"substring")," is a contiguous sequence of characters within the string."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "ADOBECODEBANC", t = "ABC"\nOutput: "BANC"\nExplanation: The minimum window substring "BANC" includes \'A\', \'B\', and \'C\' from string t.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "a", t = "a"\nOutput: "a"\nExplanation: The entire string s is the minimum window.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "a", t = "aa"\nOutput: ""\nExplanation: Both \'a\'s from t must be included in the window.\nSince the largest window of s only has one \'a\', return empty string.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"m == s.length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n == t.length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 10^5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"s")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"t")," consist of uppercase and lowercase English letters.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Follow up:")," Could you find an algorithm that runs in ",(0,i.kt)("inlineCode",{parentName:"p"},"O(m + n)")," time?"),(0,i.kt)("h2",{id:"approach-1-sliding-window-with-hashmap"},"Approach 1: Sliding Window with HashMap"),(0,i.kt)("p",null,"Finding all of T's characters in S, irrespective of order and other characters in a linear time requires two pointer approach. "),(0,i.kt)("p",null,'One of the base case is, T should be smaller than S, Otherwise if T\'s larger than S then return "". But if both strings are equal then T is our answer. '),(0,i.kt)("p",null,"Apart from above mentioned base cases, Here are the simple steps to solve this problem,"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build a HashMap of T's characters and it's count."),(0,i.kt)("li",{parentName:"ul"},"Iterate through S and move forward with one pointer, and look for each char in map and it's count, If matches then we found one of the matching character."),(0,i.kt)("li",{parentName:"ul"},"Repeat the process until of all T's characters found in S, Once found, that's our minimum window."),(0,i.kt)("li",{parentName:"ul"},"Remove S's unnecessary characters in HashMap starting from first, and find the minimum window. "),(0,i.kt)("li",{parentName:"ul"},"Repeat the 3rd & 4th step until you find the minimum window substring")),(0,i.kt)("p",null,"Time Complexity: $O(m + n)$, where $m$ - # of characters in s and $n$ - # of characters in t."),(0,i.kt)("p",null,"Space complexity: $O(n)$"),(0,i.kt)(m,{mdxType:"Tabs"},(0,i.kt)(u,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(d,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public String minWindow(String s, String t) {\n        String empty = \"\";\n        int m = s.length(), n = t.length();\n        // If String T length is greater than S, then all of T chars can't fit in S, so return \"\"\n        if (n > m) return empty;\n        // If S & T equals, then that's the min\n        if (m == n && s.equals(t)) return t;\n        // Build T character hashmap and counts\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : t.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        // i - refers start position usually left\n        int i = 0, start = -1, matched = 0, min = s.length() + 1;\n        for (int j = 0; j < m; j++) {\n            char c = s.charAt(j);\n            if (map.containsKey(c)) {\n                map.merge(c, -1, Integer::sum);\n                // If map character matches 0, then found valid char, increase matched by 1\n                if (map.get(c) == 0) {\n                    matched += 1;\n                }\n            }\n            // If matched equals all of T's character, then find minimum window\n            while (matched == map.size()) {\n                if (min > j - i + 1) {\n                    min = j - i + 1;\n                    start = i;\n                }\n                char del = s.charAt(i++);\n                if (map.containsKey(del)) {\n                    // If we are seeing one of T's del char then increase count by 1\n                    // If the char count is 0, then decrement matched by 1 (reason count will be increment by 1)\n                    if (map.get(del) == 0) {\n                        matched -= 1;\n                    }\n                    map.merge(del, 1, Integer::sum);\n                }\n            }\n        }\n        return start == -1 ? empty : s.substring(start, start + min);\n    }\n}\n"))),(0,i.kt)(u,{value:"python",label:"Python",mdxType:"TabItem"},(0,i.kt)(d,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    # We are going to create a counter to count the characters of t, then as \n    # we come across them in s, decrement the count in our counter. If count\n    # for that character is <= 0, we have more than enough characters in our\n    # window to equal t. so we can increment a matches variable to track that.\n    # Knowing that our goal is to:\n    # 1. add characters to our window, and then update the counter, and matches.\n    # remembering that matches increments when the count of the characters in our\n    # window reaches 0.\n    # 2. Check to see if our window has all characters we need.\n    # If so, we set our window to the current window, and start shrinking it to see\n    # if it still remains true while shrinking. While shrinking, if the count of\n    # the characters ever goes back positive, we know that we no longer have enough\n    # characters inside our window to match t, so we can decrement matches, and stop\n    # shrinking the window.\n    # Repeat the above process until our window's right side expands to larger than s.\n    def minWindow(self, s: str, t: str) -> str:\n        # Early Return if t is larger than s, we obviously can't find t in s.\n        if len(t) > len(s): return \"\"\n        #Create counter to count all characters in t. O(n) time where n length of t.\n        counter = {}\n        for ch in t:\n            if ch not in counter:\n                counter[ch] = 0\n            counter[ch] += 1\n        # Initialize variables create out sliding window. l to track left\n        # side of our window starting at 0, matches to track the characters\n        # we have enough of inside our window to match t, and an initial variable\n        # to where our window will start, and how large it is. We use -1 to show\n        # we don't have a window started that is valid yet, and len(s) + 1 as a \n        # window that will be large enough than any window we find, if we find one\n        # will be smaller than it, and therefore trigger our update condition.\n        l = 0\n        matches = 0\n        window_start = -1\n        window_size = len(s) + 1\n        # Expand our window tracking r, right side window, and incoming character, ch.\n        # O(m) time to look through the string s. Where m is length of s.\n        for r, ch in enumerate(s):\n            # Check expanded window incoming character is in counter so we can add it.\n            if ch in counter:\n                counter[ch] -= 1\n                # If count for ch reaches 0, we have more than enough character to match it.\n                if counter[ch] == 0:\n                    matches += 1\n            # Check that the window has all the characters it needs, while it does,\n            # shrink the window until it doesn't have all characters it needs.\n            while len(counter) == matches:\n                # get current window size\n                current_window_size = (r-l) + 1\n                # check current window < smallest window found.\n                if current_window_size < window_size:\n                    # update size of smallest window we found.\n                    window_size = current_window_size\n                    # update start of window we found.\n                    window_start = l\n                # start the removal of the left character, ie moving window forward.\n                left_ch = s[l]\n                # if left ch is a character we need to match t, \n                if left_ch in counter:\n                    # check to see if we have 0 for a count of that character.\n                    # if we do, we know by removing it, we will no longer have enough\n                    # characters to match to t.\n                    if counter[left_ch] == 0:\n                        matches -= 1\n                    # remove ch from window, by incrementing its count.\n                    counter[left_ch] += 1\n                # move the window forward.\n                l += 1\n        # return the answer by slicing. string from our start point to start point + size\n        # only do this if we found a valid window. Note slicing in python takes O(n)\n        # where n is length of s, to copy the string, then slice it properly.\n        return s[window_start: window_start + window_size] if window_start != -1 else \"\"\n")))),(0,i.kt)("h2",{id:"approach-2-sliding-window-with-ascii"},"Approach 2: Sliding Window with ASCII"),(0,i.kt)(m,{mdxType:"Tabs"},(0,i.kt)(u,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)(d,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'class Solution {\n    public String minWindow(String s, String t) {\n        String empty = "";\n        int m = s.length(), n = t.length();\n        // If String T length is greater than S, then all of T chars can\'t fit in S, so return ""\n        if (n > m) return empty;\n        // If S & T equals, then that\'s the min\n        if (m == n && s.equals(t)) return t;\n        // Build T character hashmap and counts\n        int[] map = new int[128];\n        for (char c : t.toCharArray()) {\n            map[c] += 1;\n        }\n        // i - refers start position usually left\n        int i = 0, start = -1, matched = 0, min = s.length() + 1;\n        for (int j = 0; j < m; j++) {\n            char c = s.charAt(j);\n            if (map[c]-- > 0) {\n                matched += 1;\n            }\n            while (matched == n) {\n                if (min > j - i + 1) {\n                    min = j - i + 1;\n                    start = i;\n                }\n                char del = s.charAt(i++);\n                if (map[del]++ >= 0) {\n                    matched -= 1;\n                }\n            }\n        }\n        return start == -1 ? empty : s.substring(start, start + min);\n    }\n}\n')))))}f.isMDXComponent=!0}}]);