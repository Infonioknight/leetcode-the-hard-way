"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[66766],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,b=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(b,o(o({ref:t},p),{},{components:n})):r.createElement(b,o({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},43705:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={title:"Sparse Table",description:"Range Queries finding min, max, gcd, lcm, and etc. The array cannot be changed between two queries.",hide_table_of_contents:!1,keywords:["leetcode","template","sparse table"]},o=void 0,l={unversionedId:"sparse-table",id:"sparse-table",title:"Sparse Table",description:"Range Queries finding min, max, gcd, lcm, and etc. The array cannot be changed between two queries.",source:"@site/templates/sparse-table.md",sourceDirName:".",slug:"/sparse-table",permalink:"/templates/sparse-table",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/templates/sparse-table.md",tags:[],version:"current",frontMatter:{title:"Sparse Table",description:"Range Queries finding min, max, gcd, lcm, and etc. The array cannot be changed between two queries.",hide_table_of_contents:!1,keywords:["leetcode","template","sparse table"]},sidebar:"tutorialSidebar",previous:{title:"Segment Tree",permalink:"/templates/segment-tree"},next:{title:"Two Pointers",permalink:"/templates/two-pointers"}},c={},s=[],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=p("Tabs"),d=p("TabItem"),m={toc:s},b="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(b,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template<typename it, typename bin_op>\nstruct sparse_table {\n    using T = typename remove_reference<decltype(*declval<it>())>::type;\n    vector<vector<T>> t; bin_op f;\n\n    sparse_table(it first, it last, bin_op op) : t(1), f(op) {\n        int n = distance(first, last);\n        t.assign(32 - __builtin_clz(n), vector<T>(n));\n        t[0].assign(first, last);\n        for (int i = 1; i < t.size(); i++)\n            for (int j = 0; j < n - (1 << i) + 1; j++)\n                t[i][j] = f(t[i - 1][j], t[i - 1][j + (1 << (i - 1))]);\n    }\n\n    // returns f(a[l .. r]) in O(1) time\n    T query(int l, int r) {\n        int h = floor(log2(r - l + 1));\n        return f(t[h][l], t[h][r - (1 << h) + 1]);\n    }\n};\n")))),(0,a.kt)("p",null,"Usage: Range Queries finding min, max, gcd, lcm, and etc. The array cannot be changed between two queries."),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'void main() {\n    sparse_table g(a.begin(), a.end(), [](int x, int y){\n        return gcd(x, y);\n    });\n    cout << g.query(j, i) << "\\n";\n}\n')))))}f.isMDXComponent=!0}}]);