"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[18337],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),d=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=d(e.components);return o.createElement(s.Provider,{value:n},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=d(t),u=a,f=m["".concat(s,".").concat(u)]||m[u]||h[u]||i;return t?o.createElement(f,l(l({ref:n},p),{},{components:t})):o.createElement(f,l({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=u;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[m]="string"==typeof e?e:a,l[1]=r;for(var d=2;d<i;d++)l[d]=t[d];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},22112:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>w,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var o=t(87462),a=(t(67294),t(3905));const i={description:"Author: @vigneshshiv, @wingkwong, @radojicic23 | https://leetcode.com/problems/remove-nth-node-from-end-of-list/"},l="0019 - Remove Nth Node From End of List (Easy)",r={unversionedId:"0000-0099/remove-nth-node-from-end-of-list-medium",id:"0000-0099/remove-nth-node-from-end-of-list-medium",title:"0019 - Remove Nth Node From End of List (Easy)",description:"Author: @vigneshshiv, @wingkwong, @radojicic23 | https://leetcode.com/problems/remove-nth-node-from-end-of-list/",source:"@site/solutions/0000-0099/0019-remove-nth-node-from-end-of-list-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/remove-nth-node-from-end-of-list-medium",permalink:"/solutions/0000-0099/remove-nth-node-from-end-of-list-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0019-remove-nth-node-from-end-of-list-medium.md",tags:[],version:"current",sidebarPosition:19,frontMatter:{description:"Author: @vigneshshiv, @wingkwong, @radojicic23 | https://leetcode.com/problems/remove-nth-node-from-end-of-list/"},sidebar:"tutorialSidebar",previous:{title:"0017 - Letter Combinations of a Phone Number (Hard)",permalink:"/solutions/0000-0099/letter-combinations-of-a-phone-number-medium"},next:{title:"0020 - Valid Parentheses (Easy)",permalink:"/solutions/0000-0099/valid-parentheses-easy"}},s={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Fast and Slow Pointer",id:"approach-1-fast-and-slow-pointer",level:2},{value:"Approach 2: Iteration with One Pass Solution",id:"approach-2-iteration-with-one-pass-solution",level:2}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},m=p("Tabs"),h=p("TabItem"),u=p("SolutionAuthor"),f={toc:d},c="wrapper";function w(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,o.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0019---remove-nth-node-from-end-of-list-easy"},"0019 - Remove Nth Node From End of List (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/"},"https://leetcode.com/problems/remove-nth-node-from-end-of-list/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given the ",(0,a.kt)("inlineCode",{parentName:"p"},"head")," of a linked list, remove the ",(0,a.kt)("inlineCode",{parentName:"p"},"nth")," node from the end of the list and return its head."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg",alt:"Alt text"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: head = [1], n = 1\nOutput: []\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: head = [1, 2], n = 1\nOutput: [1]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the list is ",(0,a.kt)("inlineCode",{parentName:"li"},"sz"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= sz <= 30")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= Node.val <= 100")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= sz"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Follow up:")," Could you do this in one pass?"),(0,a.kt)("h2",{id:"approach-1-fast-and-slow-pointer"},"Approach 1: Fast and Slow Pointer"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n\n// Time Complexity: O(N) where N is the number of nodes\n// Space Complexity: O(1)\nclass Solution {\npublic:\n    // the general idea is to use fast & slow pointers\n    // 1. traverse L - n nodes from the start of the list using fast pointer\n    // where L is the length of the linked list\n    // e.g. in example 1, the fast pointer will be at node 3 while slower pointer remains at node 1\n    // 2. traverse slow pointer until fast pointer reaches the last node\n    // e.g. in example 1, the fast pointer will be at node 5 while slower pointer will be at node 3\n    // 3. update slow next node\n    // e.g. in example 1, the slower pointer is at node 3 now. we link the next node to node 5.\n    // therefore, we have 1 -> 2 -> 3 -> 5 at the end\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n        // move fast pointer to the n + 1 element\n        // now the distance between slow and fast pointer is n nodes\n        while (n--) fast = fast->next;\n        // if fast reached the end, we need to remove the first element\n        // e.g. head = [1], n = 1\n        if (fast == nullptr) return head->next;\n        // move both pointers at the same time until the fast pointer reaches the end\n        while (fast->next != nullptr) {\n            fast = fast->next;\n            slow = slow->next;\n        }\n        // slow pointer will be pointing to the node before the one to be removed\n        // then we update the next node of the slow pointer\n        slow->next = slow->next->next;\n        return head;\n    }\n};\n"))),(0,a.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n// Time Complexity: O(N) where N is the number of nodes\n// Space Complexity: O(1)\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode slow = head;\n        ListNode fast = head;\n        // move fast pointer to the n + 1 element\n        // now the distance between slow and fast pointer is n nodes\n        for (int i = 0; i < n; i++) fast = fast.next;\n        // if fast reached the end, we need to remove the first element\n        // e.g. head = [1], n = 1\n        if (fast == null) return head.next;\n        // move both pointers at the same time until\n        // the fast pointer reaches the end\n        while (fast.next != null) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n        // slow pointer will be pointing to the node before the one to be removed\n        // then we update the next node of the slow pointer\n        slow.next = slow.next.next;\n        return head;\n    }\n}\n"))),(0,a.kt)(h,{value:"go",label:"Go",mdxType:"TabItem"},(0,a.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\n\n// Time Complexity: O(N) where N is the number of nodes\n// Space Complexity: O(1)\n\n// the general idea is to use fast & slow pointers\n// 1. traverse L - n nodes from the start of the list using fast pointer\n// where L is the length of the linked list\n// e.g. in example 1, the fast pointer will be at node 3 while slower pointer remains at node 1\n// 2. traverse slow pointer until fast pointer reaches the last node\n// e.g. in example 1, the fast pointer will be at node 5 while slower pointer will be at node 3\n// 3. update slow next node\n// e.g. in example 1, the slower pointer is at node 3 now. we link the next node to node 5.\n// therefore, we have 1 -> 2 -> 3 -> 5 at the end\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n    slow := head\n    fast := head\n    // move fast pointer to the n + 1 element\n    // now the distance between slow and fast pointer is n nodes\n    for i := 0; i < n; i++ {\n        fast = fast.Next\n    }\n    // if fast reached the end, we need to remove the first element\n    // e.g. head = [1], n = 1\n    if fast == nil {\n        return head.Next\n    }\n    // move both pointers at the same time until\n    // the fast pointer reaches the end\n    for fast.Next != nil {\n        fast = fast.Next\n        slow = slow.Next\n    }\n    // slow pointer will be pointing to the node before to one to be removed\n    // then we update the next node of the slow pointer\n    slow.Next = slow.Next.Next\n    return head\n}\n"))),(0,a.kt)(h,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\n# Time Complexity: O(N) where N is the number of nodes\n# Space Complexity: O(1)\nclass Solution:\n    # the general idea is to use fast & slow pointers\n    # 1. traverse L - n nodes from the start of the list using fast pointer\n    # where L is the length of the linked list\n    # e.g. in example 1, the fast pointer will be at node 3 while slower pointer remains at node 1\n    # 2. traverse slow pointer until fast pointer reaches the last node\n    # e.g. in example 1, the fast pointer will be at node 5 while slower pointer will be at node 3\n    # 3. update slow next node\n    # e.g. in example 1, the slower pointer is at node 3 now. we link the next node to node 5.\n    # therefore, we have 1 -> 2 -> 3 -> 5 at the end\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        slow = fast = head\n        # move fast pointer to the n + 1 element\n        # now the distance between slow and fast pointer is n nodes\n        for i in range(n): fast = fast.next\n        # if fast reached the end, we need to remove the first element\n        # e.g. head = [1], n = 1\n        if fast is None: return head.next\n        # move both pointers at the same time until the fast pointer reaches the end\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n        # slow pointer will be pointing to the node before the one to be removed\n        # then we update the next node of the slow pointer\n        slow.next = slow.next.next\n        return head\n"))),(0,a.kt)(h,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)(u,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function (head, n) {\n  let slow = head;\n  let fast = head;\n  for (i = 0; i < n; i++) {\n    fast = fast.next;\n  }\n  if (fast == null) {\n    return head.next;\n  }\n  while (fast.next) {\n    slow = slow.next;\n    fast = fast.next;\n  }\n  slow.next = slow.next.next;\n  return head;\n};\n")))),(0,a.kt)("h2",{id:"approach-2-iteration-with-one-pass-solution"},"Approach 2: Iteration with One Pass Solution"),(0,a.kt)("p",null,"Decrement N and iterate fast and slow pointers, but only start slow pointer once N hit zero.."),(0,a.kt)("p",null,"As stated in Example 1: ",(0,a.kt)("inlineCode",{parentName:"p"},"1 -> 2 -> 3 -> 4 -> 5"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"n = 2")),(0,a.kt)("p",null,"Size of the linked list is $5$, and remove 2nd Node ($4$) from the last, so we need to stop at 3rd Node ($3$) from first when we iterate."),(0,a.kt)("p",null,"Iterate with fast pointer, till ",(0,a.kt)("inlineCode",{parentName:"p"},"N")," becomes $0$, fast pointer move to 3rd Node ($3$) then start with slow pointer."),(0,a.kt)("p",null,"Fast pointer is $2$ steps away to reach end (from the current 3rd Node ($3$)). While we iterate till last node, fast pointer reach end at 5th node ($5$) and eventually slow pointer stops at 3rd Node (3), finally change the pointer to the ",(0,a.kt)("strong",{parentName:"p"},"next next node"),", that's it."),(0,a.kt)("p",null,"Time Complexity: $O(n)$, where $n$ - # of nodes in the list"),(0,a.kt)("p",null,"Space complexity: $O(1)$"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(h,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(u,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        // Dummy head pointer to return head reference at the last\n        ListNode current = new ListNode();\n        current.next = head;\n        // Initialize slow and fast pointer to dummy head\n        ListNode slow = current, fast = current;\n        while (fast.next != null) {\n            fast = fast.next;\n            if (n <= 0) {\n                slow = slow.next;\n            }\n            n -= 1;\n        }\n        slow.next = slow.next.next;\n        // Head reference\n        return current.next;\n    }\n}\n"))),(0,a.kt)(h,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(u,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\n        dummy = ListNode(next=head)\n        slow, fast = dummy, dummy\n        while fast.next:\n            fast = fast.next\n            if n <= 0:\n                slow = slow.next\n            n -= 1\n        slow.next = slow.next.next\n        return dummy.next\n"))),(0,a.kt)(h,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)(u,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} n\n * @return {ListNode}\n */\nvar removeNthFromEnd = function(head, n) {\n    let dummy = new ListNode();\n    dummy.next = head;\n    let slow = dummy, fast = dummy;\n    while (fast.next) {\n        fast = fast.next;\n        if (n <= 0) {\n            slow = slow.next;\n        }\n        n--;\n    }\n    slow.next = slow.next.next;\n    return dummy.next;\n};\n"))),(0,a.kt)(h,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(u,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode();\n        dummy->next = head;\n        auto slow = dummy, fast = dummy;\n        while (fast->next) {\n            fast = fast->next;\n            if (n <= 0) {\n                slow = slow->next;\n            }\n            n--;\n        }\n        slow->next= slow->next->next;\n        return dummy->next;\n    }\n};\n")))))}w.isMDXComponent=!0}}]);