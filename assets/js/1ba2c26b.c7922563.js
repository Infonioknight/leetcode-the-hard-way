"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[13891],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=u(n),m=a,h=s["".concat(p,".").concat(m)]||s[m]||d[m]||o;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[s]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},56519:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>f,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/rotate-list/"},l="0061 - Rotate List (Medium)",i={unversionedId:"0000-0099/rotate-list-medium",id:"0000-0099/rotate-list-medium",title:"0061 - Rotate List (Medium)",description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/rotate-list/",source:"@site/solutions/0000-0099/0061-rotate-list-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/rotate-list-medium",permalink:"/solutions/0000-0099/rotate-list-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0061-rotate-list-medium.md",tags:[],version:"current",sidebarPosition:61,frontMatter:{description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/rotate-list/"},sidebar:"tutorialSidebar",previous:{title:"0057 - Insert Interval (Medium)",permalink:"/solutions/0000-0099/insert-interval-medium"},next:{title:"0062 - Unique Paths (Medium)",permalink:"/solutions/0000-0099/unique-paths-medium"}},p={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Connect and Cut",id:"approach-1-connect-and-cut",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},s=c("Tabs"),d=c("TabItem"),m=c("SolutionAuthor"),h={toc:u},k="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(k,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0061---rotate-list-medium"},"0061 - Rotate List (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/rotate-list/"},"https://leetcode.com/problems/rotate-list/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given the ",(0,a.kt)("inlineCode",{parentName:"p"},"head")," of a linked list, rotate the list to the right by ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," places."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: head = [1,2,3,4,5], k = 2\nOutput: [4,5,1,2,3]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: head = [0,1,2], k = 4\nOutput: [2,0,1]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the list is in the range ",(0,a.kt)("inlineCode",{parentName:"li"},"[0, 500]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-100 <= Node.val <= 100")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= k <= 2 * 10^9"))),(0,a.kt)("h2",{id:"approach-1-connect-and-cut"},"Approach 1: Connect and Cut"),(0,a.kt)("p",null,"First we iterate each node till the end and connect the tail to the head. At the same time we calculate how many nodes there, says $$n$$. After that, we find a point to cut the list. The point to cut is $$n - k \\mod n$$. As $$k$$ can be greater or equal to $$n$$, so the new head will be located at $$n - k \\mod n$$. Then we link the new tail->next to null and return the new head."),(0,a.kt)(s,{mdxType:"Tabs"},(0,a.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        if (!head) return NULL;\n        ListNode *p = head;\n        int n = 1;\n        while (p->next) {\n            p = p->next;\n            n++;\n        }\n        // connect tail to head - like a ring\n        p->next = head;\n        // find the location to cut\n        k = len - k % len;\n        // move to that location\n        while (k--) p = p->next;\n        // p->next is the new head\n        head = p->next;\n        // make it as the new tail\n        p->next = NULL;\n        // return the new head\n        return head;\n    }\n};\n"))),(0,a.kt)(d,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(m,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        curr = head\n        n = 1\n        if not head: return None\n        while curr.next:\n            curr = curr.next\n            n += 1\n        curr.next = head\n        k = n - k % n\n        while k:\n            curr = curr.next\n            k -= 1\n        head = curr.next\n        curr.next = None\n        return head\n"))),(0,a.kt)(d,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)(m,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar rotateRight = function(head, k) {\n    let curr = head;\n    let n = 1;\n    if (!head) return null;\n    while (curr.next) {\n        curr = curr.next;\n        n++;\n    }\n    curr.next = head;\n    k = n - k % n;\n    while (k) {\n        curr = curr.next;\n        k--;\n    }\n    head = curr.next;\n    curr.next = null;\n    return head;\n}\n")))))}f.isMDXComponent=!0}}]);