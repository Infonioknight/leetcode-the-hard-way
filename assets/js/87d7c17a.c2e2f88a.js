"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[249],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,h=u["".concat(p,".").concat(d)]||u[d]||c[d]||o;return n?r.createElement(h,i(i({ref:t},m),{},{components:n})):r.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @jit | https://leetcode.com/problems/knight-dialer/",tags:["Dynamic Programming"]},i="0935 - Knight Dialer (Medium)",l={unversionedId:"0900-0999/knight-dialer-medium",id:"0900-0999/knight-dialer-medium",title:"0935 - Knight Dialer (Medium)",description:"Author: @jit | https://leetcode.com/problems/knight-dialer/",source:"@site/solutions/0900-0999/0935-knight-dialer-medium.md",sourceDirName:"0900-0999",slug:"/0900-0999/knight-dialer-medium",permalink:"/solutions/0900-0999/knight-dialer-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0900-0999/0935-knight-dialer-medium.md",tags:[{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"}],version:"current",sidebarPosition:935,frontMatter:{description:"Author: @jit | https://leetcode.com/problems/knight-dialer/",tags:["Dynamic Programming"]},sidebar:"tutorialSidebar",previous:{title:"0926 - Flip String to Monotone Increasing (Medium)",permalink:"/solutions/0900-0999/flip-string-to-monotone-increasing-medium"},next:{title:"0936 - Stamping The Sequence (Hard)",permalink:"/solutions/0900-0999/stamping-the-sequence-hard"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: TBC",id:"approach-1-tbc",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=m("Tabs"),c=m("TabItem"),d=m("SolutionAuthor"),h={toc:s},g="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0935---knight-dialer-medium"},"0935 - Knight Dialer (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/knight-dialer/"},"https://leetcode.com/problems/knight-dialer/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"The chess knight has a ",(0,a.kt)("strong",{parentName:"p"},"unique movement"),",\xa0it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an ",(0,a.kt)("strong",{parentName:"p"},"L"),"). The possible movements of chess knight are shown in this diagaram:"),(0,a.kt)("p",null,"A chess knight can move as indicated in the chess diagram below:"),(0,a.kt)("p",null,"We have a chess knight and a phone pad as shown below, the knight ",(0,a.kt)("strong",{parentName:"p"},"can only stand on a numeric cell"),"\xa0(i.e. blue cell)."),(0,a.kt)("p",null,"Given an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),", return how many distinct phone numbers of length ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," we can dial."),(0,a.kt)("p",null,"You are allowed to place the knight ",(0,a.kt)("strong",{parentName:"p"},"on any numeric cell")," initially and then you should perform ",(0,a.kt)("inlineCode",{parentName:"p"},"n - 1")," jumps to dial a number of length ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),". All jumps should be ",(0,a.kt)("strong",{parentName:"p"},"valid")," knight jumps."),(0,a.kt)("p",null,"As the answer may be very large, ",(0,a.kt)("strong",{parentName:"p"},"return the answer modulo")," ",(0,a.kt)("inlineCode",{parentName:"p"},"109 + 7"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 1\nOutput: 10\nExplanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 2\nOutput: 20\nExplanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 3131\nOutput: 136006598\nExplanation: Please take care of the mod.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 5000"))),(0,a.kt)("h2",{id:"approach-1-tbc"},"Approach 1: TBC"),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(c,{value:"ruby",label:"Ruby",mdxType:"TabItem"},(0,a.kt)(d,{name:"@jit",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'matrix'\n\n# Using recurrence relations! We can use a 10x10 matrix\n# to encode all 10 distinct letters, or decompose into\n# 5 distinct states:\n\n# 1) [1, 3, 7, 9] => transitions to state (2) and (3)\n# 2) [2, 8]       => transitions to state (1) two ways\n# 3) [4, 6]       => transitions to state (1) two ways and state (4)\n# 4) [0]          => transitions to state (3) two ways\n# 5) [5]          => cannot transition\ndef knight_dialer(n)\n  init = Matrix[\n    [4, 0, 0, 0, 0],\n    [0, 2, 0, 0, 0],\n    [0, 0, 2, 0, 0],\n    [0, 0, 0, 1, 0],\n    [0, 0, 0, 0, 1]\n  ]\n\n  trans = Matrix[\n    [0, 1, 1, 0, 0],\n    [2, 0, 0, 0, 0],\n    [2, 0, 0, 1, 0],\n    [0, 0, 2, 0, 0],\n    [0, 0, 0, 0, 0]\n  ]\n\n  (init * trans ** (n - 1)).sum % 1_000_000_007\nend\n")))))}k.isMDXComponent=!0}}]);