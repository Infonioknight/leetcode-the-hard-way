"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[83917],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(t),u=a,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||l;return t?r.createElement(h,o(o({ref:n},c),{},{components:t})):r.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[m]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},24592:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const l={description:"Author: @wingkwong | https://leetcode.com/problems/cells-in-a-range-on-an-excel-sheet/"},o="2194 - Cells in a Range on an Excel Sheet (Easy)",i={unversionedId:"2100-2199/cells-in-a-range-on-an-excel-sheet-easy",id:"2100-2199/cells-in-a-range-on-an-excel-sheet-easy",title:"2194 - Cells in a Range on an Excel Sheet (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/cells-in-a-range-on-an-excel-sheet/",source:"@site/solutions/2100-2199/2194-cells-in-a-range-on-an-excel-sheet-easy.md",sourceDirName:"2100-2199",slug:"/2100-2199/cells-in-a-range-on-an-excel-sheet-easy",permalink:"/solutions/2100-2199/cells-in-a-range-on-an-excel-sheet-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2194-cells-in-a-range-on-an-excel-sheet-easy.md",tags:[],version:"current",sidebarPosition:2194,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/cells-in-a-range-on-an-excel-sheet/"},sidebar:"tutorialSidebar",previous:{title:"2193 - Minimum Number of Moves to Make Palindrome (Hard)",permalink:"/solutions/2100-2199/minimum-number-of-moves-to-make-palindrome-hard"},next:{title:"2195 - Append K Integers With Minimal Sum (Medium)",permalink:"/solutions/2100-2199/append-k-integers-with-minimal-sum-medium"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Loops",id:"approach-1-loops",level:2}],c=(m="SolutionAuthor",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var m;const d={toc:p},u="wrapper";function h(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2194---cells-in-a-range-on-an-excel-sheet-easy"},"2194 - Cells in a Range on an Excel Sheet (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/cells-in-a-range-on-an-excel-sheet/"},"https://leetcode.com/problems/cells-in-a-range-on-an-excel-sheet/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"A cell ",(0,a.kt)("inlineCode",{parentName:"p"},"(r, c)")," of an excel sheet is represented as a string ",(0,a.kt)("inlineCode",{parentName:"p"},'"<col><row>"')," where:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"<col>")," denotes the column number ",(0,a.kt)("inlineCode",{parentName:"li"},"c")," of the cell. It is represented by ",(0,a.kt)("strong",{parentName:"li"},"alphabetical letters"),".",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"For example, the ",(0,a.kt)("inlineCode",{parentName:"li"},"1st")," column is denoted by ",(0,a.kt)("inlineCode",{parentName:"li"},"'A'"),", the ",(0,a.kt)("inlineCode",{parentName:"li"},"2nd")," by ",(0,a.kt)("inlineCode",{parentName:"li"},"'B'"),", the ",(0,a.kt)("inlineCode",{parentName:"li"},"3rd")," by ",(0,a.kt)("inlineCode",{parentName:"li"},"'C'"),", and so on."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"<row>")," is the row number ",(0,a.kt)("inlineCode",{parentName:"li"},"r")," of the cell. The ",(0,a.kt)("inlineCode",{parentName:"li"},"rth")," row is represented by the ",(0,a.kt)("strong",{parentName:"li"},"integer")," ",(0,a.kt)("inlineCode",{parentName:"li"},"r"),".")),(0,a.kt)("p",null,"You are given a string ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," in the format ",(0,a.kt)("inlineCode",{parentName:"p"},'"<col1><row1>:<col2><row2>"'),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"<col1>")," represents the column ",(0,a.kt)("inlineCode",{parentName:"p"},"c1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"<row1>")," represents the row ",(0,a.kt)("inlineCode",{parentName:"p"},"r1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"<col2>")," represents the column ",(0,a.kt)("inlineCode",{parentName:"p"},"c2"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"<row2>")," represents the row ",(0,a.kt)("inlineCode",{parentName:"p"},"r2"),", such that ",(0,a.kt)("inlineCode",{parentName:"p"},"r1 <= r2")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"c1 <= c2"),"."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"list of cells"))," ",(0,a.kt)("inlineCode",{parentName:"p"},"(x, y)")," ",(0,a.kt)("em",{parentName:"p"},"such that")," ",(0,a.kt)("inlineCode",{parentName:"p"},"r1 <= x <= r2")," ",(0,a.kt)("em",{parentName:"p"},"and")," ",(0,a.kt)("inlineCode",{parentName:"p"},"c1 <= y <= c2"),". The cells should be represented as ",(0,a.kt)("strong",{parentName:"p"},"strings")," in the format mentioned above and be sorted in ",(0,a.kt)("strong",{parentName:"p"},"non-decreasing")," order first by columns and then by rows."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/02/08/ex1drawio.png",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "K1:L2"\nOutput: ["K1","K2","L1","L2"]\nExplanation:\nThe above diagram shows the cells which should be present in the list.\nThe red arrows denote the order in which the cells should be presented.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/02/09/exam2drawio.png",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "A1:F1"\nOutput: ["A1","B1","C1","D1","E1","F1"]\nExplanation:\nThe above diagram shows the cells which should be present in the list.\nThe red arrow denotes the order in which the cells should be presented.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s.length == 5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"'A' <= s[0] <= s[3] <= 'Z'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"'1' <= s[1] <= s[4] <= '9'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s")," consists of uppercase English letters, digits and ",(0,a.kt)("inlineCode",{parentName:"li"},"':'"),".")),(0,a.kt)("h2",{id:"approach-1-loops"},"Approach 1: Loops"),(0,a.kt)("p",null,"Iterate each letter from $$s","[0]","$$ to $$s","[3]","$$ and iterate each number from $$s","[1]","$$ to $$s","[4]","$$ to build the answer."),(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<string> cellsInRange(string s) {\n        vector<string> ans;\n        // iterate each letter\n        for (char x = s[0]; x <= s[3]; x++) {\n            // iterate each number\n            for (int y = s[1] - '0'; y <= s[4] - '0'; y++) {\n                // build the answer\n                ans.push_back(x + to_string(y));\n            }\n        }\n        return ans;\n    }\n};\n")))}h.isMDXComponent=!0}}]);