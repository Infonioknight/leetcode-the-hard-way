"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[14232],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,k=c["".concat(s,".").concat(d)]||c[d]||u[d]||o;return n?i.createElement(k,a(a({ref:t},m),{},{components:n})):i.createElement(k,a({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},23637:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>k,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=n(87462),r=(n(67294),n(3905));const o={description:"Author: @DoubleSpicy | https://leetcode.com/problems/remove-k-digits/"},a="0402 - Remove K Digits (Medium)",l={unversionedId:"0400-0499/remove-k-digits-medium",id:"0400-0499/remove-k-digits-medium",title:"0402 - Remove K Digits (Medium)",description:"Author: @DoubleSpicy | https://leetcode.com/problems/remove-k-digits/",source:"@site/solutions/0400-0499/0402-remove-k-digits-medium.md",sourceDirName:"0400-0499",slug:"/0400-0499/remove-k-digits-medium",permalink:"/solutions/0400-0499/remove-k-digits-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0402-remove-k-digits-medium.md",tags:[],version:"current",sidebarPosition:402,frontMatter:{description:"Author: @DoubleSpicy | https://leetcode.com/problems/remove-k-digits/"},sidebar:"tutorialSidebar",previous:{title:"0400 - 0499",permalink:"/solutions/category/0400---0499"},next:{title:"0403 - Frog Jump (Hard)",permalink:"/solutions/0400-0499/Frog-Jump"}},s={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Monotonic Stack",id:"approach-1-monotonic-stack",level:2}],m=(c="SolutionAuthor",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var c;const u={toc:p},d="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0402---remove-k-digits-medium"},"0402 - Remove K Digits (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/remove-k-digits/"},"https://leetcode.com/problems/remove-k-digits/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given string num representing a non-negative integer ",(0,r.kt)("inlineCode",{parentName:"p"},"num"),", and an integer ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,r.kt)("em",{parentName:"p"},"the smallest possible integer after removing")," ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," ",(0,r.kt)("em",{parentName:"p"},"digits from")," ",(0,r.kt)("inlineCode",{parentName:"p"},"num"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: num = "1432219", k = 3\nOutput: "1219"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: num = "10200", k = 1\nOutput: "200"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: num = "10", k = 2\nOutput: "0"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= k <= num.length <= 10^5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"num")," consists of only digits."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"num")," does not have any leading zeros except for the zero itself.")),(0,r.kt)("h2",{id:"approach-1-monotonic-stack"},"Approach 1: Monotonic Stack"),(0,r.kt)("p",null,"Only a (local) monotonically increasing stack is allowed. i.e. $$num","[i]"," \\geq num","[j]","$$ for any $$i > j$$."),(0,r.kt)("p",null,"For example: ",(0,r.kt)("inlineCode",{parentName:"p"},"142"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"k = 1"),", smallest value possible is 12 because 12 is the smallest among 42, 12 and 14 (removing 1st, 2nd and 3rd digit respectively)."),(0,r.kt)("p",null,"Explanation: we only care for the local monotonicity because when we have a number split into two part, ab $$\\rArr$$ a, b, when each of digit inside a and b is monotonically increasing, ab is also smallest. This is true no matter is the input number ab itself is monotonic or not."),(0,r.kt)("p",null,"After that, if k > 0, i.e. some more digits need to be removed, we remove the trailing k digits. This is true because in such case the remaining digits must be monotonically increasing. Remove the least significant digits gives the smallest value."),(0,r.kt)("p",null,"The time and space complexity is $$O(N)$$."),(0,r.kt)("p",null,"p.s. ",(0,r.kt)("inlineCode",{parentName:"p"},"vector<char>")," is used instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"stack<char>")," because we can get iterator ",(0,r.kt)("inlineCode",{parentName:"p"},"vector<char>::begin()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"vector<char>::end()")," while stack doesn't have iterators. One line conversion to string could be done by ",(0,r.kt)("inlineCode",{parentName:"p"},"string ansStr(ans.begin()+idx, ans.end());"),"."),(0,r.kt)(m,{name:"@DoubleSpicy",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string removeKdigits(string num, int k) {\n        vector<char> ans = {num[0]};\n        // do the monotoically increasing thing\n        for (int i = 1; i < num.length(); i++){\n            while(k > 0 && ans.size() > 0 && num[i] < ans.back()){\n                ans.pop_back();\n                k--;\n            }\n            ans.push_back(num[i]);\n        }\n\n        // if there are still some more digits that need to be removed, \n        // remove k more trailing digits\n        while(k--){\n            ans.pop_back();\n        }\n\n        // remove leading zeroes\n        int idx = 0;\n        while(idx < ans.size()){\n            if (ans[idx] == '0'){\n                idx++;\n            }\n            else{\n                break;\n            }\n        }\n\n        string ansStr(ans.begin()+idx, ans.end());\n        \n        if (ansStr.length() == 0){\n          // if everything is popped, give it back a 0.\n          // e.g. 12, k = 2\n            ansStr += '0';\n        }\n        return ansStr;\n    }\n};\n")))}k.isMDXComponent=!0}}]);