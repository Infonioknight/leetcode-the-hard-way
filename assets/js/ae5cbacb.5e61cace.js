"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[49658],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var s=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=s.createContext({}),p=function(e){var t=s.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return s.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return n?s.createElement(f,l(l({ref:t},c),{},{components:n})):s.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a[u]="string"==typeof e?e:r,l[1]=a;for(var p=2;p<o;p++)l[p]=n[p];return s.createElement.apply(null,l)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},59444:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>k,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var s=n(87462),r=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/successful-pairs-of-spells-and-potions/",tags:["Array","Two Pointers","Binary Search","Sorting"]},l="2300 - Successful Pairs of Spells and Potions (Medium)",a={unversionedId:"2300-2399/successful-pairs-of-spells-and-potions-medium",id:"2300-2399/successful-pairs-of-spells-and-potions-medium",title:"2300 - Successful Pairs of Spells and Potions (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/successful-pairs-of-spells-and-potions/",source:"@site/solutions/2300-2399/2300-successful-pairs-of-spells-and-potions-medium.md",sourceDirName:"2300-2399",slug:"/2300-2399/successful-pairs-of-spells-and-potions-medium",permalink:"/solutions/2300-2399/successful-pairs-of-spells-and-potions-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2300-2399/2300-successful-pairs-of-spells-and-potions-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Two Pointers",permalink:"/solutions/tags/two-pointers"},{label:"Binary Search",permalink:"/solutions/tags/binary-search"},{label:"Sorting",permalink:"/solutions/tags/sorting"}],version:"current",sidebarPosition:2300,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/successful-pairs-of-spells-and-potions/",tags:["Array","Two Pointers","Binary Search","Sorting"]},sidebar:"tutorialSidebar",previous:{title:"2300 - 2399",permalink:"/solutions/category/2300---2399"},next:{title:"2302 - Count Subarrays With Score Less Than K (Hard)",permalink:"/solutions/2300-2399/count-subarrays-with-score-less-than-k"}},i={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=c("Tabs"),m=c("TabItem"),d=c("SolutionAuthor"),f={toc:p},h="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,s.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2300---successful-pairs-of-spells-and-potions-medium"},"2300 - Successful Pairs of Spells and Potions (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/successful-pairs-of-spells-and-potions/"},"https://leetcode.com/problems/successful-pairs-of-spells-and-potions/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given two positive integer arrays ",(0,r.kt)("inlineCode",{parentName:"p"},"spells")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"potions"),", of length ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"m")," respectively, where ",(0,r.kt)("inlineCode",{parentName:"p"},"spells[i]")," represents the strength of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ith")," spell and ",(0,r.kt)("inlineCode",{parentName:"p"},"potions[j]")," represents the strength of the ",(0,r.kt)("inlineCode",{parentName:"p"},"jth")," potion."),(0,r.kt)("p",null,"You are also given an integer ",(0,r.kt)("inlineCode",{parentName:"p"},"success"),". A spell and potion pair is considered ",(0,r.kt)("strong",{parentName:"p"},"successful")," if the ",(0,r.kt)("strong",{parentName:"p"},"product")," of their strengths is ",(0,r.kt)("strong",{parentName:"p"},"at least")," ",(0,r.kt)("inlineCode",{parentName:"p"},"success"),"."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},"an integer array"),(0,r.kt)("inlineCode",{parentName:"p"},"pairs"),(0,r.kt)("em",{parentName:"p"},"of length"),(0,r.kt)("inlineCode",{parentName:"p"},"n"),(0,r.kt)("em",{parentName:"p"},"where"),(0,r.kt)("inlineCode",{parentName:"p"},"pairs[i]"),(0,r.kt)("em",{parentName:"p"},"is the number of ",(0,r.kt)("strong",{parentName:"em"},"potions")," that will form a successful pair with the"),(0,r.kt)("inlineCode",{parentName:"p"},"ith"),(0,r.kt)("em",{parentName:"p"},"spell.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7\nOutput: [4,0,3]\nExplanation:\n- 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful.\n- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.\n- 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful.\nThus, [4,0,3] is returned.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: spells = [3,1,2], potions = [8,5,8], success = 16\nOutput: [2,0,2]\nExplanation:\n- 0th spell: 3 * [8,5,8] = [24,15,24]. 2 pairs are successful.\n- 1st spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. \n- 2nd spell: 2 * [8,5,8] = [16,10,16]. 2 pairs are successful. \nThus, [2,0,2] is returned.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"n == spells.length")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"m == potions.length")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= n, m <= 105")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= spells[i], potions[i] <= 105")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= success <= 1010"))),(0,r.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> successfulPairs(vector<int>& spells, vector<int>& potions, long long success) {\n        vector<int> ans;\n        // sort the potions since we need to binary search on it\n        sort(potions.begin(), potions.end());\n        for (auto spell : spells) {\n            // we need to binary search the first position closest to `minPotion`\n            // which is the value to fulfil the requirment\n            // spells[i] * minPotion >= success\n            // minPotion = ceil(success / spells[i])\n            // ceil(success / spells[i]) can be written as (success + spell - 1) // spell\n            // since potions after `minPotion` will be valid as well\n            // the answer is simply m - index from the binary search\n            ans.push_back(\n                potions.end() - \n                lower_bound(potions.begin(), potions.end(), (spell + success - 1) / spell)\n            );\n        }\n        return ans;\n    }\n};\n"))),(0,r.kt)(m,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def successfulPairs(self, spells: List[int], potions: List[int], success: int) -> List[int]:\n        m = len(potions)\n        res = []\n        potions.sort()\n        for spell in spells:\n            mi = (success + spell - 1) // spell\n            res.append(m - bisect_left(potions, mi))\n        return res\n")))))}k.isMDXComponent=!0}}]);