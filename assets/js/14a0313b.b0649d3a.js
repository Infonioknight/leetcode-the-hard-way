"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[34407],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=u(n),c=a,h=m["".concat(s,".").concat(c)]||m[c]||p[c]||o;return n?r.createElement(h,l(l({ref:t},d),{},{components:n})):r.createElement(h,l({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},49183:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>b,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @ColeB2, @radojicic23 | https://leetcode.com/problems/add-two-numbers/",tags:["Linked List","Math","Recursion"]},l="0002 - Add Two Numbers (Medium)",i={unversionedId:"0000-0099/add-two-numbers-medium",id:"0000-0099/add-two-numbers-medium",title:"0002 - Add Two Numbers (Medium)",description:"Author: @ColeB2, @radojicic23 | https://leetcode.com/problems/add-two-numbers/",source:"@site/solutions/0000-0099/0002-add-two-numbers-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/add-two-numbers-medium",permalink:"/solutions/0000-0099/add-two-numbers-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0002-add-two-numbers-medium.md",tags:[{label:"Linked List",permalink:"/solutions/tags/linked-list"},{label:"Math",permalink:"/solutions/tags/math"},{label:"Recursion",permalink:"/solutions/tags/recursion"}],version:"current",sidebarPosition:2,frontMatter:{description:"Author: @ColeB2, @radojicic23 | https://leetcode.com/problems/add-two-numbers/",tags:["Linked List","Math","Recursion"]},sidebar:"tutorialSidebar",previous:{title:"0001 - Two Sum (Easy)",permalink:"/solutions/0000-0099/two-sum"},next:{title:"0003 - Longest Substring Without Repeating Characters (Medium)",permalink:"/solutions/0000-0099/longest-substring-without-repeating-characters-medium"}},s={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Iterative",id:"approach-1-iterative",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},m=d("Tabs"),p=d("TabItem"),c=d("SolutionAuthor"),h={toc:u},v="wrapper";function b(e){let{components:t,...n}=e;return(0,a.kt)(v,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0002---add-two-numbers-medium"},"0002 - Add Two Numbers (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/add-two-numbers/"},"https://leetcode.com/problems/add-two-numbers/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given two ",(0,a.kt)("strong",{parentName:"p"},"non-empty")," linked lists representing two non-negative integers. The digits are stored in ",(0,a.kt)("strong",{parentName:"p"},"reverse order"),", and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list."),(0,a.kt)("p",null,"You may assume the two numbers do not contain any leading zero, except the number 0 itself."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: l1 = [0], l2 = [0]\nOutput: [0]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in each linked list is in the range ",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 100]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= Node.val <= 9")),(0,a.kt)("li",{parentName:"ul"},"It is guaranteed that the list represents a number that does not have leading zeros.")),(0,a.kt)("h2",{id:"approach-1-iterative"},"Approach 1: Iterative"),(0,a.kt)("p",null,"So we must add 2 numbers together, given in reverse, and then return it. So just like adding 2 numbers on a piece of paper, we must start with the one's digits, and incrementally move up to the tens, hundreds etc. We must also track a carry-over number in case 2 numbers added together go over 9 and reach double digits. We know then if we add 2 digits plus a carry, that the largest our future carry can ever be is 1 as $$9 + 9 + 1 = 19$$, so our carry will never be anything either than 1 or a 0."),(0,a.kt)("p",null,"So knowing that we know we can use a dummy node to help with returning the head, and a variable to track our current node as well as a variable to track our carry-over. Then inside our loop we have 3 main steps."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Get all 3 digits, that is $$l1.val$$, $$l2.val$$ and $$carry$$. Make sure they are valid, and if not we can set them to 0."),(0,a.kt)("li",{parentName:"ol"},"Get our result. Once we have our 3 digits, we can add them and have a digit for our next node. Note that the digit will be $$ans \\mod  10$$ as we want just the one's digit. We will also have to update our carry variable to be a 1 or a 0."),(0,a.kt)("li",{parentName:"ol"},"Finally we can move all our pointers, that is update our l1, l2 and current node pointer, making sure to only move l1 and l2 if they are nodes.")),(0,a.kt)("p",null,"Time Complexity: $$O(max(m,n))$$. We know that our time will depend on whichever linked list is longer, which will be $$max(m,n) + 1$$."),(0,a.kt)("p",null,"Space Complexity: $$O(max(m,n))$$. Similarly we know our answer will have the same amount of nodes as the longest number, $$max(m,n) + 1$$."),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(p,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)(c,{name:"@ColeB2",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        # first we create a dummy node, and point our current node to the dummy\n        # as well. This helps with the return as we can just return dummy.next\n        # and not lose our head node.\n        dummy = node = ListNode(val=None)\n        # track our carry value. It will only ever be a 1 or a 0.\n        carry = 0\n        # Continue our loop as long as we have values to add.\n        while l1 or l2 or carry:\n            # Get our linked list values. If the list is no longer valid default\n            # the value to 0.\n            n1 = l1.val if l1 else 0\n            n2 = l2.val if l2 else 0\n            # Add our values together.\n            num = n1 + n2 + carry\n            # Update our carry for the next loop. It can only ever be 1 or 0.\n            # Python integer division will mean anything < 10 will be 0 and >= 1.\n            carry = num // 10\n            # Get the one's column of the digit. If it is 2 digits, ie 10,11,12 etc.\n            # We only want the one's column so taking the modulo 10 of the num, will\n            # give us whatever is in the one's column.\n            digit = num % 10\n            # Create the next node, with the val being the digit we got above.\n            node.next = ListNode(digit)\n            # Update our pointers. If l1 or l2 reach the end, just set them to None.\n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n            node = node.next\n        # We created a dummy node above so we can return dummy.next as our answer.\n        return dummy.next\n"))),(0,a.kt)(p,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)(c,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    let dummy = new ListNode();\n    let curr = dummy;\n    let carry = 0;\n    while (l1 || l2 || carry) {\n        // get values if linked list is not null\n        // otherwise the value is 0\n        let v1 = l1 ? l1.val : 0;\n        let v2 = l2 ? l2.val : 0;\n        // add values \n        let value = v1 + v2 + carry;\n        // update carry value\n        // it can only be 1 or 0\n        carry = Math.floor(value / 10);\n        // our value can be two digits number\n        // we want only one's place digit \n        value %= 10;\n        // insert it into new list \n        curr.next = new ListNode(value);\n        // update pointers \n        curr = curr.next;\n        l1 = l1 ? l1.next : 0;\n        l2 = l2 ? l2.next : 0;\n    }\n    return dummy.next;\n};\n"))),(0,a.kt)(p,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(c,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode* dummy = new ListNode();\n        ListNode* curr = dummy;\n        int carry = 0;\n        while (l1 || l2 || carry) {\n            // get values if linked list is not null\n            // otherwise the value is 0\n            int v1 = l1 ? l1->val : 0;\n            int v2 = l2 ? l2->val : 0;\n            // add values\n            int value = v1 + v2 + carry;\n            // update carry value\n            // only can be 0 or 1\n            carry = floor(value / 10);\n            // value can be two digits number\n            // we only want one digit number\n            value %= 10;\n            // insert it into new linked list\n            curr->next = new ListNode(value);\n            // update pointers\n            curr = curr->next;\n            l1 = l1 ? l1->next : NULL;\n            l2 = l2 ? l2->next : NULL;\n        }\n        return dummy->next;\n    }\n};\n")))))}b.isMDXComponent=!0}}]);