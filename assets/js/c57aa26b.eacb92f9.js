"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[4090],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),u=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=u(e.components);return i.createElement(l.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=u(t),h=r,d=p["".concat(l,".").concat(h)]||p[h]||c[h]||a;return t?i.createElement(d,o(o({ref:n},m),{},{components:t})):i.createElement(d,o({ref:n},m))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<a;u++)o[u]=t[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},71374:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var i=t(87462),r=(t(67294),t(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/all-divisions-with-the-highest-score-of-a-binary-array/"},o="2155 - All Divisions With the Highest Score of a Binary Array (Medium)",s={unversionedId:"2100-2199/all-divisions-with-the-highest-score-of-a-binary-array-medium",id:"2100-2199/all-divisions-with-the-highest-score-of-a-binary-array-medium",title:"2155 - All Divisions With the Highest Score of a Binary Array (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/all-divisions-with-the-highest-score-of-a-binary-array/",source:"@site/solutions/2100-2199/2155-all-divisions-with-the-highest-score-of-a-binary-array-medium.md",sourceDirName:"2100-2199",slug:"/2100-2199/all-divisions-with-the-highest-score-of-a-binary-array-medium",permalink:"/solutions/2100-2199/all-divisions-with-the-highest-score-of-a-binary-array-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2100-2199/2155-all-divisions-with-the-highest-score-of-a-binary-array-medium.md",tags:[],version:"current",sidebarPosition:2155,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/all-divisions-with-the-highest-score-of-a-binary-array/"},sidebar:"tutorialSidebar",previous:{title:"2154 - Keep Multiplying Found Values by Two (Easy)",permalink:"/solutions/2100-2199/keep-multiplying-found-values-by-two-easy"},next:{title:"2156 - Find Substring With Given Hash Value (Medium)",permalink:"/solutions/2100-2199/find-substring-with-given-hash-value-medium"}},l={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Prefix Sum + Suffix Sum",id:"approach-1-prefix-sum--suffix-sum",level:2},{value:"Approach 2: Prefix Sum",id:"approach-2-prefix-sum",level:2},{value:"Approach 3: Counting ones and zeros",id:"approach-3-counting-ones-and-zeros",level:2},{value:"Approach 4: Counting ones",id:"approach-4-counting-ones",level:2}],m=(p="SolutionAuthor",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var p;const c={toc:u},h="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(h,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2155---all-divisions-with-the-highest-score-of-a-binary-array-medium"},"2155 - All Divisions With the Highest Score of a Binary Array (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/all-divisions-with-the-highest-score-of-a-binary-array/"},"https://leetcode.com/problems/all-divisions-with-the-highest-score-of-a-binary-array/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given a ",(0,r.kt)("strong",{parentName:"p"},"0-indexed")," binary array ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," of length ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"nums")," can be divided at index ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," (where ",(0,r.kt)("inlineCode",{parentName:"p"},"0 <= i <= n)")," into two arrays (possibly empty) ",(0,r.kt)("inlineCode",{parentName:"p"},"nums_left")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nums_right"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"numsleft")," has all the elements of ",(0,r.kt)("inlineCode",{parentName:"li"},"nums")," between index ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"i - 1")," ",(0,r.kt)("strong",{parentName:"li"},"(inclusive)"),", while ",(0,r.kt)("inlineCode",{parentName:"li"},"numsright")," has all the elements of nums between index ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"n - 1")," ",(0,r.kt)("strong",{parentName:"li"},"(inclusive)"),"."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"i == 0"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"nums_left")," is ",(0,r.kt)("strong",{parentName:"li"},"empty"),", while ",(0,r.kt)("inlineCode",{parentName:"li"},"nums_right")," has all the elements of ",(0,r.kt)("inlineCode",{parentName:"li"},"nums"),"."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"i == n"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"nums_left")," has all the elements of nums, while ",(0,r.kt)("inlineCode",{parentName:"li"},"nums_right")," is ",(0,r.kt)("strong",{parentName:"li"},"empty"),".")),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"division score")," of an index ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," is the ",(0,r.kt)("strong",{parentName:"p"},"sum")," of the number of ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"'s in ",(0,r.kt)("inlineCode",{parentName:"p"},"nums_left")," and the number of ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),"'s in ",(0,r.kt)("inlineCode",{parentName:"p"},"nums_right"),"."),(0,r.kt)("p",null,"Return ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"all distinct indices")," that have the ",(0,r.kt)("strong",{parentName:"em"},"highest")," possible ",(0,r.kt)("strong",{parentName:"em"},"division score")),". You may return the answer in ",(0,r.kt)("strong",{parentName:"p"},"any order"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [0,0,1,0]\nOutput: [2,4]\nExplanation: Division at index\n- 0: numsleft is []. numsright is [0,0,1,0]. The score is 0 + 1 = 1.\n- 1: numsleft is [0]. numsright is [0,1,0]. The score is 1 + 1 = 2.\n- 2: numsleft is [0,0]. numsright is [1,0]. The score is 2 + 1 = 3.\n- 3: numsleft is [0,0,1]. numsright is [0]. The score is 2 + 0 = 2.\n- 4: numsleft is [0,0,1,0]. numsright is []. The score is 3 + 0 = 3.\nIndices 2 and 4 both have the highest possible division score 3.\nNote the answer [4,2] would also be accepted.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [0,0,0]\nOutput: [3]\nExplanation: Division at index\n- 0: numsleft is []. numsright is [0,0,0]. The score is 0 + 0 = 0.\n- 1: numsleft is [0]. numsright is [0,0]. The score is 1 + 0 = 1.\n- 2: numsleft is [0,0]. numsright is [0]. The score is 2 + 0 = 2.\n- 3: numsleft is [0,0,0]. numsright is []. The score is 3 + 0 = 3.\nOnly index 3 has the highest possible division score 3.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 3:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: nums = [1,1]\nOutput: [0]\nExplanation: Division at index\n- 0: numsleft is []. numsright is [1,1]. The score is 0 + 2 = 2.\n- 1: numsleft is [1]. numsright is [1]. The score is 0 + 1 = 1.\n- 2: numsleft is [1,1]. numsright is []. The score is 0 + 0 = 0.\nOnly index 0 has the highest possible division score 2.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"n == nums.length")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= n <= 10^5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nums[i]")," is either ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),".")),(0,r.kt)("h2",{id:"approach-1-prefix-sum--suffix-sum"},"Approach 1: Prefix Sum + Suffix Sum"),(0,r.kt)("p",null,"Calculate the prefix sum and suffix sum first. Then construct the score (",(0,r.kt)("inlineCode",{parentName:"p"},"left[i] + right[i]"),") at each index. Find the maximum value and push all indices with such value into the final array. "),(0,r.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> maxScoreIndices(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> left(n + 1), right(n + 1), score(n + 1), ans;\n        for (int i = 1; i <= n; i++) left[i] = left[i - 1] + (nums[i - 1] == 0);\n        for (int i = n; i > 0; i--) right[i - 1] = right[i] + (nums[i - 1] == 1);\n        for (int i = 0; i <= n; i++) score[i] = left[i] + right[i];\n        int mx = *max_element(score.begin(), score.end());\n        for (int i = 0; i <= n; i++) if (score[i] == mx) ans.push_back(i);\n        return ans;\n    }\n};\n")),(0,r.kt)("h2",{id:"approach-2-prefix-sum"},"Approach 2: Prefix Sum"),(0,r.kt)("p",null,"We don't actually need to calculate suffix sum. Let $$left","[i + 1]","$$ be $$nums","[0]"," + nums","[1]"," + ... + nums","[i]","$$. For each index, there are $$i - left","[i]","$$ zeros in the left and $$left","[n]"," - left","[i]","$$ ones in the right. Therefore, we can come up with this formula: $$score","[i]"," = i - left","[i]"," + left","[n]"," - left","[i]","$$."),(0,r.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> maxScoreIndices(vector<int>& nums) {\n        int n = nums.size(), mx = 0;\n        vector<int> left(n + 1), ans;\n        for (int i = 0; i < n; i++) left[i + 1] = left[i] + nums[i];\n        for (int i = 0; i <= n; i++) {\n            int score = i - left[i] + left[n] - left[i];\n            if (score == mx) {\n                ans.push_back(i);\n            } else if (score > mx) {\n                mx = score;\n                ans.clear();\n                ans.push_back(i);\n            }\n        }\n        return ans;\n    }\n};\n")),(0,r.kt)("h2",{id:"approach-3-counting-ones-and-zeros"},"Approach 3: Counting ones and zeros"),(0,r.kt)("p",null,"If we look at the last index, we have ",(0,r.kt)("inlineCode",{parentName:"p"},"accumulate(nums.begin(), nums.end(), 0)")," ones and 0 zeros at the beginning. If we move from the right to the left, we can update ",(0,r.kt)("inlineCode",{parentName:"p"},"zero")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"one")," on the fly."),(0,r.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> maxScoreIndices(vector<int>& nums) {\n        int n = nums.size(), mx = 0;\n        int one = accumulate(nums.begin(), nums.end(), 0), zero = 0;\n        vector<int> ans;\n        for (int i = 0; i <= n; i++) {\n            int score = zero + one;\n            if (score == mx) {\n                ans.push_back(i);\n            } else if (score > mx) {\n                mx = score;\n                ans.clear();\n                ans.push_back(i);\n            }\n            if (i < n) {\n                one -= nums[i] == 1;\n                zero += nums[i] == 0;\n            }\n        }\n        return ans;\n    }\n};\n")),(0,r.kt)("h2",{id:"approach-4-counting-ones"},"Approach 4: Counting ones"),(0,r.kt)("p",null,"We can just use one variable instead of two shown in Approach 3."),(0,r.kt)(m,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> maxScoreIndices(vector<int>& nums) {\n        int n = nums.size();\n        int one = accumulate(nums.begin(), nums.end(), 0), mx = one;\n        vector<int> ans;\n        ans.push_back(0);\n        for (int i = 0; i < n; i++) {\n            one += (nums[i] == 0) - nums[i];\n            if (one == mx) {\n                ans.push_back(i + 1);\n            } else if (one > mx) {\n                mx = one;\n                ans.clear();\n                ans.push_back(i + 1);\n            }\n        }\n        return ans;\n    }\n};\n")))}d.isMDXComponent=!0}}]);