"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[14637],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=d(n),c=i,f=s["".concat(p,".").concat(c)]||s[c]||u[c]||o;return n?r.createElement(f,a(a({ref:t},m),{},{components:n})):r.createElement(f,a({ref:t},m))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:i,a[1]=l;for(var d=2;d<o;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},52665:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=n(87462),i=(n(67294),n(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/find-the-width-of-columns-of-a-grid/"},a="2639 - Find the Width of Columns of a Grid (Easy)",l={unversionedId:"2600-2699/find-the-width-of-columns-of-a-grid-easy",id:"2600-2699/find-the-width-of-columns-of-a-grid-easy",title:"2639 - Find the Width of Columns of a Grid (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/find-the-width-of-columns-of-a-grid/",source:"@site/solutions/2600-2699/2639-find-the-width-of-columns-of-a-grid-easy.md",sourceDirName:"2600-2699",slug:"/2600-2699/find-the-width-of-columns-of-a-grid-easy",permalink:"/solutions/2600-2699/find-the-width-of-columns-of-a-grid-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2600-2699/2639-find-the-width-of-columns-of-a-grid-easy.md",tags:[],version:"current",sidebarPosition:2639,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-the-width-of-columns-of-a-grid/"},sidebar:"tutorialSidebar",previous:{title:"2616 - Minimize the Maximum Difference of Pairs (Medium)",permalink:"/solutions/2600-2699/minimize-the-maximum-difference-of-pairs-medium"}},p={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Transpose and Count Digits",id:"approach-1-transpose-and-count-digits",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},s=m("Tabs"),u=m("TabItem"),c=m("SolutionAuthor"),f={toc:d},h="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(h,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2639---find-the-width-of-columns-of-a-grid-easy"},"2639 - Find the Width of Columns of a Grid (Easy)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-the-width-of-columns-of-a-grid/"},"https://leetcode.com/problems/find-the-width-of-columns-of-a-grid/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given a ",(0,i.kt)("strong",{parentName:"p"},"0-indexed")," ",(0,i.kt)("inlineCode",{parentName:"p"},"m x n")," integer matrix ",(0,i.kt)("inlineCode",{parentName:"p"},"grid"),". The width of a column is the maximum ",(0,i.kt)("strong",{parentName:"p"},"length"),"of its integers."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example, if ",(0,i.kt)("inlineCode",{parentName:"li"},"grid = [[-10], [3], [12]]"),", the width of the only column is ",(0,i.kt)("inlineCode",{parentName:"li"},"3")," since ",(0,i.kt)("inlineCode",{parentName:"li"},"-10")," is of length ",(0,i.kt)("inlineCode",{parentName:"li"},"3"),".")),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"an integer array")," ",(0,i.kt)("inlineCode",{parentName:"p"},"ans")," ",(0,i.kt)("em",{parentName:"p"},"of size")," ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," ",(0,i.kt)("em",{parentName:"p"},"where")," ",(0,i.kt)("inlineCode",{parentName:"p"},"ans[i]")," ",(0,i.kt)("em",{parentName:"p"},"is the width of the")," ",(0,i.kt)("inlineCode",{parentName:"p"},"ith")," ",(0,i.kt)("em",{parentName:"p"},"column"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"length")," of an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"len")," digits is equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"len")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," is non-negative, and ",(0,i.kt)("inlineCode",{parentName:"p"},"len + 1")," otherwise."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: grid = [[1],[22],[333]]\nOutput: [3]\nExplanation: In the 0th column, 333 is of length 3.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: grid = [[-15,1,3],[15,7,12],[5,6,-2]]\nOutput: [3,1,2]\nExplanation: \nIn the 0th column, only -15 is of length 3.\nIn the 1st column, all integers are of length 1. \nIn the 2nd column, both 12 and -2 are of length 2.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"m == grid.length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n == grid[i].length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 100")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-109 <= grid[r][c] <= 109"))),(0,i.kt)("h2",{id:"approach-1-transpose-and-count-digits"},"Approach 1: Transpose and Count Digits"),(0,i.kt)("p",null,"The idea is to first transpose ",(0,i.kt)("inlineCode",{parentName:"p"},"grid")," using ",(0,i.kt)("inlineCode",{parentName:"p"},"zip"),". Then we calculate the number of digits and take the max. Alternatively we can convert to string and check the length."),(0,i.kt)(s,{mdxType:"Tabs"},(0,i.kt)(u,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\n        def cal(x):\n            res = 0\n            if x == 0:\n                res += 1\n            if x < 0:\n                res += 1\n                x = -x\n            while x > 0:\n                x //= 10\n                res += 1\n            return res\n        # we can further simplifed to\n        # return [max(cal(y) for y in x) for x in zip(*grid)]\n        res = []\n        for x in zip(*grid):\n            mx = 1\n            for y in x:\n                mx = max(mx, cal(y))\n            res.append(mx)\n        return res\n")))))}g.isMDXComponent=!0}}]);