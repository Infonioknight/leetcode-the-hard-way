"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[21741],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=l(n),u=r,h=c["".concat(p,".").concat(u)]||c[u]||d[u]||i;return n?a.createElement(h,s(s({ref:t},m),{},{components:n})):a.createElement(h,s({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},58405:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>b,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/check-if-strings-can-be-made-equal-with-operations-ii/"},s="2840 - Check if Strings Can be Made Equal With Operations II (Medium)",o={unversionedId:"2800-2899/check-if-strings-can-be-made-equal-with-operations-ii-medium",id:"2800-2899/check-if-strings-can-be-made-equal-with-operations-ii-medium",title:"2840 - Check if Strings Can be Made Equal With Operations II (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/check-if-strings-can-be-made-equal-with-operations-ii/",source:"@site/solutions/2800-2899/2840-check-if-strings-can-be-made-equal-with-operations-ii-medium.md",sourceDirName:"2800-2899",slug:"/2800-2899/check-if-strings-can-be-made-equal-with-operations-ii-medium",permalink:"/solutions/2800-2899/check-if-strings-can-be-made-equal-with-operations-ii-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2800-2899/2840-check-if-strings-can-be-made-equal-with-operations-ii-medium.md",tags:[],version:"current",sidebarPosition:2840,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/check-if-strings-can-be-made-equal-with-operations-ii/"},sidebar:"tutorialSidebar",previous:{title:"2839 - Check if Strings Can be Made Equal With Operations I (Easy)",permalink:"/solutions/2800-2899/check-if-strings-can-be-made-equal-with-operations-i-easy"},next:{title:"2841 - Maximum Sum of Almost Unique Subarray (Medium)",permalink:"/solutions/2800-2899/maximum-sum-of-almost-unique-subarray-medium"}},p={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sorting",id:"approach-1-sorting",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=m("Tabs"),d=m("TabItem"),u=m("SolutionAuthor"),h={toc:l},k="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(k,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2840---check-if-strings-can-be-made-equal-with-operations-ii-medium"},"2840 - Check if Strings Can be Made Equal With Operations II (Medium)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/check-if-strings-can-be-made-equal-with-operations-ii/"},"https://leetcode.com/problems/check-if-strings-can-be-made-equal-with-operations-ii/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"You are given two strings ",(0,r.kt)("inlineCode",{parentName:"p"},"s1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"s2"),", both of length ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),", consisting of ",(0,r.kt)("strong",{parentName:"p"},"lowercase")," English letters."),(0,r.kt)("p",null,"You can apply the following operation on ",(0,r.kt)("strong",{parentName:"p"},"any")," of the two strings ",(0,r.kt)("strong",{parentName:"p"},"any")," number of times:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Choose any two indices ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"j")," such that ",(0,r.kt)("inlineCode",{parentName:"li"},"i < j")," and the difference ",(0,r.kt)("inlineCode",{parentName:"li"},"j - i")," is ",(0,r.kt)("strong",{parentName:"li"},"even"),", then ",(0,r.kt)("strong",{parentName:"li"},"swap")," the two characters at those indices in the string.")),(0,r.kt)("p",null,"Return ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),(0,r.kt)("em",{parentName:"p"},"if you can make the strings"),(0,r.kt)("inlineCode",{parentName:"p"},"s1"),(0,r.kt)("em",{parentName:"p"},"and"),(0,r.kt)("inlineCode",{parentName:"p"},"s2"),(0,r.kt)("em",{parentName:"p"},"equal, and"),(0,r.kt)("inlineCode",{parentName:"p"},"false"),(0,r.kt)("em",{parentName:"p"},"otherwise"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s1 = "abcdba", s2 = "cabdab"\nOutput: true\nExplanation: We can apply the following operations on s1:\n- Choose the indices i = 0, j = 2. The resulting string is s1 = "cbadba".\n- Choose the indices i = 2, j = 4. The resulting string is s1 = "cbbdaa".\n- Choose the indices i = 1, j = 5. The resulting string is s1 = "cabdab" = s2.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input: s1 = "abe", s2 = "bea"\nOutput: false\nExplanation: It is not possible to make the two strings equal.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"n == s1.length == s2.length")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= n <= 10 ^ 5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"s2")," consist only of lowercase English letters.")),(0,r.kt)("h2",{id:"approach-1-sorting"},"Approach 1: Sorting"),(0,r.kt)("p",null,"We can only swap any characters with the same parity. We can simply sort all characters at even parity and odd parity for ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"s"),(0,r.kt)("mn",{parentName:"mrow"},"1")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"s1")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,r.kt)("span",{parentName:"span",className:"mord"},"1")))))," and ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"s"),(0,r.kt)("mn",{parentName:"mrow"},"2")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"s2")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,r.kt)("span",{parentName:"span",className:"mord"},"2"))))),", then compare if they are all same."),(0,r.kt)(c,{mdxType:"Tabs"},(0,r.kt)(d,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)(u,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool checkStrings(string s1, string s2) {\n        // put all characters in s1 at even index\n        // put all characters in s1 at odd index\n        vector<int> s1_even, s1_odd;\n        for (int i = 0; i < s1.size(); i++) {\n            if (i % 2 == 0) s1_even.push_back(s1[i]);\n            else s1_odd.push_back(s1[i]);\n        }\n        // sort them\n        sort(s1_even.begin(), s1_even.end());\n        sort(s1_odd.begin(), s1_odd.end());\n        \n        // put all characters in s2 at even index\n        // put all characters in s2 at odd index\n        vector<int> s2_even, s2_odd;\n        for (int i = 0; i < s2.size(); i++) {\n            if (i % 2 == 0) s2_even.push_back(s2[i]);\n            else s2_odd.push_back(s2[i]);\n        }\n        // sort them\n        sort(s2_even.begin(), s2_even.end());\n        sort(s2_odd.begin(), s2_odd.end());\n\n        return s1_even == s2_even && s1_odd == s2_odd;\n    }\n};\n")))))}b.isMDXComponent=!0}}]);