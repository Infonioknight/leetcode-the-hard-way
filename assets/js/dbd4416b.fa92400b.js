"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[64651],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var l=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=l.createContext({}),s=function(e){var t=l.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return l.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,k=u["".concat(p,".").concat(d)]||u[d]||c[d]||a;return n?l.createElement(k,o(o({ref:t},m),{},{components:n})):l.createElement(k,o({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<a;s++)o[s]=n[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}d.displayName="MDXCreateElement"},198:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>y,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var l=n(87462),r=(n(67294),n(3905));const a={description:"Author: @kat-kan | https://leetcode.com/problems/smallest-even-multiple/"},o="2413 - Smallest Even Multiple (Easy)",i={unversionedId:"2400-2499/smallest-even-multiple-easy",id:"2400-2499/smallest-even-multiple-easy",title:"2413 - Smallest Even Multiple (Easy)",description:"Author: @kat-kan | https://leetcode.com/problems/smallest-even-multiple/",source:"@site/solutions/2400-2499/2413-smallest-even-multiple-easy.md",sourceDirName:"2400-2499",slug:"/2400-2499/smallest-even-multiple-easy",permalink:"/solutions/2400-2499/smallest-even-multiple-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2413-smallest-even-multiple-easy.md",tags:[],version:"current",sidebarPosition:2413,frontMatter:{description:"Author: @kat-kan | https://leetcode.com/problems/smallest-even-multiple/"},sidebar:"tutorialSidebar",previous:{title:"2406 - Divide Intervals Into Minimum Number of Groups (Medium)",permalink:"/solutions/2400-2499/divide-intervals-into-minimum-number-of-groups-medium"},next:{title:"2418 - Sort the People (Easy)",permalink:"/solutions/2400-2499/sort-the-people-easy"}},p={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: n or 2n",id:"approach-1-n-or-2n",level:2},{value:"Approach 2: Ternary operator",id:"approach-2-ternary-operator",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=m("Tabs"),c=m("TabItem"),d=m("SolutionAuthor"),k={toc:s},h="wrapper";function y(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,l.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2413---smallest-even-multiple-easy"},"2413 - Smallest Even Multiple (Easy)"),(0,r.kt)("h2",{id:"problem-link"},"Problem Link"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/smallest-even-multiple/"},"https://leetcode.com/problems/smallest-even-multiple/")),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given a ",(0,r.kt)("strong",{parentName:"p"},"positive")," integer ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),", return the smallest positive integer that is a multiple of ",(0,r.kt)("strong",{parentName:"p"},"both")," 2 and ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: n = 5\nOutput: 10\nExplanation: The smallest multiple of both 5 and 2 is 10.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: n = 6\nOutput: 6\nExplanation: The smallest multiple of both 6 and 2 is 6. Note that a number is a multiple of itself.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= n <= 150"))),(0,r.kt)("h2",{id:"approach-1-n-or-2n"},"Approach 1: n or 2n"),(0,r.kt)("p",null,"The smallest multiple of 2 and a number $n$ will be either"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"$n$ if $n$ is even"),(0,r.kt)("li",{parentName:"ul"},"$2n$ if $n$ is odd")),(0,r.kt)("p",null,"In solution we need to first check if the number is even and return the correct result."),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(d,{name:"@kat-kan",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int smallestEvenMultiple(int n) {\n        if (n % 2 == 0) return n;\n        return n * 2;\n    }\n}\n")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Time complexity")," :"),(0,r.kt)("p",null,"$O(1)$ : It takes a constant time. There is one input variable and the algorithm will take the same time no matter of value."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Space complexity")," :"),(0,r.kt)("p",null,"$O(1)$ : There is one int variable (4 bytes of memory) and algorithm will always take 4 bytes of memory to complete. The space complexity is constant."),(0,r.kt)("h2",{id:"approach-2-ternary-operator"},"Approach 2: Ternary operator"),(0,r.kt)("p",null,"We can make our solution much shorter using ternary operator:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"$n \\% 2$ is a condition"),(0,r.kt)("li",{parentName:"ul"},"$n$ is returned when condition is true"),(0,r.kt)("li",{parentName:"ul"},"$n * 2$ is returned when condition is false")),(0,r.kt)(u,{mdxType:"Tabs"},(0,r.kt)(c,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)(d,{name:"@kat-kan",mdxType:"SolutionAuthor"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public static int smallestEvenMultiple(int n) {\n        return n % 2 == 0 ? n : n * 2;\n    }\n}\n")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Time Complexity")),(0,r.kt)("p",null,"$O(1)$ : It takes a constant time. There is one input variable and the algorithm will take the same time no matter of value."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Space Complexity")),(0,r.kt)("p",null,"$O(1)$ : There is one int variable (4 bytes of memory) and algorithm will always take 4 bytes of memory to complete. The space complexity is constant."))}y.isMDXComponent=!0}}]);