"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[95983],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=m(n),d=a,k=c["".concat(l,".").concat(d)]||c[d]||s[d]||o;return n?r.createElement(k,i(i({ref:t},u),{},{components:n})):r.createElement(k,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},32262:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return s}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],p={description:"Author: @wingkwong | https://leetcode.com/problems/maximal-score-after-applying-k-operations/"},l="2530 - Maximal Score After Applying K Operations (Medium)",m={unversionedId:"2500-2599/maximal-score-after-applying-k-operations-medium",id:"2500-2599/maximal-score-after-applying-k-operations-medium",title:"2530 - Maximal Score After Applying K Operations (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/maximal-score-after-applying-k-operations/",source:"@site/solutions/2500-2599/2530-maximal-score-after-applying-k-operations-medium.md",sourceDirName:"2500-2599",slug:"/2500-2599/maximal-score-after-applying-k-operations-medium",permalink:"/leetcode-the-hard-way/solutions/2500-2599/maximal-score-after-applying-k-operations-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2500-2599/2530-maximal-score-after-applying-k-operations-medium.md",tags:[],version:"current",sidebarPosition:2530,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/maximal-score-after-applying-k-operations/"},sidebar:"tutorialSidebar",previous:{title:"2529 - Maximum Count of Positive Integer and Negative Integer (Easy)",permalink:"/leetcode-the-hard-way/solutions/2500-2599/maximum-count-of-positive-integer-and-negative-integer-easy"},next:{title:"2531 - Make Number of Distinct Characters Equal (Medium)",permalink:"/leetcode-the-hard-way/solutions/2500-2599/make-number-of-distinct-characters-equal-medium"}},u={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Priority Queue",id:"approach-1-priority-queue",level:2}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},d=c("Tabs"),k=c("TabItem"),f=c("SolutionAuthor"),y={toc:s};function g(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"2530---maximal-score-after-applying-k-operations-medium"},"2530 - Maximal Score After Applying K Operations (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximal-score-after-applying-k-operations/"},"https://leetcode.com/problems/maximal-score-after-applying-k-operations/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given a ",(0,o.kt)("strong",{parentName:"p"},"0-indexed")," integer array ",(0,o.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,o.kt)("inlineCode",{parentName:"p"},"k"),". You have a ",(0,o.kt)("strong",{parentName:"p"},"starting score")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,o.kt)("p",null,"In one ",(0,o.kt)("strong",{parentName:"p"},"operation"),":"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"choose an index ",(0,o.kt)("inlineCode",{parentName:"li"},"i")," such that ",(0,o.kt)("inlineCode",{parentName:"li"},"0 <= i < nums.length"),","),(0,o.kt)("li",{parentName:"ol"},"increase your ",(0,o.kt)("strong",{parentName:"li"},"score")," by ",(0,o.kt)("inlineCode",{parentName:"li"},"nums[i]"),", and"),(0,o.kt)("li",{parentName:"ol"},"replace ",(0,o.kt)("inlineCode",{parentName:"li"},"nums[i]")," with ",(0,o.kt)("inlineCode",{parentName:"li"},"ceil(nums[i] / 3)"),".")),(0,o.kt)("p",null,"Return *the maximum possible ",(0,o.kt)("strong",{parentName:"p"},"score")," you can attain after applying ",(0,o.kt)("strong",{parentName:"p"},"exactly*")," ",(0,o.kt)("inlineCode",{parentName:"p"},"k")," ",(0,o.kt)("em",{parentName:"p"},"operations"),"."),(0,o.kt)("p",null,"The ceiling function ",(0,o.kt)("inlineCode",{parentName:"p"},"ceil(val)")," is the least integer greater than or equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"val"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [10,10,10,10,10], k = 5\nOutput: 50\nExplanation: Apply the operation to each array element exactly once. The final score is 10 + 10 + 10 + 10 + 10 = 50.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1,10,3,3,3], k = 3\nOutput: 17\nExplanation: You can do the following operations:\nOperation 1: Select i = 1, so nums becomes [1,4,3,3,3]. Your score increases by 10.\nOperation 2: Select i = 1, so nums becomes [1,2,3,3,3]. Your score increases by 4.\nOperation 3: Select i = 2, so nums becomes [1,1,1,3,3]. Your score increases by 3.\nThe final score is 10 + 4 + 3 = 17.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums.length, k <= 10^5")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 10^9"))),(0,o.kt)("h2",{id:"approach-1-priority-queue"},"Approach 1: Priority Queue"),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(k,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    long long maxKelements(vector<int>& nums, int k) {\n        long long ans = 0;\n        // we want to take the max one in each round\n        priority_queue<int> pq(nums.begin(), nums.end());\n        // perform k rounds\n        while (k--) {\n            // get the max one\n            int t = pq.top(); \n            // pop it out\n            pq.pop();\n            // add to answer\n            ans += t; \n            // add the ceil value\n            // ceil(x / y) = (x + y - 1) / y\n            // ceil(t / 3) = (t + 3 - 1) / 3 = (t + 2) / 3\n            pq.push((t + 2) / 3);\n        }\n        return ans;\n    }\n};\n")))))}g.isMDXComponent=!0}}]);