"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[50264],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},80852:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/word-pattern/",tags:["Hash Table","String"]},p="0290 - Word Pattern (Easy)",s={unversionedId:"0200-0299/word-pattern-easy",id:"0200-0299/word-pattern-easy",title:"0290 - Word Pattern (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/word-pattern/",source:"@site/solutions/0200-0299/0209-word-pattern-easy.md",sourceDirName:"0200-0299",slug:"/0200-0299/word-pattern-easy",permalink:"/solutions/0200-0299/word-pattern-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0200-0299/0209-word-pattern-easy.md",tags:[{label:"Hash Table",permalink:"/solutions/tags/hash-table"},{label:"String",permalink:"/solutions/tags/string"}],version:"current",sidebarPosition:209,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/word-pattern/",tags:["Hash Table","String"]},sidebar:"tutorialSidebar",previous:{title:"0208 - Implement Trie (Prefix Tree) (Medium)",permalink:"/solutions/0200-0299/implement-trie-medium"},next:{title:"0210 - Course Schedule II (Medium)",permalink:"/solutions/0200-0299/course-schedule-ii-medium"}},c={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Hashmap",id:"approach-1-hashmap",level:2}],d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},m=d("Tabs"),g=d("TabItem"),f=d("SolutionAuthor"),h={toc:u};function k(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0290---word-pattern-easy"},"0290 - Word Pattern (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/word-pattern/"},"https://leetcode.com/problems/word-pattern/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given a ",(0,o.kt)("inlineCode",{parentName:"p"},"pattern")," and a string ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),", find if ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),"\xa0follows the same pattern."),(0,o.kt)("p",null,"Here ",(0,o.kt)("strong",{parentName:"p"},"follow")," means a full match, such that there is a bijection between a letter in ",(0,o.kt)("inlineCode",{parentName:"p"},"pattern")," and a ",(0,o.kt)("strong",{parentName:"p"},"non-empty")," word in ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: pattern = "abba", s = "dog cat cat dog"\nOutput: true\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: pattern = "abba", s = "dog cat cat fish"\nOutput: false\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: pattern = "aaaa", s = "dog cat cat dog"\nOutput: false\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= pattern.length <= 300")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pattern")," contains only lower-case English letters."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= s.length <= 3000")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"s")," contains only lowercase English letters and spaces ",(0,o.kt)("inlineCode",{parentName:"li"},"' '"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"s")," ",(0,o.kt)("strong",{parentName:"li"},"does not contain")," any leading or trailing spaces."),(0,o.kt)("li",{parentName:"ul"},"All the words in ",(0,o.kt)("inlineCode",{parentName:"li"},"s")," are separated by a ",(0,o.kt)("strong",{parentName:"li"},"single space"),".")),(0,o.kt)("h2",{id:"approach-1-hashmap"},"Approach 1: Hashmap"),(0,o.kt)(m,{mdxType:"Tabs"},(0,o.kt)(g,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(f,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    bool wordPattern(string pattern, string s) {\n        // convert s to a vector of strings\n        // e.g. "dog cat cat dog" -> ["dog", "cat", "cat", "dog"]\n        stringstream ss(s);\n        string word;\n        vector<string> words;\n        while (ss >> word) {\n            words.push_back(word);\n        }\n        // the size of words needs to be same as that of pattern\n        // e.g. words = ["xxx"], pattern = "xxx"\n        if (words.size() != pattern.size()) {\n            return false;\n        }\n        // for each word in words ...\n        // char in pattern -> word\n        // e.g. a -> dog\n        // e.g. b -> cat\n        unordered_map<char, string> m;\n        set<string> used;\n        for (int i = 0; i < words.size(); i++) {\n            // check if map the pattern\n            if (m.count(pattern[i])) {\n                // if pattern[i] exists in the hashmap,\n                // then we need to make sure that the word is correct\n                if (m[pattern[i]] != words[i]) {\n                    return false;\n                }\n            } else {\n                // each word can only map to one pattern\n                // e.g. pattern = "ab", s = "dog dog"\n                if (used.find(words[i]) != used.end()) {\n                    return false;\n                }\n                // if not, then map it   \n                // e.g. a -> dog\n                m[pattern[i]] = words[i];\n                used.insert(words[i]);\n            }\n        }\n        return true;\n    }\n};\n')))))}k.isMDXComponent=!0}}]);