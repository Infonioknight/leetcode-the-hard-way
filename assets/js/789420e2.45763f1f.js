"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[75167],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=r.createContext({}),l=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(m.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=l(t),c=a,g=d["".concat(m,".").concat(c)]||d[c]||u[c]||o;return t?r.createElement(g,i(i({ref:n},s),{},{components:t})):r.createElement(g,i({ref:n},s))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var p={};for(var m in n)hasOwnProperty.call(n,m)&&(p[m]=n[m]);p.originalType=e,p[d]="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},17108:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>b,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const o={description:"Author: @wingkwong | https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/description/",tags:["Array","Dynamic Programming","Greedy"]},i="1326 - Minimum Number of Taps to Open to Water a Garden (Hard)",p={unversionedId:"1300-1399/minimum-number-of-taps-to-open-to-water-a-garden-hard",id:"1300-1399/minimum-number-of-taps-to-open-to-water-a-garden-hard",title:"1326 - Minimum Number of Taps to Open to Water a Garden (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/description/",source:"@site/solutions/1300-1399/1326-minimum-number-of-taps-to-open-to-water-a-garden-hard.md",sourceDirName:"1300-1399",slug:"/1300-1399/minimum-number-of-taps-to-open-to-water-a-garden-hard",permalink:"/solutions/1300-1399/minimum-number-of-taps-to-open-to-water-a-garden-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1300-1399/1326-minimum-number-of-taps-to-open-to-water-a-garden-hard.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Greedy",permalink:"/solutions/tags/greedy"}],version:"current",sidebarPosition:1326,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/description/",tags:["Array","Dynamic Programming","Greedy"]},sidebar:"tutorialSidebar",previous:{title:"1305 - All Elements in Two Binary Search Trees (Medium)",permalink:"/solutions/1300-1399/all-elements-in-two-binary-search-trees-medium"},next:{title:"1328 - Break a Palindrome (Medium)",permalink:"/solutions/1300-1399/break-a-palindrome-medium"}},m={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],s=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},d=s("Tabs"),u=s("TabItem"),c=s("SolutionAuthor"),g={toc:l},h="wrapper";function b(e){let{components:n,...t}=e;return(0,a.kt)(h,(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1326---minimum-number-of-taps-to-open-to-water-a-garden-hard"},"1326 - Minimum Number of Taps to Open to Water a Garden (Hard)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/description/"},"https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/description/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"There is a one-dimensional garden on the x-axis. The garden starts at the point ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," and ends at the point ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),". (i.e The length of the garden is ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),")."),(0,a.kt)("p",null,"There are ",(0,a.kt)("inlineCode",{parentName:"p"},"n + 1")," taps located at points ",(0,a.kt)("inlineCode",{parentName:"p"},"[0, 1, ..., n]")," in the garden."),(0,a.kt)("p",null,"Given an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," and an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"ranges")," of length ",(0,a.kt)("inlineCode",{parentName:"p"},"n + 1")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"ranges[i]")," (0-indexed) means the ",(0,a.kt)("inlineCode",{parentName:"p"},"i-th")," tap can water the area ",(0,a.kt)("inlineCode",{parentName:"p"},"[i - ranges[i], i + ranges[i]]")," if it was open."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the minimum number of taps")," that should be open to water the whole garden, If the garden cannot be watered return ",(0,a.kt)("strong",{parentName:"p"},"-1"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 5, ranges = [3,4,1,1,0,0]\nOutput: 1\nExplanation: The tap at point 0 can cover the interval [-3,3]\nThe tap at point 1 can cover the interval [-3,5]\nThe tap at point 2 can cover the interval [1,3]\nThe tap at point 3 can cover the interval [2,4]\nThe tap at point 4 can cover the interval [4,4]\nThe tap at point 5 can cover the interval [5,5]\nOpening Only the second tap will water the whole garden [0,5]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 3, ranges = [0,0,0,0]\nOutput: -1\nExplanation: Even if you activate all the four taps you cannot water the whole garden.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 10^4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ranges.length == n + 1")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= ranges[i] <= 100"))),(0,a.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,a.kt)(d,{mdxType:"Tabs"},(0,a.kt)(u,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// TC: O(n * m) where m is ranges[i]\n// SC: O(n)\nclass Solution {\npublic:\n    int minTaps(int n, vector<int>& ranges) {\n        // dp[i]: min number of taps that should be open to water garden [0 .. i]\n        // init with some max values\n        vector<int> dp(n + 1, n + 1);\n        // no tap is needed to water no garden\n        dp[0] = 0;\n        for (int i = 0; i <= n; i++) {\n            // we can water garden [i - ranges[i] .. i + ranges[i]] with tap i\n            // rmb to handle the boundary ...\n            int l = max(0, i - ranges[i]), r = min(i + ranges[i], n);\n            for (int j = l; j <= r; j++) {\n                // check we can use less number of taps from [l .. r]\n                // i.e. can i water [0 .. j] just using dp[j] taps\n                // or I need to water dp[0 .. l] `dp[l]` times \n                // and use one more tap to water [l + 1 .. j]\n                dp[j] = min(dp[j], dp[l] + 1);\n            }\n        }\n        // if min number of taps not found, return -1, else return dp[n]\n        return dp[n] == n + 1 ? -1 : dp[n];\n    }\n};\n")))))}b.isMDXComponent=!0}}]);