"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[1906],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},88601:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/sqrtx/"},p="0069 - Sqrt(x) (Easy)",s={unversionedId:"0000-0099/sqrt-x-easy",id:"0000-0099/sqrt-x-easy",title:"0069 - Sqrt(x) (Easy)",description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/sqrtx/",source:"@site/solutions/0000-0099/0069-sqrt-x-easy.md",sourceDirName:"0000-0099",slug:"/0000-0099/sqrt-x-easy",permalink:"/solutions/0000-0099/sqrt-x-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0000-0099/0069-sqrt-x-easy.md",tags:[],version:"current",sidebarPosition:69,frontMatter:{description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/sqrtx/"},sidebar:"tutorialSidebar",previous:{title:"0067 - Add Binary (easy)",permalink:"/solutions/0000-0099/add-binary-easy"},next:{title:"0070 - Climbing Stairs (Easy)",permalink:"/solutions/0000-0099/climbing-stairs-easy"}},c={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}],m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},d=m("Tabs"),f=m("TabItem"),y=m("SolutionAuthor"),h={toc:u};function k(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0069---sqrtx-easy"},"0069 - Sqrt(x) (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sqrtx/"},"https://leetcode.com/problems/sqrtx/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given a non-negative integer ",(0,o.kt)("inlineCode",{parentName:"p"},"x"),", compute and return ",(0,o.kt)("em",{parentName:"p"},"the square root of")," ",(0,o.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,o.kt)("p",null,"Since the return type is an integer, the decimal digits are ",(0,o.kt)("strong",{parentName:"p"},"truncated"),", and only ",(0,o.kt)("strong",{parentName:"p"},"the integer part")," of the result is returned."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," You are not allowed to use any built-in exponent function or operator, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"pow(x, 0.5)")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"x ** 0.5"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: x = 4\nOutput: 2\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= x <= 2^31 - 1"))),(0,o.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Prerequisite")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../../tutorials/basic-topics/binary-search"},"Binary Search"))))),(0,o.kt)(d,{mdxType:"Tabs"},(0,o.kt)(f,{value:"c++",label:"C++",mdxType:"TabItem"},(0,o.kt)(y,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int mySqrt(int x) {\n        // init possible range\n        long long l = 0, r = x;\n        while (l < r) {\n            long long m = l + (r - l + 1) / 2;\n            // exclude m\n            if (x < m * m) r = m - 1;\n            // include m\n            else l = m;\n        }\n        return l;\n    }\n};\n"))),(0,o.kt)(f,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)(y,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def mySqrt(self, x: int) -> int:\n        left = 0\n        right = x\n        while left <= right:\n            mid = (left + right) // 2\n            if x < mid * mid:\n                right = mid - 1\n            elif x > mid * mid:\n                left = mid + 1\n            else:\n                return mid\n        return right\n")))))}k.isMDXComponent=!0}}]);