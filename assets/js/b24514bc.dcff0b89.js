"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[51090],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(g,s(s({ref:t},c),{},{components:n})):r.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},88317:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={description:"Author: @wingkwong | https://leetcode.com/problems/smallest-string-with-swaps"},s="1202 - Smallest String With Swaps (Medium)",o={unversionedId:"1200-1299/smallest-string-with-swaps-medium",id:"1200-1299/smallest-string-with-swaps-medium",title:"1202 - Smallest String With Swaps (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/smallest-string-with-swaps",source:"@site/solutions/1200-1299/1202-smallest-string-with-swaps-medium.md",sourceDirName:"1200-1299",slug:"/1200-1299/smallest-string-with-swaps-medium",permalink:"/solutions/1200-1299/smallest-string-with-swaps-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/1200-1299/1202-smallest-string-with-swaps-medium.md",tags:[],version:"current",sidebarPosition:1202,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/smallest-string-with-swaps"},sidebar:"tutorialSidebar",previous:{title:"1201 - Ugly Number III (Medium)",permalink:"/solutions/1200-1299/ugly-number-iii-medium"},next:{title:"1232 - Check If It Is a Straight Line (Easy)",permalink:"/solutions/1200-1299/check-if-it-is-a-straight-line-easy"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DSU",id:"approach-1-dsu",level:2}],c=(u="SolutionAuthor",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const m={toc:p},d="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1202---smallest-string-with-swaps-medium"},"1202 - Smallest String With Swaps (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/smallest-string-with-swaps"},"https://leetcode.com/problems/smallest-string-with-swaps")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a string ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),", and an array of pairs of indices in the string ",(0,a.kt)("inlineCode",{parentName:"p"},"pairs")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"pairs[i] = [a, b]")," indicates 2 indices(0-indexed) of the string."),(0,a.kt)("p",null,"You can swap the characters at any pair of indices in the given ",(0,a.kt)("inlineCode",{parentName:"p"},"pairs")," ",(0,a.kt)("strong",{parentName:"p"},"any number of times"),"."),(0,a.kt)("p",null,"Return the lexicographically smallest string that ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," can be changed to after using the swaps."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "dcab", pairs = [[0,3],[1,2]]\nOutput: "bacd"\nExplaination: \nSwap s[0] and s[3], s = "bcad"\nSwap s[1] and s[2], s = "bacd"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "dcab", pairs = [[0,3],[1,2],[0,2]]\nOutput: "abcd"\nExplaination: \nSwap s[0] and s[3], s = "bcad"\nSwap s[0] and s[2], s = "acbd"\nSwap s[1] and s[2], s = "abcd"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: s = "cba", pairs = [[0,1],[1,2]]\nOutput: "abc"\nExplaination: \nSwap s[0] and s[1], s = "bca"\nSwap s[1] and s[2], s = "bac"\nSwap s[0] and s[1], s = "abc" \n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= s.length <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= pairs.length <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= pairs[i][0], pairs[i][1] < s.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"s")," only contains lower case English letters.")),(0,a.kt)("h2",{id:"approach-1-dsu"},"Approach 1: DSU"),(0,a.kt)("p",null,"If we have like $$[","[0,1]",",","[1,2]","]$$, even $$0$$ doesn't connect to $$2$$, it can still swap with $$2$$ as we can first swap $$0$$ and $$1$$, then swap $$0$$ with $$2$$. Therefore, we can use DSU to group all the connected nodes together first, then sort it and replace the character at corresponding indices."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"DSU Template"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class dsu {\n public:\n  vector<int> root, rank;\n  int n;\n  int cnt;\n\n  dsu(int _n) : n(_n) {\n    root.resize(n);\n    rank.resize(n);\n    for(int i = 0; i < n; i++) {\n        root[i] = i;\n        rank[i] = 1;\n    }\n    cnt = n;\n  }\n\n  inline int getCount() { return cnt; }\n\n  inline int get(int x) { return (x == root[x] ? x : (root[x] = get(root[x]))); }\n\n  inline bool unite(int x, int y) {\n    x = get(x);\n    y = get(y);\n    if (x != y) {\n        if (rank[x] > rank[y]) {\n            root[y] = x;\n        } else if (rank[x] < rank[y]) {\n            root[x] = y;\n        } else {\n            root[y] = x;\n            rank[x] += 1;\n        }\n        cnt--;\n      return true;\n    }\n    return false;\n  }\n};\n"))),(0,a.kt)(c,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string smallestStringWithSwaps(string s, vector<vector<int>>& pairs) {\n        int n = s.size();\n        dsu d(n);\n        // group all connected nodes together\n        for (auto& p : pairs) d.unite(p[0], p[1]);\n        vector<vector<int>> m(n);\n        // all elements in the same group have the same parent\n        for (int i = 0; i < n; i++) m[d.get(i)].push_back(i);\n        for (int i = 0; i < n; i++) {\n            // build the possible string for group m[i]\n            string t;\n            for (int j = 0; j < m[i].size(); j++) t += s[m[i][j]];\n            // sort the string\n            sort(t.begin(), t.end());\n            // replace each in correponding index\n            for (int j = 0; j < m[i].size(); j++) s[m[i][j]] = t[j];\n        }\n        return s;\n    }\n};\n")))}g.isMDXComponent=!0}}]);