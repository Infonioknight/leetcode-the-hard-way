"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[41477],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,h=m["".concat(l,".").concat(d)]||m[d]||c[d]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},29612:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>b,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/number-of-senior-citizens/"},i="2678 - Number of Senior Citizens (Easy)",s={unversionedId:"2600-2699/number-of-senior-citizens-easy",id:"2600-2699/number-of-senior-citizens-easy",title:"2678 - Number of Senior Citizens (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/number-of-senior-citizens/",source:"@site/solutions/2600-2699/2678-number-of-senior-citizens-easy.md",sourceDirName:"2600-2699",slug:"/2600-2699/number-of-senior-citizens-easy",permalink:"/solutions/2600-2699/number-of-senior-citizens-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2600-2699/2678-number-of-senior-citizens-easy.md",tags:[],version:"current",sidebarPosition:2678,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/number-of-senior-citizens/"},sidebar:"tutorialSidebar",previous:{title:"2644 - Find the Maximum Divisibility Score (Easy)",permalink:"/solutions/2600-2699/find-the-maximum-divisibility-score-easy"},next:{title:"2679 - Sum in a Matrix (Medium)",permalink:"/solutions/2600-2699/sum-in-a-matrix-medium"}},l={},p=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Extract The Number",id:"approach-1-extract-the-number",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},m=u("Tabs"),c=u("TabItem"),d=u("SolutionAuthor"),h={toc:p},f="wrapper";function b(e){let{components:t,...n}=e;return(0,o.kt)(f,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"2678---number-of-senior-citizens-easy"},"2678 - Number of Senior Citizens (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-senior-citizens/"},"https://leetcode.com/problems/number-of-senior-citizens/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given a ",(0,o.kt)("strong",{parentName:"p"},"0-indexed")," array of strings ",(0,o.kt)("inlineCode",{parentName:"p"},"details"),". Each element of ",(0,o.kt)("inlineCode",{parentName:"p"},"details")," provides information about a given passenger compressed into a string of length ",(0,o.kt)("inlineCode",{parentName:"p"},"15"),". The system is such that:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The first ten characters consist of the phone number of passengers."),(0,o.kt)("li",{parentName:"ul"},"The next character denotes the gender of the person."),(0,o.kt)("li",{parentName:"ul"},"The following two characters are used to indicate the age of the person."),(0,o.kt)("li",{parentName:"ul"},"The last two characters determine the seat allotted to that person.")),(0,o.kt)("p",null,"Return ",(0,o.kt)("em",{parentName:"p"},"the number of passengers who are ",(0,o.kt)("strong",{parentName:"em"},"strictly**"),"more than 60 years old**.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: details = ["7868190130M7522","5303914400F9211","9273338290F4010"]\nOutput: 2\nExplanation: The passengers at indices 0, 1, and 2 have ages 75, 92, and 40. Thus, there are 2 people who are over 60 years old.\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: details = ["1313579440F2036","2921522980M5644"]\nOutput: 0\nExplanation: None of the passengers are older than 60.\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= details.length <= 100")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"details[i].length == 15")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"details[i] consists of digits from '0' to '9'.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"details[i][10] is either 'M' or 'F' or 'O'.")),(0,o.kt)("li",{parentName:"ul"},"The phone numbers and seat numbers of the passengers are distinct.")),(0,o.kt)("h2",{id:"approach-1-extract-the-number"},"Approach 1: Extract The Number"),(0,o.kt)(m,{mdxType:"Tabs"},(0,o.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def countSeniors(self, details: List[str]) -> int:\n        res = 0\n        for detail in details:\n            # just check if the age is strictly more than 60 years old\n            if int(detail[11:13]) > 60:\n                res += 1\n        return res\n            \n")))))}b.isMDXComponent=!0}}]);