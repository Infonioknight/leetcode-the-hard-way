"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[59286],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,d=u["".concat(s,".").concat(h)]||u[h]||m[h]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},46971:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>b,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={description:"Author: @vigneshshiv | https://leetcode.com/problems/string-compression/"},i="0443 - String Compression (Medium)",p={unversionedId:"0400-0499/string-compression-medium",id:"0400-0499/string-compression-medium",title:"0443 - String Compression (Medium)",description:"Author: @vigneshshiv | https://leetcode.com/problems/string-compression/",source:"@site/solutions/0400-0499/0443-string-compression-medium.md",sourceDirName:"0400-0499",slug:"/0400-0499/string-compression-medium",permalink:"/solutions/0400-0499/string-compression-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0400-0499/0443-string-compression-medium.md",tags:[],version:"current",sidebarPosition:443,frontMatter:{description:"Author: @vigneshshiv | https://leetcode.com/problems/string-compression/"},sidebar:"tutorialSidebar",previous:{title:"0441 - Arranging Coins (Easy)",permalink:"/solutions/0400-0499/arranging-coins-easy"},next:{title:"0445 - Add two Numbers II (Medium)",permalink:"/solutions/0400-0499/Add-Two-Numbers-II"}},s={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Iterative",id:"approach-1-iterative",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=c("Tabs"),m=c("TabItem"),h=c("SolutionAuthor"),d={toc:l},g="wrapper";function b(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0443---string-compression-medium"},"0443 - String Compression (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/string-compression/"},"https://leetcode.com/problems/string-compression/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an array of characters ",(0,a.kt)("inlineCode",{parentName:"p"},"chars"),", compress it using the following algorithm:"),(0,a.kt)("p",null,"Begin with an empty string ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),". For each group of ",(0,a.kt)("strong",{parentName:"p"},"consecutive repeating characters")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"chars"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the group's length is ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),", append the character to ",(0,a.kt)("inlineCode",{parentName:"li"},"s"),"."),(0,a.kt)("li",{parentName:"ul"},"Otherwise, append the character followed by the group's length.")),(0,a.kt)("p",null,"The compressed string ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," ",(0,a.kt)("strong",{parentName:"p"},"should not be returned separately"),", but instead, be stored ",(0,a.kt)("strong",{parentName:"p"},"in the input character array")," ",(0,a.kt)("inlineCode",{parentName:"p"},"chars"),". Note that group lengths that are ",(0,a.kt)("inlineCode",{parentName:"p"},"10")," or longer will be split into multiple characters in ",(0,a.kt)("inlineCode",{parentName:"p"},"chars"),"."),(0,a.kt)("p",null,"After you are done ",(0,a.kt)("strong",{parentName:"p"},"modifying the input array"),", return ",(0,a.kt)("em",{parentName:"p"},"the new length of the array"),"."),(0,a.kt)("p",null,"You must write an algorithm that uses only constant extra space."),(0,a.kt)("p",null,"Given an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums"),", return ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," ",(0,a.kt)("em",{parentName:"p"},"if there exists a triple of indices")," ",(0,a.kt)("inlineCode",{parentName:"p"},"(i, j, k)")," ",(0,a.kt)("em",{parentName:"p"},"such that")," ",(0,a.kt)("inlineCode",{parentName:"p"},"i < j < k")," ",(0,a.kt)("em",{parentName:"p"},"and")," ",(0,a.kt)("inlineCode",{parentName:"p"},"nums[i] < nums[j] < nums[k]"),". If no such indices exists, return ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: chars = ["a","a","b","b","c","c","c"]\nOutput: Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]\nExplanation: The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: chars = ["a"]\nOutput: Return 1, and the first character of the input array should be: ["a"]\nExplanation: The only group is "a", which remains uncompressed since it\'s a single character.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: chars = ["a","b","b","b","b","b","b","b","b","b","b","b","b"]\nOutput: Return 4, and the first 4 characters of the input array should be: ["a","b","1","2"].\nExplanation: The groups are "a" and "bbbbbbbbbbbb". This compresses to "ab12".\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= chars.length <= 2000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"chars[i]")," is a lowercase English letter, uppercase English letter, digit, or symbol.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Follow up:")," Could you implement a solution that runs in ",(0,a.kt)("inlineCode",{parentName:"p"},"O(n)")," time complexity and ",(0,a.kt)("inlineCode",{parentName:"p"},"O(1)")," space complexity?"),(0,a.kt)("h2",{id:"approach-1-iterative"},"Approach 1: Iterative"),(0,a.kt)("p",null,"As stated in the problem, find the ",(0,a.kt)("strong",{parentName:"p"},"consecutive repeating characters")," frequency and once a ",(0,a.kt)("strong",{parentName:"p"},"set of group is found")," then modify the array with the character, number of occurances in the next index and repeat the process till last. "),(0,a.kt)("p",null,"Since it's input is a char array, if number of occurrance for a character is more than 9 times, place the numbers in an invididual position and move forward. "),(0,a.kt)(u,{mdxType:"Tabs"},(0,a.kt)(m,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)(h,{name:"@vigneshshiv",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public int compress(char[] chars) {\n        int i = 0, res = 0; \n        while (i < chars.length) {\n            int groupLength = 1;\n            while (i + groupLength < chars.length && chars[i + groupLength] == chars[i]) {\n                groupLength += 1;\n            }\n            chars[res++] = chars[i];\n            if (groupLength > 1) {\n                for (char c : Integer.toString(groupLength).toCharArray()) {\n                    chars[res++] = c;\n                }\n            }\n            i += groupLength;\n        }\n        return res;\n    }\n}\n")))))}b.isMDXComponent=!0}}]);