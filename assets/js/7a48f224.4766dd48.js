"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[28437],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>b});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),s=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(l.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(t),d=a,b=p["".concat(l,".").concat(d)]||p[d]||c[d]||r;return t?i.createElement(b,m(m({ref:n},u),{},{components:t})):i.createElement(b,m({ref:n},u))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,m=new Array(r);m[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[p]="string"==typeof e?e:a,m[1]=o;for(var s=2;s<r;s++)m[s]=t[s];return i.createElement.apply(null,m)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},79691:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>m,default:()=>y,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var i=t(87462),a=(t(67294),t(3905));const r={description:"Author: @wingkwong | https://leetcode.com/problems/minimize-maximum-of-array/",tags:["Array","Binary Search","Dynamic Programming","Greedy","Prefix Sum"]},m="2439 - Minimize Maximum of Array (Medium)",o={unversionedId:"2400-2499/minimize-maximum-of-array-medium",id:"2400-2499/minimize-maximum-of-array-medium",title:"2439 - Minimize Maximum of Array (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/minimize-maximum-of-array/",source:"@site/solutions/2400-2499/2439-minimize-maximum-of-array-medium.md",sourceDirName:"2400-2499",slug:"/2400-2499/minimize-maximum-of-array-medium",permalink:"/solutions/2400-2499/minimize-maximum-of-array-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2400-2499/2439-minimize-maximum-of-array-medium.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Binary Search",permalink:"/solutions/tags/binary-search"},{label:"Dynamic Programming",permalink:"/solutions/tags/dynamic-programming"},{label:"Greedy",permalink:"/solutions/tags/greedy"},{label:"Prefix Sum",permalink:"/solutions/tags/prefix-sum"}],version:"current",sidebarPosition:2439,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/minimize-maximum-of-array/",tags:["Array","Binary Search","Dynamic Programming","Greedy","Prefix Sum"]},sidebar:"tutorialSidebar",previous:{title:"2425 - Bitwise XOR of All Pairings (Medium)",permalink:"/solutions/2400-2499/bitwise-xor-of-all-pairs-medium"},next:{title:"2441 - Largest Positive Integer That Exists With Its Negative (Easy)",permalink:"/solutions/2400-2499/largest-positive-integer-that-exists-with-its-negative-easy"}},l={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Prefix Sum + Greedy.",id:"approach-1-prefix-sum--greedy",level:2}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},p=u("Tabs"),c=u("TabItem"),d=u("SolutionAuthor"),b={toc:s},k="wrapper";function y(e){let{components:n,...t}=e;return(0,a.kt)(k,(0,i.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2439---minimize-maximum-of-array-medium"},"2439 - Minimize Maximum of Array (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimize-maximum-of-array/"},"https://leetcode.com/problems/minimize-maximum-of-array/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a ",(0,a.kt)("strong",{parentName:"p"},"0-indexed")," array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," comprising of ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," non-negative integers."),(0,a.kt)("p",null,"In one operation, you must:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Choose an integer ",(0,a.kt)("inlineCode",{parentName:"li"},"i")," such that ",(0,a.kt)("inlineCode",{parentName:"li"},"1 <= i < n")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"nums[i] > 0"),"."),(0,a.kt)("li",{parentName:"ul"},"Decrease ",(0,a.kt)("inlineCode",{parentName:"li"},"nums[i]")," by 1."),(0,a.kt)("li",{parentName:"ul"},"Increase ",(0,a.kt)("inlineCode",{parentName:"li"},"nums[i - 1]")," by 1.")),(0,a.kt)("p",null,"Return",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"minimum")," possible value of the ",(0,a.kt)("strong",{parentName:"em"},"maximum")," integer of"),(0,a.kt)("inlineCode",{parentName:"p"},"nums"),(0,a.kt)("em",{parentName:"p"},"after performing ",(0,a.kt)("strong",{parentName:"em"},"any")," number of operations"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [3,7,1,6]\nOutput: 5\nExplanation:\nOne set of optimal operations is as follows:\n1. Choose i = 1, and nums becomes [4,6,1,6].\n2. Choose i = 3, and nums becomes [4,6,2,5].\n3. Choose i = 1, and nums becomes [5,5,2,5].\nThe maximum integer of nums is 5. It can be shown that the maximum number cannot be less than 5.\nTherefore, we return 5.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [10,1]\nOutput: 10\nExplanation:\nIt is optimal to leave nums as is, and since 10 is the maximum value, we return 10.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == nums.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"2 <= n <= 105")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= nums[i] <= 109"))),(0,a.kt)("h2",{id:"approach-1-prefix-sum--greedy"},"Approach 1: Prefix Sum + Greedy."),(0,a.kt)("p",null,"By definition, $ceil(a / b)$ return the smallest integer that is greater than or equal to $a / b$. Here's how we can derive it mathematically."),(0,a.kt)("p",null,"Let $q = a / b$ and $k = ceil(a / b)$ where $k$ is the smallest integer such that $k >= q$. "),(0,a.kt)("p",null,"Since $k$ is the smallest integer greater than or equal to $q$, we can write:"),(0,a.kt)("p",null,"$$\nk - 1 < q <= k\n$$ "),(0,a.kt)("p",null,"Multiplying both sides of this inequality by $b$, we get:"),(0,a.kt)("p",null,"$$\n(k - 1) ",(0,a.kt)("em",{parentName:"p"}," b < a <= k ")," b\n$$ "),(0,a.kt)("p",null,"Adding $b - 1$ to both sides of this inequality, we get:"),(0,a.kt)("p",null,"$$\nk ",(0,a.kt)("em",{parentName:"p"}," b + (b - 1) > a >= (k - 1) ")," b + 1\n$$ "),(0,a.kt)("p",null,"Dividing both sides of this inequality by $b$, we get:"),(0,a.kt)("p",null,"$$\nk + (b - 1) / b > a / b >= (k - 1) + 1 / b\n$$ "),(0,a.kt)("p",null,"Since $(b - 1) / b$ is a fraction between $0$ and $1$, we know that $(b - 1) / b < 1.$ Therefore, we can simplify the inequality to:"),(0,a.kt)("p",null,"$$\nk + 1 > (a + b - 1) / b >= k\n$$ "),(0,a.kt)("p",null,"This means that $(a + b - 1) / b$ is the smallest integer greater than or equal to $q$, which is exactly what $ceil(a / b)$ represents."),(0,a.kt)(p,{mdxType:"Tabs"},(0,a.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// idea: try to distribute prefix sum into (i + 1) evenly and record the maximum.\n// in example 1, let's assume there are only 2 nums first, i.e. [3, 7]\n// here we can only decrease the second number by 1 and add it to the first number\n// [3, 7] -> [4, 6] -> [5, 5] -> the min max is 5\n// What if it is [3, 8]?\n// [3, 8] -> [4, 7] -> [5, 6] -> the min max is 6\n// we can see that the min max is `ceil(sum / n)`\n// in example 2, we have [10, 1]. Here 10 is already the min max.\n// so we can conclude \n// nums[0] >= nums[1]: return nums[0] (i.e. max(nums[0], nums[1])\n// else: `ceil(sum / n)`\n\nclass Solution {\npublic:\n    int minimizeArrayValue(vector<int>& nums) {\n        long long sum = 0, ans = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums[i];\n            // ceil(a / b)\n            // = (a + b - 1) / b\n            // now a = sum, b = i + 1\n            // ceil(sum / (i + 1)\n            // = (sum + (i + 1) - 1) / (i + 1)\n            // = (sum + i) / (i + 1)\n            ans = max(ans, (sum + i) / (i + 1));\n        }\n        return ans;\n    }\n};\n"))),(0,a.kt)(c,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def minimizeArrayValue(self, nums: List[int]) -> int:\n        pref_sum, ans = 0, 0\n        for i in range(len(nums)):\n            pref_sum += nums[i]\n            ans = max(ans, (pref_sum + i) // (i + 1))\n        return ans\n")))))}y.isMDXComponent=!0}}]);