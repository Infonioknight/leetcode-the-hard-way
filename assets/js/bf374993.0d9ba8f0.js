"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[38817],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(t),d=i,g=c["".concat(u,".").concat(d)]||c[d]||p[d]||o;return t?r.createElement(g,a(a({ref:n},m),{},{components:t})):r.createElement(g,a({ref:n},m))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=c;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},11345:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return c}});var r,i=t(87462),o=t(63366),a=(t(67294),t(3905)),l=["components"],u={description:"Author: @wingkwong | https://leetcode.com/problems/largest-palindromic-number/"},s="2384 - Largest Palindromic Number (Medium)",m={unversionedId:"2300-2399/largest-palindromic-number-medium",id:"2300-2399/largest-palindromic-number-medium",title:"2384 - Largest Palindromic Number (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/largest-palindromic-number/",source:"@site/solutions/2300-2399/2384-largest-palindromic-number-medium.md",sourceDirName:"2300-2399",slug:"/2300-2399/largest-palindromic-number-medium",permalink:"/solutions/2300-2399/largest-palindromic-number-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2300-2399/2384-largest-palindromic-number-medium.md",tags:[],version:"current",sidebarPosition:2384,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/largest-palindromic-number/"},sidebar:"tutorialSidebar",previous:{title:"2383 - Minimum Hours of Training to Win a Competition (Easy)",permalink:"/solutions/2300-2399/minimum-hours-of-training-to-win-a-competition-easy"},next:{title:"2392 - Build a Matrix With Conditions (Hard)",permalink:"/solutions/2300-2399/build-a-matrix-with-conditions-hard"}},p={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Counting and Building String",id:"approach-1-counting-and-building-string",level:2}],d=(r="SolutionAuthor",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)}),g={toc:c};function f(e){var n=e.components,t=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2384---largest-palindromic-number-medium"},"2384 - Largest Palindromic Number (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a string ",(0,a.kt)("inlineCode",{parentName:"p"},"num")," consisting of digits only."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"largest palindromic")," integer (in the form of a string) that can be formed using digits taken from"),(0,a.kt)("inlineCode",{parentName:"p"},"num"),". It should not contain ",(0,a.kt)("strong",{parentName:"p"},"leading zeroes"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Notes:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You do ",(0,a.kt)("strong",{parentName:"li"},"not")," need to use all the digits of ",(0,a.kt)("inlineCode",{parentName:"li"},"num"),", but you must use ",(0,a.kt)("strong",{parentName:"li"},"at least")," one digit."),(0,a.kt)("li",{parentName:"ul"},"The digits can be reordered.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: num = "444947137"\nOutput: "7449447"\nExplanation: \nUse the digits "4449477" from "444947137" to form the palindromic integer "7449447".\nIt can be shown that "7449447" is the largest palindromic integer that can be formed.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: num = "00009"\nOutput: "9"\nExplanation: \nIt can be shown that "9" is the largest palindromic integer that can be formed.\nNote that the integer returned should not contain leading zeroes.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= num.length <= 105")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"num")," consists of digits.")),(0,a.kt)("h2",{id:"approach-1-counting-and-building-string"},"Approach 1: Counting and Building String"),(0,a.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string largestPalindromic(string num) {\n        string l, m, r;\n        // count the frequency for each digit\n        int cnt[10] = {0};\n        for (auto &x : num) cnt[x - '0']++;\n        // build the left part\n        for (int i = 9; i >= 1; i--) {\n            // we need at least a frequency of 2\n            if (cnt[i] >= 2) {\n                // we take half of it because it is only the left part\n                l += string(cnt[i] / 2, i + '0');\n            }\n        }\n        // we can put some zeros as well for cases like 0099 -> 9009\n        if (cnt[0] >= 2) {\n            // however, we only do it when we've used some digits \n            // think of cases like 9\n            if (l.size()) {\n                l += string(cnt[0] / 2, '0');    \n            }\n        }\n        // build the middle part\n        for (int i = 9; i >= 0; i--) {\n            // we want to add the largest digit with odd count\n            if (cnt[i] & 1) {\n                m += i + '0';\n                // since we just need one, we can break here\n                break;\n            }\n        }\n        // handle case like 0000000\n        if (l.size() == 0 && m.size() == 0) {\n            return \"0\";\n        }\n        // build the right part\n        r = l;\n        // which is the mirror of the left part\n        reverse(r.begin(), r.end());\n        // return the final string\n        return l + m + r;\n    }\n};\n")))}f.isMDXComponent=!0}}]);