"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[58815],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=r.createContext({}),s=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,y=u["".concat(m,".").concat(d)]||u[d]||c[d]||a;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8882:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>b,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/majority-element/"},i="0169 - Majority Element (Easy)",l={unversionedId:"0100-0199/majority-element-easy",id:"0100-0199/majority-element-easy",title:"0169 - Majority Element (Easy)",description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/majority-element/",source:"@site/solutions/0100-0199/0169-majority-element-easy.md",sourceDirName:"0100-0199",slug:"/0100-0199/majority-element-easy",permalink:"/solutions/0100-0199/majority-element-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/0100-0199/0169-majority-element-easy.md",tags:[],version:"current",sidebarPosition:169,frontMatter:{description:"Author: @wingkwong, @radojicic23 | https://leetcode.com/problems/majority-element/"},sidebar:"tutorialSidebar",previous:{title:"0165 - Compare Version Numbers (Medium)",permalink:"/solutions/0100-0199/compare-version-numbers-medium"},next:{title:"0188 - Best Time to Buy and Sell Stock IV (Hard)",permalink:"/solutions/0100-0199/best-time-to-buy-and-sell-stock-iv-hard"}},m={},s=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Boyer-Moore Voting Algorithm",id:"approach-1-boyer-moore-voting-algorithm",level:2},{value:"Approach 2: Bit Manipulation",id:"approach-2-bit-manipulation",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},u=p("Tabs"),c=p("TabItem"),d=p("SolutionAuthor"),y={toc:s},h="wrapper";function b(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0169---majority-element-easy"},"0169 - Majority Element (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/majority-element/"},"https://leetcode.com/problems/majority-element/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given an array ",(0,o.kt)("inlineCode",{parentName:"p"},"nums")," of size ",(0,o.kt)("inlineCode",{parentName:"p"},"n"),", return ",(0,o.kt)("em",{parentName:"p"},"the majority element"),"."),(0,o.kt)("p",null,"The majority element is the element that appears more than ",(0,o.kt)("inlineCode",{parentName:"p"},"\u230an / 2\u230b")," times. You may assume that the majority element always exists in the array."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [3,2,3]\nOutput: 3\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [2,2,1,1,1,2,2]\nOutput: 2\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"n == nums.length")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= n <= 5 * 10^4")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"-2^31 <= nums[i] <= 2^31 - 1"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Follow-up:")," Could you solve the problem in linear time and in ",(0,o.kt)("inlineCode",{parentName:"p"},"O(1)")," space?"),(0,o.kt)("h2",{id:"approach-1-boyer-moore-voting-algorithm"},"Approach 1: Boyer-Moore Voting Algorithm"),(0,o.kt)("p",null,"The Boyer-Moore Voting Algorithm is used to find the majority of a sequence of elements using linear time and constant space. We initialise the counter $$i := 0$$ and iterate each number $$x$$. If the counter is $$0$$, then we set $$x$$ as the major element. If the current number is the major element, then we increase the counter by $$1$$, else decrease by $$1$$."),(0,o.kt)("p",null,"Reference: ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm"},"Boyer-Moore Voting Algorithm")),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        // Boyer-Moore Voting Algorithm\n        int i = 0, m = 0;\n        for(int x : nums) {\n            // counter hits 0, reset majority as x and update counter\n            if(i == 0) m = x, i = 1;\n            // increase the counter as x is in the same sequence\n            else if(m == x) i++;\n            // decrease the counter as x is not in the same sequence\n            else i--;\n        }\n        return m;\n    }\n};\n"))),(0,o.kt)(c,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        res, count = 0, 0\n\n        for n in nums:\n            if count == 0:\n                res = n\n            count += (1 if n == res else -1)\n        return res \n"))),(0,o.kt)(c,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)(d,{name:"@radojicic23",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n    let res = 0;\n    let count = 0;\n    for (n of nums) {\n        if (count == 0) res = n, count = 1;\n        else if (n == res) count++;\n        else count--;\n    }\n    return res; \n};\n")))),(0,o.kt)("h2",{id:"approach-2-bit-manipulation"},"Approach 2: Bit Manipulation"),(0,o.kt)("p",null,"If the majority number appears more than $$","[n / 2]","$$ times, each of its bits will also appear more than $$","[n / 2]","$$ times. Therefore, we iterate each bit on each number to see if condition is true. If so, we set this bit as 1."),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(c,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        int m = 0, n = nums.size();\n        // iterate each bit\n        for (int bit = 0; bit < 32; bit++) {\n            int ones = 0;\n            // iterate each number to see if this bit is set or not\n            // if so, add 1 to ones\n            for (auto x : nums) if (x & (1 << bit)) ones++;\n            // if this bit appears more than [n / 2] times\n            // then set this bit on final answer\n            if (ones > (n / 2)) m |= (1 << bit);\n        }\n        return m;\n    }\n};\n")))))}b.isMDXComponent=!0}}]);