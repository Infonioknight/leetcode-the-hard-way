"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[78577],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>k});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=r.createContext({}),u=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(m.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=o,k=p["".concat(m,".").concat(d)]||p[d]||c[d]||a;return t?r.createElement(k,i(i({ref:n},s),{},{components:t})):r.createElement(k,i({ref:n},s))}));function k(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},54140:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>i,default:()=>y,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=t(87462),o=(t(67294),t(3905));const a={description:"Author: @wingkwong | https://leetcode.com/problems/minimum-number-of-operations-to-make-array-continuous/",tags:["Array","Binary Search"]},i="2009 - Minimum Number of Operations to Make Array Continuous (Hard)",l={unversionedId:"2000-2099/minimum-number-of-operations-to-make-array-continuous-hard",id:"2000-2099/minimum-number-of-operations-to-make-array-continuous-hard",title:"2009 - Minimum Number of Operations to Make Array Continuous (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/minimum-number-of-operations-to-make-array-continuous/",source:"@site/solutions/2000-2099/2009-minimum-number-of-operations-to-make-array-continuous-hard.md",sourceDirName:"2000-2099",slug:"/2000-2099/minimum-number-of-operations-to-make-array-continuous-hard",permalink:"/solutions/2000-2099/minimum-number-of-operations-to-make-array-continuous-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tree/main/solutions/2000-2099/2009-minimum-number-of-operations-to-make-array-continuous-hard.md",tags:[{label:"Array",permalink:"/solutions/tags/array"},{label:"Binary Search",permalink:"/solutions/tags/binary-search"}],version:"current",sidebarPosition:2009,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/minimum-number-of-operations-to-make-array-continuous/",tags:["Array","Binary Search"]},sidebar:"tutorialSidebar",previous:{title:"2007 - Find Original Array From Doubled Array (Medium)",permalink:"/solutions/2000-2099/find-original-array-from-doubled-array-medium"},next:{title:"2013 - Detect Squares (Medium)",permalink:"/solutions/2000-2099/detect-squares-medium"}},m={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window",id:"approach-1-sliding-window",level:2}],s=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)},p=s("Tabs"),c=s("TabItem"),d=s("SolutionAuthor"),k={toc:u},h="wrapper";function y(e){let{components:n,...t}=e;return(0,o.kt)(h,(0,r.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"2009---minimum-number-of-operations-to-make-array-continuous-hard"},"2009 - Minimum Number of Operations to Make Array Continuous (Hard)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-number-of-operations-to-make-array-continuous/"},"https://leetcode.com/problems/minimum-number-of-operations-to-make-array-continuous/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given an integer array ",(0,o.kt)("inlineCode",{parentName:"p"},"nums"),". In one operation, you can replace ",(0,o.kt)("strong",{parentName:"p"},"any")," element in ",(0,o.kt)("inlineCode",{parentName:"p"},"nums")," with ",(0,o.kt)("strong",{parentName:"p"},"any")," integer."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"nums")," is considered ",(0,o.kt)("strong",{parentName:"p"},"continuous")," if both of the following conditions are fulfilled:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"All elements in ",(0,o.kt)("inlineCode",{parentName:"li"},"nums")," are ",(0,o.kt)("strong",{parentName:"li"},"unique"),"."),(0,o.kt)("li",{parentName:"ul"},"The difference between the ",(0,o.kt)("strong",{parentName:"li"},"maximum")," element and the ",(0,o.kt)("strong",{parentName:"li"},"minimum")," element in ",(0,o.kt)("inlineCode",{parentName:"li"},"nums")," equals ",(0,o.kt)("inlineCode",{parentName:"li"},"nums.length - 1"),".")),(0,o.kt)("p",null,"For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"nums = [4, 2, 5, 3]")," is ",(0,o.kt)("strong",{parentName:"p"},"continuous"),", but ",(0,o.kt)("inlineCode",{parentName:"p"},"nums = [1, 2, 3, 5, 6]")," is ",(0,o.kt)("strong",{parentName:"p"},"not continuous"),"."),(0,o.kt)("p",null,"Return ",(0,o.kt)("em",{parentName:"p"},"the ",(0,o.kt)("strong",{parentName:"em"},"minimum")," number of operations to make"),(0,o.kt)("inlineCode",{parentName:"p"},"nums"),(0,o.kt)("strong",{parentName:"p"},"continuous"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [4,2,5,3]\nOutput: 0\nExplanation:\xa0nums is already continuous.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1,2,3,5,6]\nOutput: 1\nExplanation:\xa0One possible solution is to change the last element to 4.\nThe resulting array is [1,2,3,5,4], which is continuous.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [1,10,100,1000]\nOutput: 3\nExplanation:\xa0One possible solution is to:\n- Change the second element to 2.\n- Change the third element to 3.\n- Change the fourth element to 4.\nThe resulting array is [1,2,3,4], which is continuous.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 1e5")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= nums[i] <= 1e9"))),(0,o.kt)("h2",{id:"approach-1-sliding-window"},"Approach 1: Sliding Window"),(0,o.kt)(p,{mdxType:"Tabs"},(0,o.kt)(c,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,o.kt)(d,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kt"},"class Solution {\n    fun minOperations(nums: IntArray): Int {\n        val n = nums.size\n        val v = nums.toSortedSet().toIntArray()\n        val m = v.size\n        var ans = n\n        var r = 0\n        for (l in 0 until m) {\n            // assuming v[l] is the min element in the continuous array\n            // the maximum element v[r] would be v[r] - v[l] + 1 = n -> v[r] = v[l] + n - 1\n            // find the target `r` / use binary search here\n            while (r < m && v[r] <= v[l] + n - 1) r++\n            // now we got r - l elements are within the range\n            // the rest of the elements `n - (r - l)` will be replaced\n            // i.e. replace all elements to v[l] in [0 .. l) and v[r] in [r .. m)\n            ans = min(ans, n - (r - l))\n        }        \n        return ans\n    }\n}\n")))))}y.isMDXComponent=!0}}]);